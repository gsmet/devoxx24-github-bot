{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/22974",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22974/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22974/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22974/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/22974",
  "id": 1106984957,
  "node_id": "I_kwDOCFbutM5B-z_9",
  "number": 22974,
  "title": "Allow to set OIDC tenant using annotations",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1479557456,
      "node_id": "MDU6TGFiZWwxNDc5NTU3NDU2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/oidc",
      "name": "area/oidc",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/171",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/171",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/171/labels",
    "id": 7587967,
    "node_id": "MI_kwDOCFbutM4Ac8h_",
    "number": 171,
    "title": "2.8.0.CR1",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 371,
    "state": "closed",
    "created_at": "2022-01-19T09:05:12Z",
    "updated_at": "2023-02-21T15:11:02Z",
    "due_on": null,
    "closed_at": "2022-03-23T12:37:30Z"
  },
  "comments": 7,
  "created_at": "2022-01-18T14:37:14Z",
  "updated_at": "2023-07-12T06:38:05Z",
  "closed_at": "2022-02-09T09:47:09Z",
  "active_lock_reason": null,
  "body": "### Description\n\nLets assume one has a big API in a single Quarkus service (i.e. `quarkus.oidc.application-type=service`), but different APIs are for a different group of people. Like: this JAX-RS annotated class provides endpoints solely for HR, this other class solely for finances, this class is solely for engineering, and so on.\r\n\r\nNow, usually one would solve that using roles, but a problem arises when those groups of people are authenticated by different OIDC providers.\r\n\r\nWe can still leverage OIDC multi-tenancy to solve the issue, but `TenantResolver.resolve(RoutingContext)` offers very little information (apart from the raw request path/URL) to base the decision on.\r\n\r\nIn such scenarios it would be really nice to be able to specify the tenant using annotations, like:\r\n\r\n```java\r\n@TenantId(\"hr\")\r\n@RolesAllowed(\"admin\")\r\n@GET @Path(\"/\")\r\npublic String getSomething() {\r\n    return \"something\";\r\n}\r\n```\n\n### Implementation ideas\n\nAs proposed by @mkouba on Zulip one could leverage an `@Interceptor` to manipulate `RoutingContext` and use that in `TenantResolver`, like:\r\n\r\n```java\r\n@Inherited\r\n@InterceptorBinding\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target({ElementType.METHOD, ElementType.TYPE})\r\npublic @interface HrTenant {\r\n}\r\n```\r\n\r\n```java\r\n@Interceptor\r\n@HrTenant\r\npublic class HrTenantInterceptor {\r\n    @Inject\r\n    RoutingContext routingContext;\r\n\r\n    @AroundInvoke\r\n    Object setTenant(InvocationContext context) throws Exception {\r\n        routingContext.put(OidcUtils.TENANT_ID_ATTRIBUTE, \"hr\");\r\n        return context.proceed();\r\n    }\r\n}\r\n```\r\n\r\n```java\r\n@ApplicationScoped\r\npublic class OidcTenantResolver implements TenantResolver {\r\n    @Override\r\n    public String resolve(RoutingContext context) {\r\n        return context.get(OidcUtils.TENANT_ID_ATTRIBUTE);\r\n    }\r\n}\r\n```\r\n\r\nAs @sberyozkin pointed out: by patching `DefaultTenantResolver` to check for the value we should even be able to avoid a dedictated `TenantResolver`.\r\n\r\nWith a bit more effort it should also be able to implement a parameterized version of the annotation, like:\r\n\r\n```java\r\n@Inherited\r\n@InterceptorBinding\r\n@Retention(RetentionPolicy.RUNTIME)\r\n@Target({ElementType.METHOD, ElementType.TYPE})\r\npublic @interface TenantId {\r\n  @NonBinding String value();\r\n}\r\n```\r\n\r\nThe code providing support for `@CacheInvalidateAll` with its `cacheName` parameter should be exactly the same as we'd need here. But I think that is not worth posting here.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/22974/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22974/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
