{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/33723",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/33723/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/33723/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/33723/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/33723",
  "id": 1733820882,
  "node_id": "I_kwDOCFbutM5nWAHS",
  "number": 33723,
  "title": "Multitenant Quarkus application cannot access multiple tenant databases in one request",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1425555736,
      "node_id": "MDU6TGFiZWwxNDI1NTU1NzM2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/hibernate-orm",
      "name": "area/hibernate-orm",
      "color": "0366d6",
      "default": false,
      "description": "Hibernate ORM"
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 4,
  "created_at": "2023-05-31T09:58:58Z",
  "updated_at": "2023-06-13T09:23:37Z",
  "closed_at": "2023-06-07T19:15:58Z",
  "active_lock_reason": null,
  "body": "I have implemented the following custom `TenantResolver` class.\r\n\r\n```\r\n@ApplicationScoped\r\n@PersistenceUnitExtension\r\npublic class CustomTenantResolver implements TenantResolver {\r\n    String tenantId;\r\n\r\n    public void setTenantId(String tenantId) {\r\n        this.tenantId = tenantId;\r\n    }\r\n\r\n    @Override\r\n    public String getDefaultTenantId() {\r\n        return \"default\";\r\n    }\r\n\r\n    @Override\r\n    public String resolveTenantId() {\r\n        return tenantId;\r\n    }\r\n}\r\n```\r\n\r\nAnd also the following custom `TenantConnectionResolver` class.\r\n\r\n```\r\n@ApplicationScoped\r\n@PersistenceUnitExtension\r\npublic class CustomTenantConnectionResolver implements TenantConnectionResolver {\r\n    public String resolveJdbcUrl(String tenantId) {\r\n        return \"jdbc:mysql://localhost:3306/db_\" + tenantId\r\n    }\r\n\r\n    public AgroalDataSource resolveDataSource(String tenantId) {\r\n        String jdbcUrl = resolveJdbcUrl(tenantId);\r\n\r\n        AgroalDataSourceConfiguration ds = dataSource.getConfiguration();\r\n        AgroalConnectionPoolConfiguration cp = ds.connectionPoolConfiguration();\r\n        AgroalConnectionFactoryConfiguration cf = cp.connectionFactoryConfiguration();\r\n\r\n        AgroalConnectionFactoryConfigurationSupplier cfSupplier\r\n                = new AgroalConnectionFactoryConfigurationSupplier(cf).jdbcUrl(jdbcUrl);\r\n        AgroalConnectionPoolConfigurationSupplier cpSupplier\r\n                = new AgroalConnectionPoolConfigurationSupplier(cp).connectionFactoryConfiguration(cfSupplier);\r\n        AgroalDataSourceConfigurationSupplier dsSupplier\r\n                = new AgroalDataSourceConfigurationSupplier().connectionPoolConfiguration(cpSupplier);\r\n\r\n        return AgroalDataSource.from(dsSupplier);\r\n    }\r\n\r\n    @Override\r\n    public ConnectionProvider resolve(String tenantId) {\r\n        AgroalDataSource tenantDataSource = resolveDataSource(tenantId);\r\n\r\n        return new QuarkusConnectionProvider(tenantDataSource);\r\n    }\r\n}\r\n```\r\n\r\nAnd finally, the following service class.\r\n\r\n```\r\npublic class CustomService {\r\n    @Inject\r\n    @PersistenceUnit\r\n    CustomTenantResolver tenantResolver;\r\n\r\n    @Inject\r\n    @PersistenceUnit\r\n    EntityManager entityManager;\r\n\r\n    public something() {\r\n        List<String> tenantIds = List.of(\"tenant1\", \"tenant2\", \"tenant3\");\r\n\r\n        for (String tenantId : tenantIds) {\r\n            tenantResolver.setTenantId(tenantId);\r\n\r\n            List<Entity> entities = entityManager.createQuery(\"FROM Entity\", Entity.class).getResultList();\r\n\r\n            System.out.println(entities);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nHowever, when I run my Quarkus Application, I notice that in each iteration of the loop, **I get the results from the first tenant database**. In debugging I see that the TenantResolver and TenantConnectionResolver are correctly called with the right tenant id, but when the actual SQL call is made, **it seems to only use the first connection**. So all my results for each tenant is just the result of the first tenant repeated.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/33723/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/33723/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
