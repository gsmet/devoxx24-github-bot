{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/22119",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22119/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22119/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22119/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/22119",
  "id": 1077108602,
  "node_id": "I_kwDOCFbutM5AM196",
  "number": 22119,
  "title": "Mediatype defaults to the first listed mediatype in MessageBodyWriter (resteasy-reactive)",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 2552031458,
      "node_id": "MDU6TGFiZWwyNTUyMDMxNDU4",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/rest",
      "name": "area/rest",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/184",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/184",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/184/labels",
    "id": 7922797,
    "node_id": "MI_kwDOCFbutM4AeORt",
    "number": 184,
    "title": "2.7.6.Final",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 171,
    "state": "closed",
    "created_at": "2022-04-28T08:08:41Z",
    "updated_at": "2022-05-30T11:25:22Z",
    "due_on": null,
    "closed_at": "2022-05-30T11:25:22Z"
  },
  "comments": 6,
  "created_at": "2021-12-10T18:14:06Z",
  "updated_at": "2022-05-12T08:12:54Z",
  "closed_at": "2022-04-01T14:56:05Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nThe MediaType argument in a MessageBodyWriter<>  defaults to the first listed mediatype in the resource.\r\n\r\n```java\r\n@Path(\"\")\r\npublic interface MyResource {\r\n\r\n    @GET\r\n    @Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN})\r\n    Response sayHello();\r\n\r\n}\r\n```\r\n\r\n```java\r\npublic class MyResourceImpl implements MyResource {\r\n\r\n    @Context\r\n    HttpHeaders headers;\r\n\r\n    public Response sayHello() {\r\n        // Acceptable is set correctly according to the request\r\n        var accept = headers.getAcceptableMediaTypes();\r\n\r\n        return Response.ok().entity(\"hello\").build();\r\n    }\r\n}\r\n```\r\n\r\n```java\r\n@Provider\r\n@Produces(MediaType.TEXT_PLAIN)\r\npublic class MyMessageBodyWriter implements MessageBodyWriter<String> {\r\n\r\n    public boolean isWriteable(Class<?> aClass, Type type, Annotation[] annotations, MediaType mediaType) {\r\n        // MediaType is always the first listed mediatype set in @Produces\r\n        return aClass == String.class && mediaType.getType().equals(\"text\") && mediaType.getSubtype().equals(\"plain\");\r\n    }\r\n\r\n    public void writeTo(String message, Class<?> aClass, Type type, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, Object> multivaluedMap, OutputStream outputStream) throws IOException, WebApplicationException {\r\n        outputStream.write(0);\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nExpecting behaviour according to JAX-RS standard.\r\n\r\nIn the example above, the MediaType argument is always application/json in the MessageBodyWriter.\r\nIn the resource method the acceptable media types is handled correctly.\r\n\r\n### Actual behavior\r\n\r\nThe media type in the MessageBodyWriter<> is always the first listed media type from the resources methods @Provides list of media types.\r\n\r\n### How to Reproduce?\r\n\r\n_No response_\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\n_No response_\r\n\r\n### Output of `java -version`\r\n\r\n_No response_\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n_No response_\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\nSorry for the bad formatting of the code.\r\nhttps://stackoverflow.com/questions/69844238/mediatype-is-always-application-json-in-messagebodywriter-in-quarkus-with-quarku",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/22119/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22119/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
