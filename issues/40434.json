{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40434",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40434/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40434/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40434/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/40434",
  "id": 2277323813,
  "node_id": "I_kwDOCFbutM6HvTQl",
  "number": 40434,
  "title": "Quarkus 3.10 fails to start if some OIDC providers don't support UserInfo",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1479557456,
      "node_id": "MDU6TGFiZWwxNDc5NTU3NDU2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/oidc",
      "name": "area/oidc",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/327",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/327",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/327/labels",
    "id": 10976485,
    "node_id": "MI_kwDOCFbutM4Ap3zl",
    "number": 327,
    "title": "3.10.1",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 1,
    "closed_issues": 57,
    "state": "closed",
    "created_at": "2024-04-26T07:55:58Z",
    "updated_at": "2024-08-08T07:30:57Z",
    "due_on": null,
    "closed_at": "2024-05-15T12:10:23Z"
  },
  "comments": 4,
  "created_at": "2024-05-03T09:51:33Z",
  "updated_at": "2024-05-10T16:38:11Z",
  "closed_at": "2024-05-04T21:32:41Z",
  "active_lock_reason": null,
  "body": "### Discussed in https://github.com/quarkusio/quarkus/discussions/40412\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **markusdlugi** May  2, 2024</sup>\r\nOpening this as discussion since I don't know if this can actually be considered to be a bug. Just wanted to discuss this and raise awareness about the behavior ðŸ˜„ \r\n\r\nWith #39428 some behavior was introduced to automagically detect whether `UserInfo` is injected in the application or not. If that is the case, the `user-info-required` property will be enabled by Quarkus itself.\r\n\r\nWhile this is a nice QOL improvement for most Quarkus users, this can cause trouble when there are multiple OIDC providers configured and some of them don't support UserInfo acquisition. For example, we have a corporate OIDC provider that is used for user auth and additionally use an AWS EKS OIDC provider for M2M use-cases. The latter one does not have a user-info endpoint.\r\n\r\nIn such a scenario, Quarkus will fail to start with the following exception:\r\n\r\n```\r\nUserInfo is required but the OpenID Provider UserInfo endpoint is not configured. Use 'quarkus.oidc.user-info-path' if the discovery is disabled.\r\n java.lang.RuntimeException: Failed to start quarkus\r\n     at io.quarkus.runner.ApplicationImpl.doStart(Unknown Source)\r\n     at io.quarkus.runtime.Application.start(Application.java:101)\r\n     at io.quarkus.runtime.ApplicationLifecycleManager.run(ApplicationLifecycleManager.java:111)\r\n     at io.quarkus.runtime.Quarkus.run(Quarkus.java:71)\r\n     at io.quarkus.runtime.Quarkus.run(Quarkus.java:44)\r\n     at io.quarkus.runtime.Quarkus.run(Quarkus.java:124)\r\n     at io.quarkus.runner.GeneratedMain.main(Unknown Source)\r\n     at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\r\n     at java.base/java.lang.reflect.Method.invoke(Method.java:580)\r\n     at io.quarkus.bootstrap.runner.QuarkusEntryPoint.doRun(QuarkusEntryPoint.java:62)\r\n     at io.quarkus.bootstrap.runner.QuarkusEntryPoint.main(QuarkusEntryPoint.java:33)\r\n Caused by: io.smallrye.mutiny.CompositeException: Multiple exceptions caught:\r\n     [Exception 0] io.quarkus.runtime.configuration.ConfigurationException: UserInfo is required but the OpenID Provider UserInfo endpoint is not configured. Use 'quarkus.oidc.user-info-path' if the discovery is disabled.\r\n     [Exception 1] io.quarkus.oidc.OIDCException\r\n     at io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor.performInnerSubscription(UniOnFailureFlatMap.java:94)\r\n     at io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor.dispatch(UniOnFailureFlatMap.java:83)\r\n     at io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor.onFailure(UniOnFailureFlatMap.java:60)\r\n     at io.smallrye.mutiny.operators.uni.UniOperatorProcessor.onFailure(UniOperatorProcessor.java:55)\r\n     at io.smallrye.mutiny.operators.uni.UniOperatorProcessor.onFailure(UniOperatorProcessor.java:55)\r\n     at io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor.onFailure(UniOnItemOrFailureFlatMap.java:67)\r\n     at io.smallrye.mutiny.operators.uni.builders.UniCreateFromKnownFailure$KnownFailureSubscription.forward(UniCreateFromKnownFailure.java:38)\r\n     at io.smallrye.mutiny.operators.uni.builders.UniCreateFromKnownFailure.subscribe(UniCreateFromKnownFailure.java:23)\r\n     at io.smallrye.mutiny.operators.AbstractUni.subscribe(AbstractUni.java:36)\r\n     at io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor.performInnerSubscription(UniOnItemOrFailureFlatMap.java:99)\r\n     at io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor.onItem(UniOnItemOrFailureFlatMap.java:54)\r\n     at io.smallrye.mutiny.operators.uni.UniOnItemTransform$UniOnItemTransformProcessor.onItem(UniOnItemTransform.java:43)\r\n     at io.smallrye.mutiny.operators.uni.UniOperatorProcessor.onItem(UniOperatorProcessor.java:47)\r\n     at io.smallrye.mutiny.operators.uni.builders.UniCreateFromPublisher$PublisherSubscriber.onNext(UniCreateFromPublisher.java:70)\r\n     at io.smallrye.mutiny.subscription.MultiSubscriberAdapter.onItem(MultiSubscriberAdapter.java:27)\r\n     at io.smallrye.mutiny.subscription.MultiSubscriber.onNext(MultiSubscriber.java:61)\r\n     at io.smallrye.mutiny.subscription.SerializedSubscriber.onItem(SerializedSubscriber.java:74)\r\n     at io.smallrye.mutiny.operators.multi.MultiRetryWhenOp$RetryWhenOperator.onItem(MultiRetryWhenOp.java:111)\r\n     at io.smallrye.mutiny.subscription.MultiSubscriber.onNext(MultiSubscriber.java:61)\r\n     at io.smallrye.mutiny.converters.uni.UniToMultiPublisher$UniToMultiSubscription.onItem(UniToMultiPublisher.java:94)\r\n     at io.smallrye.mutiny.operators.uni.UniOnItemTransform$UniOnItemTransformProcessor.onItem(UniOnItemTransform.java:43)\r\n     at io.smallrye.mutiny.vertx.AsyncResultUni.lambda$subscribe$1(AsyncResultUni.java:35)\r\n     at io.smallrye.mutiny.vertx.DelegatingHandler.handle(DelegatingHandler.java:25)\r\n     at io.vertx.ext.web.client.impl.HttpContext.handleDispatchResponse(HttpContext.java:397)\r\n     at io.vertx.ext.web.client.impl.HttpContext.execute(HttpContext.java:384)\r\n     at io.vertx.ext.web.client.impl.HttpContext.next(HttpContext.java:362)\r\n     at io.vertx.ext.web.client.impl.HttpContext.fire(HttpContext.java:329)\r\n     at io.vertx.ext.web.client.impl.HttpContext.dispatchResponse(HttpContext.java:291)\r\n     at io.vertx.ext.web.client.impl.HttpContext.lambda$null$7(HttpContext.java:507)\r\n     at io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:279)\r\n     at io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:261)\r\n     at io.vertx.core.impl.ContextInternal.lambda$runOnContext$0(ContextInternal.java:59)\r\n     at io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)\r\n     at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:166)\r\n     at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)\r\n     at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:566)\r\n     at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\r\n     at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n     at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n     at java.base/java.lang.Thread.run(Thread.java:1583)\r\n     Suppressed: io.quarkus.oidc.OIDCException\r\n         at io.quarkus.oidc.runtime.OidcRecorder$5.apply(OidcRecorder.java:159)\r\n         at io.quarkus.oidc.runtime.OidcRecorder$5.apply(OidcRecorder.java:141)\r\n         at io.smallrye.context.impl.wrappers.SlowContextualFunction.apply(SlowContextualFunction.java:21)\r\n         at io.smallrye.mutiny.groups.UniOnFailure.lambda$recoverWithItem$8(UniOnFailure.java:190)\r\n         at io.smallrye.mutiny.operators.uni.UniOnFailureFlatMap$UniOnFailureFlatMapProcessor.performInnerSubscription(UniOnFailureFlatMap.java:92)\r\n         ... 39 more\r\n     Caused by: io.quarkus.runtime.configuration.ConfigurationException: UserInfo is required but the OpenID Provider UserInfo endpoint is not configured. Use 'quarkus.oidc.user-info-path' if the discovery is disabled.\r\n         at io.quarkus.oidc.runtime.OidcRecorder$11.apply(OidcRecorder.java:545)\r\n         at io.quarkus.oidc.runtime.OidcRecorder$11.apply(OidcRecorder.java:519)\r\n         at io.smallrye.context.impl.wrappers.SlowContextualBiFunction.apply(SlowContextualBiFunction.java:21)\r\n         at io.smallrye.mutiny.operators.uni.UniOnItemOrFailureFlatMap$UniOnItemOrFailureFlatMapProcessor.performInnerSubscription(UniOnItemOrFailureFlatMap.java:86)\r\n         ... 30 more\r\n Caused by: [CIRCULAR REFERENCE: io.quarkus.runtime.configuration.ConfigurationException: UserInfo is required but the OpenID Provider UserInfo endpoint is not configured. Use 'quarkus.oidc.user-info-path' if the discovery is disabled.]\r\n```\r\n\r\nOur configuration prior to Quarkus 3.10 looked like this:\r\n\r\n```\r\nquarkus:\r\n  oidc:\r\n    \"https://oidc.eks.eu-central-1.amazonaws.com/id/ABCDEF123456\":\r\n      auth-server-url: \"https://oidc.eks.eu-central-1.amazonaws.com/id/ABCDEF123456\"\r\n      token:\r\n        forced-jwk-refresh-interval: 0S\r\n        allow-jwt-introspection: false\r\n        allow-opaque-token-introspection: false\r\n        audience: sts.amazonaws.com\r\n    auth-server-url: https://auth.acme.com/auth/oauth2/realms/root/realms/intranetb2x\r\n    token:\r\n      refresh-expired: true\r\n      refresh-token-time-skew: 10M\r\n    application-type: web-app\r\n    client-id: ${OIDC_CLIENT_ID}\r\n    credentials:\r\n      secret: ${OIDC_CLIENT_SECRET}\r\n    authentication:\r\n      java-script-auto-redirect: false\r\n      redirect-path: /app/ui\r\n      user-info-required: true\r\n      scopes: profile microprofile\r\n    roles:\r\n      source: userinfo\r\n    token-cache:\r\n      max-size: 1000\r\n      time-to-live: 5M\r\n      clean-up-timer-interval: 1M\r\n    token-state-manager:\r\n      split-tokens: true\r\n    logout:\r\n      path: /app/logout\r\n      post-logout-path: /app/ui\r\n```\r\n\r\nThe failure can be worked around by explicitly disabling `user-info-required` for the EKS tenant. Therefore, I'm not sure whether this is a bug actually. But it's a little nuisance since such a configuration wasn't required previously. You might argue that most users will rather have a single OIDC provider and so they are less likely to run into this problem, therefore this might still be worth it ðŸ˜… But maybe we could have some smartness to avoid the failure in this scenario?</div>",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40434/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40434/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
