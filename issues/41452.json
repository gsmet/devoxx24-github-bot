{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/41452",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41452/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41452/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41452/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/41452",
  "id": 2374649747,
  "node_id": "I_kwDOCFbutM6NikeT",
  "number": 41452,
  "title": "Quarkus OIDC makes first request very slow",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1479557456,
      "node_id": "MDU6TGFiZWwxNDc5NTU3NDU2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/oidc",
      "name": "area/oidc",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/345",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/345",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/345/labels",
    "id": 11440331,
    "node_id": "MI_kwDOCFbutM4ArpDL",
    "number": 345,
    "title": "3.16 - main",
    "description": "",
    "creator": {
      "login": "quarkusbot",
      "id": 61254497,
      "node_id": "MDQ6VXNlcjYxMjU0NDk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/61254497?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quarkusbot",
      "html_url": "https://github.com/quarkusbot",
      "followers_url": "https://api.github.com/users/quarkusbot/followers",
      "following_url": "https://api.github.com/users/quarkusbot/following{/other_user}",
      "gists_url": "https://api.github.com/users/quarkusbot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quarkusbot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quarkusbot/subscriptions",
      "organizations_url": "https://api.github.com/users/quarkusbot/orgs",
      "repos_url": "https://api.github.com/users/quarkusbot/repos",
      "events_url": "https://api.github.com/users/quarkusbot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quarkusbot/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 110,
    "state": "open",
    "created_at": "2024-08-14T07:55:40Z",
    "updated_at": "2024-09-02T12:40:31Z",
    "due_on": null,
    "closed_at": null
  },
  "comments": 25,
  "created_at": "2024-06-26T08:02:09Z",
  "updated_at": "2024-08-27T10:57:23Z",
  "closed_at": "2024-08-27T10:57:21Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nHi,\r\n\r\nWe use Quarkus OIDC for multi tenancy. We do not use Keycloak, we use our own authentication system. Therefore we set `quarkus.oidc.discovery-enabled` to false, which results in our OIDC config not getting loaded on startup, but on the first request. This makes the first request that gets done to our container (512 vCPU, 1024 memory) very slow (around 4 seconds).\r\n\r\nIs there a way to make a healthcheck manually load the OIDC providers before the first request gets done to the container? Or could there be added a new configuration property to load the providers on startup (such as proposed in https://github.com/quarkusio/quarkus/issues/34890)\r\n\r\n```\r\nquarkus.oidc.enabled=true\r\nquarkus.oidc.discovery-enabled=false\r\nquarkus.oidc.use-blocking-dns-lookup=true\r\nquarkus.oidc.bca.public-key=${OUR_PUBLIC_KEY}\r\nquarkus.oidc.bca.token.audience=bsp\r\nquarkus.oidc.bca.token.issued-at-required=false\r\nquarkus.oidc.bca.application-type=service\r\nquarkus.oidc.bca.token.signature-algorithm=rs256\r\nquarkus.oidc.auth-server-url=${JWKS_LOCATION}\r\nquarkus.oidc.jwks-path=${JWKS_LOCATION}\r\nquarkus.oidc.token.issued-at-required=false\r\nquarkus.oidc.token.signature-algorithm=es256\r\nquarkus.oidc.application-type=service\r\n```\r\n\r\nWe also have our own TenantResolverConfig, to get the tenant config based on the tenant:\r\n\r\n```\r\n@ApplicationScoped\r\npublic class TokenTenantResolver implements TenantConfigResolver {\r\n  private static final String ISSUER_PATH = \"iss\";\r\n\r\n  @ConfigProperty(name = \"quarkus.oidc.bca.token.issuer\")\r\n  String bcaIssuer;\r\n\r\n  @ConfigProperty(name = \"quarkus.oidc.bca.public-key\")\r\n  String bcaPublicKey;\r\n\r\n  @SneakyThrows\r\n  public Uni<OidcTenantConfig> resolve(\r\n      RoutingContext context, OidcRequestContext<OidcTenantConfig> requestContext) {\r\n    final var jwtString = context.request().headers().get(\"Authorization\");\r\n\r\n    if (jwtString == null) {\r\n      return Uni.createFrom().nullItem();\r\n    }\r\n\r\n    final var jwtHeaders = io.quarkus.oidc.runtime.OidcUtils.decodeJwtContent(jwtString);\r\n\r\n    if (jwtHeaders != null && jwtHeaders.getValue(ISSUER_PATH).equals(bcaIssuer)) {\r\n      OidcTenantConfig config = new OidcTenantConfig();\r\n      config.setTenantId(\"bca\");\r\n      config.setPublicKey(bcaPublicKey);\r\n      config.getToken().setIssuedAtRequired(false);\r\n      config.setApplicationType(OidcTenantConfig.ApplicationType.SERVICE);\r\n      return Uni.createFrom().item(config);\r\n    } else {\r\n      // resolve to default tenant config\r\n      return Uni.createFrom().nullItem();\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nAll the fields in our config for our OIDC tenants are \"deterministic\" as in, they could easily be loaded on startup. So initializing them on startup would be our expected behavior\r\n\r\n### Actual behavior\r\n\r\nThe OIDC config does not get loaded on startup, resulting in intializing all OIDC classes etc on the first request, which makes the first request very slow.\r\n\r\n### How to Reproduce?\r\n\r\n_No response_\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nAWS ECS Fargate container\r\n\r\n### Output of `java -version`\r\n\r\nopenjdk 21.0.1 2023-10-17 LTS OpenJDK Runtime Environment Corretto-21.0.1.12.1 (build 21.0.1+12-LTS) OpenJDK 64-Bit Server VM Corretto-21.0.1.12.1 (build 21.0.1+12-LTS, mixed mode, sharing)\r\n\r\n### Quarkus version or git rev\r\n\r\n3.11.0\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\ndocker\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/41452/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41452/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
