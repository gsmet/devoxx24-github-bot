{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/42915",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/42915/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/42915/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/42915/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/42915",
  "id": 2497744360,
  "node_id": "I_kwDOCFbutM6U4I3o",
  "number": 42915,
  "title": "Upgrading to 3.13.x+ causes parameterised tests using record argument to fail with LinkageError 'loader constraint violation'",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1375177076,
      "node_id": "MDU6TGFiZWwxMzc1MTc3MDc2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/testing",
      "name": "area/testing",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 3,
  "created_at": "2024-08-30T16:33:46Z",
  "updated_at": "2024-09-02T07:03:59Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Describe the bug\n\nJUnit5 parameterised tests having a Java record as argument type for the test method fail when upgrading to Quarkus 3.13.0 or higher.\r\nThe issue is caused by some class loading issue when the Java record has a property of a type not provided by Java like a Vavr `Option`. Just using String or Integer property type does not cause the test to fail.\r\n\r\nI think this is somehow related to the change made for issue #15892 .\r\n\r\nWhat is the point of cloning a Java record anyway? The object is already immutable.\r\nCan the `NewSerializingDeepClone` introduced to fix #15892 (I think) just **not** clone Java records?\n\n### Expected behavior\n\nTest run run normally as with Quarkus versions <= 3.12.3.\n\n### Actual behavior\n\nThe test fails with:\r\n```\r\njava.lang.IllegalStateException: Error calling onstructor on record class class my.package.NotificationQuery\r\n\r\n\tat org.jboss.marshalling.reflect.JDKSpecific.invokeRecordCanonicalConstructor(JDKSpecific.java:111)\r\n\tat org.jboss.marshalling.reflect.SerializableClass.invokeRecordCanonicalConstructor(SerializableClass.java:477)\r\n\tat org.jboss.marshalling.cloner.SerializingCloner.clone(SerializingCloner.java:293)\r\n\tat org.jboss.marshalling.cloner.SerializingCloner.clone(SerializingCloner.java:132)\r\n\tat io.quarkus.test.junit.internal.NewSerializingDeepClone.clone(NewSerializingDeepClone.java:128)\r\n\tat io.quarkus.test.junit.QuarkusTestExtension.runExtensionMethod(QuarkusTestExtension.java:963)\r\n\tat io.quarkus.test.junit.QuarkusTestExtension.runExtensionMethod(QuarkusTestExtension.java:903)\r\n\tat io.quarkus.test.junit.QuarkusTestExtension.interceptTestTemplateMethod(QuarkusTestExtension.java:863)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:194)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)\r\n\tat java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1939)\r\n\tat java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:782)\r\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:291)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:556)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:546)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\r\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)\r\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:611)\r\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:291)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:556)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:546)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\r\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)\r\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:611)\r\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:291)\r\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:556)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:546)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\r\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)\r\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:611)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1597)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1597)\r\nCaused by: java.lang.IllegalAccessException: no such constructor: my.package.NotificationQuery.<init>(Option,Boolean,Option,Option,Integer,Integer)void/newInvokeSpecial\r\n\tat java.base/java.lang.invoke.MemberName.makeAccessException(MemberName.java:906)\r\n\tat java.base/java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:989)\r\n\tat java.base/java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:3762)\r\n\tat java.base/java.lang.invoke.MethodHandles$Lookup.findConstructor(MethodHandles.java:2822)\r\n\tat org.jboss.marshalling.reflect.JDKSpecific.invokeRecordCanonicalConstructor(JDKSpecific.java:107)\r\n\t... 52 more\r\nCaused by: java.lang.LinkageError: loader constraint violation: when resolving method 'void my.package.NotificationQuery.<init>(io.vavr.control.Option, java.lang.Boolean, io.vavr.control.Option, io.vavr.control.Option, java.lang.Integer, java.lang.Integer)' the class loader 'app' of the current class, org/jboss/marshalling/reflect/JDKSpecific, and the class loader io.quarkus.bootstrap.classloading.QuarkusClassLoader @25216999 for the method's defining class, my/package/NotificationQuery, have different Class objects for the type io/vavr/control/Option used in the signature (org.jboss.marshalling.reflect.JDKSpecific is in unnamed module of loader 'app'; my.package.NotificationQuery is in unnamed module of loader io.quarkus.bootstrap.classloading.QuarkusClassLoader @25216999, parent loader io.quarkus.bootstrap.classloading.QuarkusClassLoader @61a1ea2c)\r\n\tat java.base/java.lang.invoke.MethodHandleNatives.resolve(Native Method)\r\n\tat java.base/java.lang.invoke.MemberName$Factory.resolve(MemberName.java:957)\r\n\tat java.base/java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:986)\r\n\t... 55 more\r\n```\r\n\r\nNotificationQuery.java\r\n```java\r\npublic record NotificationQuery(\r\n        Option<String> searchTerm,\r\n        Boolean showUnread,\r\n        Option<Notification.Level> level,\r\n        Option<SortOrder> sortOrders,\r\n        Integer limit,\r\n        Integer offset) {}\r\n```\r\n\r\nTest\r\n```java\r\n@DisplayNameGeneration(DisplayNameGenerator.ReplaceUnderscores.class)\r\n@QuarkusTest\r\n@TestTransaction\r\nclass NotificationRepositoryTest {\r\n    private final NotificationRepository notificationRepository;\r\n\r\n    NotificationRepositoryTest(NotificationRepository notificationRepository) {\r\n        this.notificationRepository = notificationRepository;\r\n    }\r\n\r\n    /**\r\n     * Provides arguments for testing the \"findNotifications\" method with various filter configurations.\r\n     * The queryBuilder method takes three parameters:\r\n     * <ul>\r\n     *     <li>{@code searchTerm}: An optional search term used to filter notifications by id, message, or category.</li>\r\n     *     <li>{@code showUnread}: A required boolean flag indicating whether unread notifications are included too.</li>\r\n     *     <li>{@code level}: An optional filter based on the notification level (e.g., <em>Info, Warning, Error</em>).</li>\r\n     * </ul>\r\n     * Each argument contains a query builder configuration and an expected list of unique messages.\r\n     * The assertion will rely on this list to determine whether the correct Notification has been returned from the repository.\r\n     *\r\n     * @return Stream of Arguments containing query builder configurations and expected notification messages\r\n     */\r\n    static Stream<Arguments> provideArgumentsForFindNotifications() {\r\n        return Stream.of(\r\n                // 1: Match all notifications based on no filters\r\n                arguments(queryBuilder(none(), false, none()),\r\n                        of(\"message1\", \"message2\", \"message3\", \"message4\", \"message5\", \"message6\", \"message7\", \"message8\", \"message9\", \"message10\", \"unique messageX\")),\r\n                // 2: Match notifications based on searchTerm (message)\r\n                arguments(queryBuilder(some(\"message1\"), false, none()),\r\n                        of(\"message1\", \"message10\")),\r\n                // 3: Match notifications based on searchTerm (category)\r\n                arguments(queryBuilder(some(\"ui\"), false, none()),\r\n                        of(\"message2\")),\r\n                // 4: Match notifications based on level = ERROR\r\n                arguments(queryBuilder(none(), false, some(Notification.Level.ERROR)),\r\n                        of(\"message3\", \"message6\", \"message9\")),\r\n                // 5: Match notifications based on level = WARNING (and above)\r\n                arguments(queryBuilder(none(), false, some(Notification.Level.WARNING)),\r\n                        of(\"message2\", \"message3\", \"message5\", \"message6\", \"message8\", \"message9\")),\r\n                // 6: Match notifications based on showUnread = true\r\n                arguments(queryBuilder(none(), true, none()),\r\n                        of(\"message1\", \"message3\", \"message5\", \"message7\", \"message9\", \"unique messageX\")),\r\n                // 7: Match notifications based on showUnread = false\r\n                arguments(queryBuilder(none(), false, none()),\r\n                        of(\"message1\", \"message2\", \"message3\", \"message4\", \"message5\", \"message6\", \"message7\", \"message8\", \"message9\", \"message10\", \"unique messageX\")),\r\n                // 8: Match no notifications due to invalid input\r\n                arguments(queryBuilder(some(\"invalid\"), true, none()),\r\n                        empty()),\r\n                // 9: Match specific notification based on all filter parameters\r\n                arguments(queryBuilder(some(\"unique\"), true, some(Notification.Level.INFO)),\r\n                        of(\"unique messageX\"))\r\n        );\r\n    }\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(\"provideArgumentsForFindNotifications\")\r\n    void count_should_return_total_number_of_notifications_based_on_testcase(NotificationQuery query, List<String> messages) {\r\n        insertNotificationsForFindNotifications();\r\n\r\n        var foundNotifications = notificationRepository.count(query);\r\n\r\n        assertThat(foundNotifications).isEqualTo(messages.size());\r\n    }\r\n}\r\n```\n\n### How to Reproduce?\n\nThis issue is reproducible when using a Record class containing a Vavr Option.\r\nWhen just using a String or Integer as record property, the test does not fail.\r\n\r\n```java\r\npackage io.dhlparcel.energy.cpo.db;\r\n\r\nimport io.vavr.control.Option;\r\n\r\nimport java.io.Serializable;\r\n\r\npublic record Value(Option<Integer> size) implements Serializable {\r\n}\r\n```\r\n\r\nTest\r\n```java\r\npackage io.dhlparcel.energy.cpo.db;\r\n\r\nimport io.quarkus.test.junit.QuarkusTest;\r\nimport org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.Arguments;\r\nimport org.junit.jupiter.params.provider.MethodSource;\r\n\r\nimport java.util.stream.Stream;\r\n\r\nimport static io.vavr.control.Option.none;\r\nimport static io.vavr.control.Option.some;\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\n\r\n@QuarkusTest\r\npublic class ReproduceTest {\r\n\r\n    private static Stream<Arguments> testCases() {\r\n        return Stream.of(\r\n                Arguments.of(new Value(some(5)), 5),\r\n                Arguments.of(new Value(none()), 0)\r\n        );\r\n    }\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(\"testCases\")\r\n    void testThis(Value value, Integer expected) {\r\n        assertEquals(expected, value.size().getOrElse(0));\r\n    }\r\n}\r\n```\r\n\r\nFails with\r\n```\r\n\r\nWARNING: A Java agent has been loaded dynamically (/Users/myuser/.m2/repository/net/bytebuddy/byte-buddy-agent/1.14.15/byte-buddy-agent-1.14.15.jar)\r\nWARNING: If a serviceability tool is in use, please run with -XX:+EnableDynamicAgentLoading to hide this warning\r\nWARNING: If a serviceability tool is not in use, please run with -Djdk.instrument.traceUsage for more information\r\nWARNING: Dynamic loading of agents will be disallowed by default in a future release\r\n\r\njava.lang.IllegalStateException: Error calling onstructor on record class class my.package.Value\r\n\r\n\tat org.jboss.marshalling.reflect.JDKSpecific.invokeRecordCanonicalConstructor(JDKSpecific.java:111)\r\n\tat org.jboss.marshalling.reflect.SerializableClass.invokeRecordCanonicalConstructor(SerializableClass.java:477)\r\n\tat org.jboss.marshalling.cloner.SerializingCloner.clone(SerializingCloner.java:293)\r\n\tat org.jboss.marshalling.cloner.SerializingCloner.clone(SerializingCloner.java:132)\r\n\tat io.quarkus.test.junit.internal.NewSerializingDeepClone.clone(NewSerializingDeepClone.java:128)\r\n\tat io.quarkus.test.junit.QuarkusTestExtension.runExtensionMethod(QuarkusTestExtension.java:963)\r\n\tat io.quarkus.test.junit.QuarkusTestExtension.runExtensionMethod(QuarkusTestExtension.java:903)\r\n\tat io.quarkus.test.junit.QuarkusTestExtension.interceptTestTemplateMethod(QuarkusTestExtension.java:863)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:194)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)\r\n\tat java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:782)\r\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:291)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:556)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:546)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\r\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)\r\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:611)\r\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:291)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:212)\r\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:556)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:546)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\r\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)\r\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:611)\r\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:291)\r\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:556)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:546)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)\r\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:265)\r\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:611)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1597)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1597)\r\nCaused by: java.lang.IllegalAccessException: no such constructor: my.package.Value.<init>(Option)void/newInvokeSpecial\r\n\tat java.base/java.lang.invoke.MemberName.makeAccessException(MemberName.java:906)\r\n\tat java.base/java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:989)\r\n\tat java.base/java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:3762)\r\n\tat java.base/java.lang.invoke.MethodHandles$Lookup.findConstructor(MethodHandles.java:2822)\r\n\tat org.jboss.marshalling.reflect.JDKSpecific.invokeRecordCanonicalConstructor(JDKSpecific.java:107)\r\n\t... 51 more\r\nCaused by: java.lang.LinkageError: loader constraint violation: when resolving method 'void my.package.Value.<init>(io.vavr.control.Option)' the class loader 'app' of the current class, org/jboss/marshalling/reflect/JDKSpecific, and the class loader io.quarkus.bootstrap.classloading.QuarkusClassLoader @6480a063 for the method's defining class, my/package/Value, have different Class objects for the type io/vavr/control/Option used in the signature (org.jboss.marshalling.reflect.JDKSpecific is in unnamed module of loader 'app'; my.package.Value is in unnamed module of loader io.quarkus.bootstrap.classloading.QuarkusClassLoader @6480a063, parent loader io.quarkus.bootstrap.classloading.QuarkusClassLoader @33d53216)\r\n\tat java.base/java.lang.invoke.MethodHandleNatives.resolve(Native Method)\r\n\tat java.base/java.lang.invoke.MemberName$Factory.resolve(MemberName.java:957)\r\n\tat java.base/java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:986)\r\n\t... 54 more\r\n```\n\n### Output of `uname -a` or `ver`\n\nDarwin MacBook-Pro-8.local 22.5.0 Darwin Kernel Version 22.5.0: Mon Apr 24 20:53:19 PDT 2023; root:xnu-8796.121.2~5/RELEASE_ARM64_T6020 arm64\n\n### Output of `java -version`\n\nopenjdk version \"22\" 2024-03-19 OpenJDK Runtime Environment Temurin-22+36 (build 22+36) OpenJDK 64-Bit Server VM Temurin-22+36 (build 22+36, mixed mode)\n\n### Quarkus version or git rev\n\n3.13.0+\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.9.3 (21122926829f1ead511c958d89bd2f672198ae9f) Maven home: /Users/myuser/.m2/wrapper/dists/apache-maven-3.9.3-bin/326f10f4/apache-maven-3.9.3 Java version: 22, vendor: Eclipse Adoptium, runtime: /Users/myuser/.sdkman/candidates/java/22-tem Default locale: en_GB, platform encoding: UTF-8 OS name: \"mac os x\", version: \"13.4\", arch: \"aarch64\", family: \"mac\"\n\n### Additional information\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/42915/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/42915/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
