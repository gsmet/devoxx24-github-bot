{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/39600",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39600/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39600/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39600/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/39600",
  "id": 2198009068,
  "node_id": "I_kwDOCFbutM6DAvTs",
  "number": 39600,
  "title": "Kubernetes Mock Server not dealing correctly with LabelSelector when using matchLabels and matchExpressions",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1375177076,
      "node_id": "MDU6TGFiZWwxMzc1MTc3MDc2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/testing",
      "name": "area/testing",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 1654772125,
      "node_id": "MDU6TGFiZWwxNjU0NzcyMTI1",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/kubernetes",
      "name": "area/kubernetes",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 5,
  "created_at": "2024-03-20T16:41:06Z",
  "updated_at": "2024-04-16T09:21:32Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nWhen doing unit tests using the Kubernetes/Openshift server use of matchExpressions is not working properly\r\n\r\n### Expected behavior\r\n\r\nGet the mathing namespaces\r\n\r\n### Actual behavior\r\n\r\nSeems like it is just ignoring the matchExpressions\r\n\r\n### How to Reproduce?\r\n\r\nUse this test, there will be 2 fails because MatchExpressions are not handled well by the mock server, in the code is commented right after the failing test the query sent to api. Using this same query against a real kubernetes or openshift API returns the right namespaces.\r\n\r\n```java\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\n\r\nimport java.util.List;\r\n\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport io.fabric8.kubernetes.api.model.LabelSelector;\r\nimport io.fabric8.kubernetes.api.model.LabelSelectorBuilder;\r\nimport io.fabric8.kubernetes.api.model.NamespaceBuilder;\r\nimport io.fabric8.kubernetes.client.KubernetesClient;\r\nimport io.quarkus.test.junit.QuarkusTest;\r\nimport io.quarkus.test.kubernetes.client.WithKubernetesTestServer;\r\nimport jakarta.inject.Inject;\r\n\r\n@WithKubernetesTestServer\r\n@QuarkusTest\r\npublic class SimpleTest {\r\n\r\n    @Inject\r\n    KubernetesClient oc;\r\n\r\n    @Test\r\n    void selectorWorksWell() {\r\n        var organization1 = \"org1\";\r\n        var organization2 = \"org2\";\r\n        var organizationLabel = \"example.com/organization\";\r\n        var namespace1 = new NamespaceBuilder().withNewMetadata().withName(\"namespace1-\" + organization1)\r\n                .addToLabels(organizationLabel, organization1)\r\n                .addToLabels(\"kubernetes.io/metadata.name\", \"namespace1-\" + organization1).endMetadata()\r\n                .build();\r\n        var namespace2 = new NamespaceBuilder().withNewMetadata().withName(\"namespace2-\" + organization1)\r\n                .addToLabels(organizationLabel, organization1)\r\n                .addToLabels(\"kubernetes.io/metadata.name\", \"namespace2-\" + organization1).endMetadata()\r\n                .build();\r\n        var namespace3 = new NamespaceBuilder().withNewMetadata().withName(\"namespace3-\" + organization1)\r\n                .addToLabels(organizationLabel, organization1)\r\n                .addToLabels(\"kubernetes.io/metadata.name\", \"namespace3-\" + organization1).endMetadata()\r\n                .build();\r\n        var namespace4 = new NamespaceBuilder().withNewMetadata().withName(\"namespace4-\" + organization1)\r\n                .addToLabels(organizationLabel, organization2)\r\n                .addToLabels(\"kubernetes.io/metadata.name\", \"namespace4-\" + organization1).endMetadata()\r\n                .build();\r\n        oc.namespaces().resource(namespace1).create();\r\n        oc.namespaces().resource(namespace2).create();\r\n        oc.namespaces().resource(namespace3).create();\r\n        oc.namespaces().resource(namespace4).create();\r\n        LabelSelector selector = new LabelSelectorBuilder().addNewMatchExpression()\r\n                .withKey(\"kubernetes.io/metadata.name\")\r\n                .withOperator(\"In\")\r\n                .withValues(List.of(\"namespace1-\" + organization1, \"namespace2-\" + organization1))\r\n                .endMatchExpression()\r\n                .addToMatchLabels(organizationLabel, organization1)\r\n                .build();\r\n        var namespacesWithMatchLabelsAndMatchExpressions = oc.namespaces().withLabelSelector(selector).list().getItems();\r\n        selector = new LabelSelectorBuilder().addToMatchLabels(organizationLabel, organization1).build();\r\n        var namespacesWithMatchLabelsOrg1 = oc.namespaces().withLabelSelector(selector).list().getItems();\r\n        selector = new LabelSelectorBuilder().addToMatchLabels(organizationLabel, organization2).build();\r\n        var namespacesWithMatchLabelsOrg2 = oc.namespaces().withLabelSelector(selector).list().getItems();\r\n        selector = new LabelSelectorBuilder().addNewMatchExpression()\r\n                .withKey(organizationLabel)\r\n                .withOperator(\"NotIn\")\r\n                .withValues(organization1)\r\n                .endMatchExpression()\r\n                .build();\r\n        var namespacesUsingOnlyMatchExpression = oc.namespaces().withLabelSelector(selector).list().getItems();\r\n        assertEquals(3, namespacesWithMatchLabelsOrg1.size());\r\n        assertEquals(1, namespacesWithMatchLabelsOrg2.size());\r\n        assertEquals(1, namespacesUsingOnlyMatchExpression.size()); //-> actual is 4\r\n        // GET /api/v1/namespaces?labelSelector=example.com%2Forganization%20notin%20%28org1%29\r\n        assertEquals(2, namespacesWithMatchLabelsAndMatchExpressions.size()); //-> actual is 3\r\n        // GET /api/v1/namespaces?labelSelector=example.com%2Forganization%3Dorg1%2Ckubernetes.io%2Fmetadata.name%20in%20%28namespace1-org1%2Cnamespace2-org1%29\r\n    }\r\n\r\n}\r\n\r\n```\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nLinux workhorse 5.15.0-100-generic #110-Ubuntu SMP Wed Feb 7 13:27:48 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n### Output of `java -version`\r\n\r\njava version \"17.0.5\" 2022-10-18 LTS Java(TM) SE Runtime Environment (build 17.0.5+9-LTS-191) Java HotSpot(TM) 64-Bit Server VM (build 17.0.5+9-LTS-191, mixed mode, sharing)\r\n\r\n### Quarkus version or git rev\r\n\r\n3.8.3\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nApache Maven 3.8.5 (3599d3414f046de2324203b78ddcf9b5e4388aa0)\r\n\r\n### Additional information\r\n\r\nI've tried also with quarkus 3.2.10.Final, and found same issue.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/39600/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39600/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
