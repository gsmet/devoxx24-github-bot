{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/31573",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31573/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31573/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31573/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/31573",
  "id": 1608215160,
  "node_id": "I_kwDOCFbutM5f22p4",
  "number": 31573,
  "title": "Provide support for Contextual Profiling",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 2236031412,
      "node_id": "MDU6TGFiZWwyMjM2MDMxNDEy",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/tracing",
      "name": "area/tracing",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 1,
  "created_at": "2023-03-03T08:58:28Z",
  "updated_at": "2023-03-03T09:39:23Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "https://krzysztofslusarski.github.io/2022/12/12/async-manual.html#context-id shows what's currently possible (and in the future with JFR with https://bugs.openjdk.org/browse/JDK-8284453) if you have a profiler able to collect traces per externally provided \"context ID\" i.e. performing a very lightweight distributed continuous profiling which collect and present data in a very easy consumable format e.g. flamegraphs and/or JFR events.\r\n\r\nA Concrete implementation would produce a flamegraph like this:\r\nhttps://krzysztofslusarski.github.io/assets/async-demos/context-1.html\r\n\r\n<img width=\"512\" alt=\"Screenshot 2023-03-03 at 09 32 51\" src=\"https://user-images.githubusercontent.com/2318030/222685482-16591734-f50c-4dd8-8dff-acbc946628c3.png\">\r\n\r\nThis is a flamegraph which base stack is a single app.\r\nThe total flamegraph data contains 3 different apps: first/second/thidApp\r\nThe stack trace here is a \"real\" one because the example from the blog post wasn't caring about the reactive stack.\r\nHowever, if we provide a context id that's used by the same processing pipeline of smallrye, for each of its stages we can collect them in 2 ways:\r\n- Base stack context ID of the N stages and all the stages under the same context ID (unordered but coherent - belonging to the same context id).\r\n- If we provide additionally number for the stages, in sequence eg context ID = 2, smallrye stage = 1,2,3,4 we might show the stages in the right temporal sequence...  **To be confirmed** because AFAIK smallrye probably can execute stages in parallel - meaning that order is partial.\r\n\r\nThis would allow us to report all the pieces of processing of a reactive request under the same context ID, because right now they all mix (they are unrelated to each others) while collected on the same thread.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/31573/reactions",
    "total_count": 2,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 2,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31573/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
