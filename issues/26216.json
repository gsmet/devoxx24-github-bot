{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/26216",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/26216/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/26216/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/26216/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/26216",
  "id": 1275734118,
  "node_id": "I_kwDOCFbutM5MCihm",
  "number": 26216,
  "title": "OpenTelemetry: By default high HTTP span name cardinality for HTTP server spans",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 2236031412,
      "node_id": "MDU6TGFiZWwyMjM2MDMxNDEy",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/tracing",
      "name": "area/tracing",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/198",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/198",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/198/labels",
    "id": 8238159,
    "node_id": "MI_kwDOCFbutM4AfbRP",
    "number": 198,
    "title": "2.11.1.Final",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 31,
    "state": "closed",
    "created_at": "2022-07-26T14:29:33Z",
    "updated_at": "2022-07-27T12:20:48Z",
    "due_on": null,
    "closed_at": "2022-07-27T12:20:48Z"
  },
  "comments": 9,
  "created_at": "2022-06-18T08:40:56Z",
  "updated_at": "2022-07-26T14:31:20Z",
  "closed_at": "2022-06-29T13:15:13Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nThis is a follow-up of #16952.\r\nWhen using the `quarkus-opentelemetry` extension and observing Vert.x HTTP server request spans, the default is still to see span names containing the full request URI path. This means you will possibly get a whole range of span names like\r\n```\r\n/products/myProductId123\r\n/products/myProductId234\r\n/someWeirdPathTryingToExploitSomeVulnerability?someParamX\r\n```\r\nThe [OTEL spec](https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/http.md#name) declares such high cardinality span names as unsuitable. In practice, this means the span selection combobox in the Jaeger UI becomes unusable.\r\n\r\n#17676 was supposed to fix this by introducing span names with parameterized paths (e..g `/products/{productId}`), but there are quite some steps involved to fully prevent the high cardinality span names.\r\n\r\n#### To prevent the issue\r\n\r\n- A \"match-all\" Vert.x Router route has to be added. That route must either have a name set or `ctx.request().routed(someName)` has to be invoked in its handler. This prevents full request URI span names for any unsupported request paths (that lead to a 404 response).\r\n- The \"match-all\" route also needs a failure handler, so that invalid HTTP requests don't show up in tracing with their full request paths. (But you want to ensure that the failure handler route name isn't used as span name for all requests where a _specific_ route already got matched - you want the specific route name as span name then (see example code below).)\r\n- [EDIT: If the application uses the `quarkus-micrometer` dependency], the Vert.x HTTP server metrics have to be enabled by setting `quarkus.micrometer.binder.http-server.enabled=true`.\r\nWithout that, no parameterized paths get used.\r\n\r\n<details>\r\n<summary>Example matchAll route</summary>\r\n\r\n~~~\r\n        final Route matchAllRoute = router.route();\r\n        matchAllRoute.failureHandler(ctx -> {\r\n            if (ctx.get(KEY_MATCH_ALL_ROUTE_APPLIED) == null) {\r\n                // handler of matchAllRoute not applied, meaning this request is invalid/failed from the start;\r\n                // ensure span name is set to fixed string instead of the request path\r\n                ctx.request().routed(MATCH_ALL_ROUTE_NAME);\r\n            }\r\n            ctx.next();\r\n        });\r\n        matchAllRoute.handler(ctx -> {\r\n            // ensure span name is set to fixed string instead of the request path\r\n            ctx.request().routed(MATCH_ALL_ROUTE_NAME);\r\n            ctx.put(KEY_MATCH_ALL_ROUTE_APPLIED, true);\r\n            ctx.next();\r\n        });\r\n~~~\r\n\r\n</details>\r\n\r\n#### Summary\r\n\r\nFMPOV, the issue here is that\r\n- the default span name is still the full request URI path, **if no named route gets applied** (or `ctx.request().routed(name)` isn't invoked).\r\n- with `quarkus-micrometer` being used and without Vert.x HTTP server metrics enabled, still the full request URI paths get used as span names for all requests\r\n\r\n\r\n### Expected behavior\r\n\r\nI would expect the HTTP request method name (`GET`, `POST`, `PUT`, etc.) to be used as span name if Vert.x HTTP server metrics are not enabled and also if no request route name got set/applied (i.e. no named route got matched and `ctx.request().routed(name)` wasn't invoked).\r\n\r\nIt seems to me, this can be implemented by just letting the `route(HttpRequest)` method in `HttpInstrumenterVertxTracer.ServerAttributesExtractor` always return `null`.\r\n\r\n### Actual behavior\r\n\r\nHigh cardinality span names are used by default.\r\n\r\n### How to Reproduce?\r\n\r\nMake HTTP requests to quarkus-opentelemetry application having Vert.x HTTP server endpoint.\r\n- Make requests with unsupported paths, leading to 404 responses. \r\n- Make invalid HTTP requests (e.g. with `printf 'GET invalid HTTP/1.0\\r\\n\\r\\n' | nc -q 3 localhost 80`).\r\nObserve span names in Jaeger UI.\r\n- EDIT: Add `quarkus-micrometer` dependency and make requests to be handled by routes with parameterized paths.\r\n\r\nObserve span names.\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\n`Linux be6z00br-vm 5.4.0-117-generic #132-Ubuntu SMP Thu Jun 2 00:39:06 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux`\r\n\r\n### Output of `java -version`\r\n\r\nopenjdk 17.0.3 2022-04-19\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n2.8.3\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/26216/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/26216/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
