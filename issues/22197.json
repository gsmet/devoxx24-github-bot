{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/22197",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22197/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22197/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22197/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/22197",
  "id": 1079862773,
  "node_id": "I_kwDOCFbutM5AXWX1",
  "number": 22197,
  "title": "OIDC: TenantResolver enhancement",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1479557456,
      "node_id": "MDU6TGFiZWwxNDc5NTU3NDU2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/oidc",
      "name": "area/oidc",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/161",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/161",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/161/labels",
    "id": 7468359,
    "node_id": "MI_kwDOCFbutM4AcfVH",
    "number": 161,
    "title": "2.7.0.CR1",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 334,
    "state": "closed",
    "created_at": "2021-12-08T07:48:18Z",
    "updated_at": "2022-02-03T19:52:11Z",
    "due_on": null,
    "closed_at": "2022-01-19T12:42:36Z"
  },
  "comments": 7,
  "created_at": "2021-12-14T14:59:35Z",
  "updated_at": "2021-12-21T11:29:12Z",
  "closed_at": "2021-12-20T10:07:09Z",
  "active_lock_reason": null,
  "body": "### Description\n\nATM I have to use `TenantResolver` to be able to support multiple OIDC providers (github, google) and also a manual JWT option, where I handle my own auth via a JWT token.\r\n\r\nConfig looks like this:\r\n\r\n```\r\n# Default=Google\r\nquarkus.oidc.auth-server-url=https://accounts.google.com\r\n...\r\n\r\n# Github\r\nquarkus.oidc.github.auth-server-url=https://github.com/login/oauth\r\n...\r\n\r\n# MS\r\nquarkus.oidc.microsoft.auth-server-url=https://login.microsoftonline.com/common/v2.0\r\n...\r\n\r\n# Facebook\r\nquarkus.oidc.facebook.auth-server-url=https://www.facebook.com\r\n...\r\n\r\n# Apple\r\nquarkus.oidc.apple.auth-server-url=https://appleid.apple.com/\r\n...\r\n\r\n# Manual context\r\nquarkus.oidc.manual.tenant-enabled=false\r\n\r\nmp.jwt.verify.issuer=https://example.com/issuer\r\nmp.jwt.token.header=Cookie\r\nmp.jwt.token.cookie=QuarkusUser\r\n```\r\n\r\nSo in order to support this, I have to declare one endpoint that triggers OIDC auth for every provider:\r\n\r\n```java\r\n    @Path(\"/login-{provider}\")\r\n    @Authenticated\r\n    public void loginNow(@RestPath String provider) {\r\n        // never actually called, but better be safe\r\n        redirect(Application.class).index();\r\n    }\r\n```\r\n\r\nWhile my manual auth is handled by this endpoint:\r\n\r\n```java\r\n    @POST\r\n    public Response manualLogin(@NotBlank @RestForm String userName, \r\n            @NotBlank @RestForm String password) {\r\n        if(validationFailed()) {\r\n            login();\r\n        }\r\n        User user = User.findRegisteredByUserName(userName);\r\n        if(user == null\r\n                || !BcryptUtil.matches(password, user.password)) {\r\n            validation.addError(\"userName\", \"Invalid username/pasword\");\r\n            prepareForErrorRedirect();\r\n            login();\r\n        }\r\n        NewCookie cookie = Register.makeUserCookie(user);\r\n        return Response.seeOther(Router.getURI(Application::index)).cookie(cookie).build();\r\n    }\r\n```\r\n\r\nAnd I need a `TenantResolver` to tell OIDC which tenant to use:\r\n\r\n```java\r\n@ApplicationScoped\r\npublic class OidcTenantResolver implements TenantResolver {\r\n    \r\n    @Inject\r\n    OidcConfig oidcConfig;\r\n\r\n    @Override\r\n    public String resolve(RoutingContext context) {\r\n        // Named tenants\r\n        for (Entry<String, OidcTenantConfig> tenantEntry : oidcConfig.namedTenants.entrySet()) {\r\n            if(!tenantEntry.getValue().tenantEnabled)\r\n                continue;\r\n            String tenant = tenantEntry.getKey();\r\n            // First case: login\r\n            // Note that Router.getURI only works in JAX-RS endpoints\r\n            if(context.request().path().equals(\"/login-\"+tenant)) {\r\n                return tenant;\r\n            }\r\n\r\n            // Second case: auth callback from the auth server\r\n            Cookie cookie = context.request().getCookie(\"q_auth_\"+tenant);\r\n            if(cookie != null) {\r\n                return tenant;\r\n            }\r\n\r\n            // Third case: already logged in\r\n            cookie = context.request().getCookie(\"q_session_\"+tenant);\r\n            if(cookie != null) {\r\n                return tenant;\r\n            }\r\n        }\r\n        \r\n        // manual JWT session\r\n        Cookie cookie = context.request().getCookie(\"QuarkusUser\");\r\n        if(cookie != null) {\r\n            return \"manual\";\r\n        }\r\n\r\n        // Not logged in or default tenant\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\nNow, it seems to me that most of these things could be handled by Quarkus itself, because the existance of a `q_session*` or `q_auth*` should always indicate its related tenant, no?\r\nI guess sorta similarly, if I have the cookie defined in `mp.jwt.token.cookie` it also means that I'm doing JWT and not OIDC, so I shouldn't even need that `quarkus.oidc.manual.tenant-enabled=false` hack, no?\n\n### Implementation ideas\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/22197/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22197/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
