{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/31013",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31013/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31013/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31013/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/31013",
  "id": 1576383007,
  "node_id": "I_kwDOCFbutM5d9bIf",
  "number": 31013,
  "title": "RuntimeUpdatesProcessor should offer a way for hot reload consumers to set an exception",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1273039603,
      "node_id": "MDU6TGFiZWwxMjczMDM5NjAz",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/devmode",
      "name": "area/devmode",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/239",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/239",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/239/labels",
    "id": 9130453,
    "node_id": "MI_kwDOCFbutM4Ai1HV",
    "number": 239,
    "title": "3.0.0.Alpha6",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 112,
    "state": "closed",
    "created_at": "2023-03-07T18:05:13Z",
    "updated_at": "2023-05-11T07:01:41Z",
    "due_on": null,
    "closed_at": "2023-03-15T12:48:12Z"
  },
  "comments": 0,
  "created_at": "2023-02-08T15:58:18Z",
  "updated_at": "2023-03-14T09:07:00Z",
  "closed_at": "2023-03-14T09:06:55Z",
  "active_lock_reason": null,
  "body": "### Description\n\nATM, if we want to do hot reload (as opposed to full restarts) we need to use `HotReplacementContext.consumeNoRestartChanges` to register a listener to be notified and handle the hot reload.\r\n\r\nIf an exception occurs as part of this hot reload, there's no way to report it to the user:\r\n\r\n```java\r\n                for (Consumer<Set<String>> consumer : noRestartChangesConsumers) {\r\n                    try {\r\n                        consumer.accept(filesChanged);\r\n                    } catch (Throwable t) {\r\n                        log.error(\"Changed files consumer failed\", t);\r\n                    }\r\n                }\r\n```\r\n\r\nThe exception is ignored. While at build time, we can generate custom exceptions, and make a nice error page to report them via `ErrorPageGenerators.register`, there's no way to do the same on hot reload, making this useless when we're adding new errors.\r\n\r\nThere's a way to generate an error, though, which is by calling `HotReplacementContext.setRemoteProblem(Throwable)`, and that allows me to trigger the nice error page. But calling this method makes the error permanent, in the sense that no further source changes will ever allow me to clear it:\r\n\r\n- I start the application, with no error in my `styles.sass` file, the application starts correctly\r\n- I edit my `styles.sass` file to add an error\r\n- My hot reload listener is called, compiles the file, catches the error and calls `setRemoteProblem`\r\n- I get the nice error page\r\n- I fix the error\r\n- `RuntimeUpdatesProcessor.doScan(boolean,boolean)` will look for changed files, there are no Java changes, so `checkForChangedClasses` will not reset `compileProblem`, and it will stop because it will check if `compileProblem != null` and bail out before invoking any hot reload listener\r\n- My hot reload listener is never invoked anymore, and cannot reset the `compileProblem`, making this error permanent until I make an unrelated Java change to reset it \r\n\r\nBesides this, there's no API to reset that, because I can't call `setRemoteProblem(null)` otherwise it throws an NPE:\r\n\r\n```java\r\n    @Override\r\n    public void setRemoteProblem(Throwable throwable) {\r\n        compileProblem = throwable;\r\n        getCompileOutput().setMessage(throwable.getMessage());\r\n    }\r\n```\r\n\r\nMy only workaround is to dodge the NPE:\r\n\r\n```java\r\n    private void resetRemoteProblem() {\r\n        try {\r\n            context.setRemoteProblem(null);\r\n            // FIXME: this is a workaround for \r\n        } catch (NullPointerException x) {\r\n            // ignore\r\n            x.printStackTrace();\r\n        }\r\n    }\r\n```\r\n\r\nWe should allow resetting this `compileProblem` and clear it at the start of each scan, or at least if there are no Java source changes, or if we want to keep it around, somehow differentiate it from compilation problems?\n\n### Implementation ideas\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/31013/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31013/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
