{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/24724",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24724/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24724/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24724/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/24724",
  "id": 1190962676,
  "node_id": "I_kwDOCFbutM5G_KX0",
  "number": 24724,
  "title": "smallrye-mutiny - Replay last N items",
  "labels": [
    {
      "id": 1283619446,
      "node_id": "MDU6TGFiZWwxMjgzNjE5NDQ2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/smallrye",
      "name": "area/smallrye",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 1617558663,
      "node_id": "MDU6TGFiZWwxNjE3NTU4NjYz",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/epic",
      "name": "kind/epic",
      "color": "28a846",
      "default": false,
      "description": "Large issue with links to sub-issues"
    },
    {
      "id": 2236476067,
      "node_id": "MDU6TGFiZWwyMjM2NDc2MDY3",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/mutiny",
      "name": "area/mutiny",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 1,
  "created_at": "2022-04-03T15:29:50Z",
  "updated_at": "2022-04-03T15:34:48Z",
  "closed_at": "2022-04-03T15:34:48Z",
  "active_lock_reason": null,
  "body": "(From https://github.com/smallrye/smallrye-mutiny/issues/536)\nRx has a concept of `BehaviorSubject` and `ReplayingSubject`, which are quite similar and serve a very useful purpose: pre-seed a subscriber with last known value[s] / initial value[s] at the moment of subscription. I think we could unify them under an API like this:\r\n\r\n```java\r\nMulti.createBy()\r\n    .replayingAtMost(int)  // buffer size -- to imitate `BehaviorSubject`, use 1\r\n    .withInitialValues(T... or Iterable<T> or perhaps even Multi<T>) // initial values to emit when nothing was emitted yet\r\n    .stream(Multi<T>); // the stream we're wrapping\r\n```\r\n\r\nCalling it `replayingAtMost` to highlight that if you set 5 items to replay but only 3 items have been emitted, then only 3 will be replayed to a new subscriber. If you think that's intuitive enough, can shorten to just `replaying`.\r\n\r\nWDYT?\n\n```yaml\nupstream-organization: SmallRye\nupstream-repository: smallrye-mutiny\nupstream-issue: 536\nupstream-status: released\nupstream-milestone: 1.4.0 - https://github.com/smallrye/smallrye-mutiny/milestone/47\n```\n",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/24724/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24724/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
