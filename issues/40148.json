{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40148",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40148/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40148/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40148/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/40148",
  "id": 2252023638,
  "node_id": "I_kwDOCFbutM6GOydW",
  "number": 40148,
  "title": "can't get field offset on a record class using quarkus-junit5",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1375177076,
      "node_id": "MDU6TGFiZWwxMzc1MTc3MDc2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/testing",
      "name": "area/testing",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 19,
  "created_at": "2024-04-19T03:51:31Z",
  "updated_at": "2024-08-02T16:46:29Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nI am new to Quarkus and want to hand on effective java test.\r\nWhen I used the parameterization test on the ItemWait class by quarkus-junit5:3.9.3, relied XStream library reported an error as below. how can I do, can I replace Xstream? Note that I donnot want to replace the record Class with a regular class Class for ItemDetail.\r\n\r\n### Version and Build tool\r\nquarkus 3.9.3\r\nmaven auto controlled by quarkus\r\n### Error Message\r\ncom.thoughtworks.xstream.converters.ConversionException: \r\n---- Debugging information ----\r\ncause-exception     : java.lang.UnsupportedOperationException\r\ncause-message       : can't get field offset on a record class: private final java.lang.String org.todo.domain.item.ItemDetail.name\r\nclass               : org.todo.domain.item.ItemDetail\r\nrequired-type       : org.todo.domain.item.ItemDetail\r\nconverter-type      : com.thoughtworks.xstream.converters.reflection.ReflectionConverter\r\npath                : /org.todo.domain.item.ItemWait/detail/name\r\nline number         : 6\r\nclass[1]            : org.todo.domain.item.ItemWait\r\nrequired-type[1]    : org.todo.domain.item.ItemWait\r\nversion             : 1.4.20\r\n\r\n### Code\r\n```\r\n@QuarkusTest\r\nclass ItemWaitTest {\r\n    @Test\r\n    void shouldOfWork() {\r\n        ItemDetail detail = new ItemDetail(\"todo1\", \"content\", LocalDateTime.now(), LocalDateTime.now().plusDays(1));\r\n        ItemWait wait = ItemWait.of(\"publisher\", \"performer\", detail);\r\n        assertThat(wait.getId()).isNull();\r\n        assertThat(wait.getStatus()).isEqualTo(ItemWaitingStatus.WAIT_FOR_RECEPTION);\r\n    }\r\n\r\n    /*\r\n     * 测试等效主键与主键,等效主键必须与主键保持一对一关系\r\n     * 等效主键是publisher,performer,detail.name的复合,注意这三个值不可以为null\r\n     * 主键是id,id可能为null,这是因为可能还没持久化到数据库中\r\n     */\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(\"equalsTestCases\")\r\n    void shouldEqualsWork(ItemWait wait1, ItemWait wait2, boolean expected) {\r\n        assertThat(wait1.equals(wait2)).isEqualTo(expected);\r\n    }\r\n\r\n    @ParameterizedTest\r\n    @MethodSource(\"equalsTestCasesAssertion\")\r\n    void shouldEqualsAssert(ItemWait wait1, ItemWait wait2,String errorMessage){\r\n        boolean asserted = false;\r\n        try{\r\n            wait1.equals(wait2);\r\n        }catch(AssertionError e){\r\n             asserted = true;\r\n            assertThat(e.getMessage()).isEqualTo(errorMessage);\r\n        }\r\n        assertTrue(asserted);\r\n    }\r\n\r\n    static Stream<Arguments> equalsTestCases() {\r\n\r\n        return Stream.of(\r\n                of(wait(\"a\", \"b\", \"c\", null),\r\n                        wait(\"a\", \"b\", \"c\", null),\r\n                        true),\r\n                of(wait(\"x\", \"b\", \"c\", null),\r\n                        wait(\"a\", \"b\", \"c\", null),\r\n                        false),\r\n                of(wait(\"a\", \"x\", \"c\", null),\r\n                        wait(\"a\", \"b\", \"c\", null),\r\n                        false),\r\n                of(wait(\"a\", \"b\", \"x\", null),\r\n                        wait(\"a\", \"b\", \"c\", null),\r\n                        false),\r\n                of(wait(\"x\", \"y\", \"c\", null),\r\n                        wait(\"a\", \"b\", \"c\", null),\r\n                        false),\r\n                of(wait(\"x\", \"b\", \"y\", null),\r\n                        wait(\"a\", \"b\", \"c\", null),\r\n                        false),\r\n                of(wait(\"a\", \"x\", \"y\", null),\r\n                        wait(\"a\", \"b\", \"c\", null),\r\n                        false),\r\n                of(wait(\"x\", \"y\", \"z\", null),\r\n                        wait(\"a\", \"b\", \"c\", null),\r\n                        false),\r\n\r\n                of(wait(\"a\", \"b\", \"c\", 1L),\r\n                        wait(\"a\", \"b\", \"c\", null),\r\n                        true),\r\n                of(wait(\"x\", \"b\", \"c\", 1L),\r\n                        wait(\"a\", \"b\", \"c\", null),\r\n                        false),\r\n                of(wait(\"a\", \"x\", \"c\", 1L),\r\n                        wait(\"a\", \"b\", \"c\", null),\r\n                        false),\r\n                of(wait(\"a\", \"b\", \"x\", 1L),\r\n                        wait(\"a\", \"b\", \"c\", null),\r\n                        false),\r\n                of(wait(\"x\", \"y\", \"c\", 1L),\r\n                        wait(\"a\", \"b\", \"c\", null),\r\n                        false),\r\n                of(wait(\"x\", \"b\", \"y\", 1L),\r\n                        wait(\"a\", \"b\", \"c\", null),\r\n                        false),\r\n                of(wait(\"a\", \"x\", \"y\", 1L),\r\n                        wait(\"a\", \"b\", \"c\", null),\r\n                        false),\r\n                of(wait(\"x\", \"y\", \"z\", 1L),\r\n                        wait(\"a\", \"b\", \"c\", null),\r\n                        false),\r\n                //等效主键判断与主键判断一致\r\n                of(wait(\"a\", \"b\", \"c\", 1L),\r\n                        wait(\"a\", \"b\", \"c\", 1L),\r\n                        true),\r\n                of(wait(\"x\", \"b\", \"c\", 2L),\r\n                        wait(\"a\", \"b\", \"c\", 1L),\r\n                        false),\r\n                of(wait(\"a\", \"x\", \"c\", 2L),\r\n                        wait(\"a\", \"b\", \"c\", 1L),\r\n                        false),\r\n                of(wait(\"a\", \"b\", \"x\", 2L),\r\n                        wait(\"a\", \"b\", \"c\", 1L),\r\n                        false),\r\n                of(wait(\"x\", \"y\", \"c\", 2L),\r\n                        wait(\"a\", \"b\", \"c\", 1L),\r\n                        false),\r\n                of(wait(\"x\", \"b\", \"y\", 2L),\r\n                        wait(\"a\", \"b\", \"c\", 1L),\r\n                        false),\r\n                of(wait(\"a\", \"x\", \"y\", 2L),\r\n                        wait(\"a\", \"b\", \"c\", 1L),\r\n                        false),\r\n                of(wait(\"x\", \"y\", \"z\", 2L),\r\n                        wait(\"a\", \"b\", \"c\", 1L),\r\n                        false)\r\n                );\r\n                \r\n                \r\n    }\r\n\r\n    static Stream<Arguments> equalsTestCasesAssertion() {\r\n        String error = \"ItemWait的主键与虚拟等效主键不一致\";\r\n        return Stream.of(\r\n\r\n                of(wait(\"a\", \"b\", \"c\", 2L),\r\n                        wait(\"a\", \"b\", \"c\", 1L),\r\n                        error),\r\n                of(wait(\"x\", \"b\", \"c\", 1L),\r\n                        wait(\"a\", \"b\", \"c\", 1L),\r\n                        error),\r\n                of(wait(\"a\", \"x\", \"c\", 1L),\r\n                        wait(\"a\", \"b\", \"c\", 1L),\r\n                        error),\r\n                of(wait(\"a\", \"b\", \"x\", 1L),\r\n                        wait(\"a\", \"b\", \"c\", 1L),\r\n                        error),\r\n                of(wait(\"x\", \"y\", \"c\", 1L),\r\n                        wait(\"a\", \"b\", \"c\", 1L),\r\n                        error),\r\n                of(wait(\"x\", \"b\", \"y\", 1L),\r\n                        wait(\"a\", \"b\", \"c\", 1L),\r\n                        error),\r\n                of(wait(\"a\", \"x\", \"y\", 1L),\r\n                        wait(\"a\", \"b\", \"c\", 1L),\r\n                        error),\r\n                of(wait(\"x\", \"y\", \"z\", 1L),\r\n                        wait(\"a\", \"b\", \"c\", 1L),\r\n                        error)\r\n\r\n        );\r\n    }\r\n\r\n    // Simplify the creation of ItemWait for parameterized testing of the equals method\r\n    static ItemWait wait(String publisher, String performer, String name, Long id) {\r\n        var begin = LocalDateTime.of(2099, 12, 1, 10, 10, 0);\r\n        var end = LocalDateTime.of(2099, 12, 2, 10, 10, 0);\r\n        var content = \"content\";\r\n\r\n        var wait = ItemWait.of(publisher, performer, new ItemDetail(name, content, begin, end));\r\n        try {\r\n            Field idField = ItemWait.class.getDeclaredField(\"id\");\r\n            idField.setAccessible(true);\r\n            idField.set(wait, id);\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return wait;\r\n    }\r\n\r\n    @Test\r\n    void shouldWaitInThisFileWork(){\r\n        ItemWait wait = wait(\"a\",\"b\",\"c\",1L);\r\n        var begin = LocalDateTime.of(2099, 12, 1, 10, 10, 0);\r\n        var end = LocalDateTime.of(2099, 12, 2, 10, 10, 0);\r\n        assertEquals(1L, wait.getId());\r\n        assertEquals(\"a\", wait.getPublisher());\r\n        assertEquals(\"b\", wait.getPerformer());\r\n        assertEquals(\"c\", wait.getDetail().name());\r\n        assertEquals(\"content\", wait.getDetail().content());\r\n        assertEquals(wait.getDetail().begin(), begin);\r\n        assertEquals(wait.getDetail().end(), end);\r\n    }    \r\n}\r\n```\r\n```\r\n@Entity\r\npublic class ItemWait {\r\n\r\n    @Id\r\n    @GeneratedValue\r\n    private Long id;\r\n\r\n    @NotBlank(message = \"事项发布者的名称不可以为空\")\r\n    private String publisher;\r\n\r\n    @NotBlank(message = \"事项执行者的名称不可以为空\")\r\n    private String performer;\r\n\r\n    @Embedded\r\n    @NotNull(message = \"事项详细内容不可以为Null\")\r\n    private ItemDetail detail;\r\n\r\n    private ItemWaitingStatus status;\r\n    public static ItemWait of(@NotBlank String publisher, @NotBlank String performer, @Valid ItemDetail detail) {\r\n        return new ItemWait(null, publisher, performer, detail, ItemWaitingStatus.WAIT_FOR_RECEPTION);\r\n    }\r\n\r\n    private ItemWait(Long id, String publisher, String performer, ItemDetail detail, ItemWaitingStatus status) {\r\n        this.id = id;\r\n        this.publisher = publisher;\r\n        this.performer = performer;\r\n        this.detail = detail;\r\n        this.status = status;\r\n    }\r\n   //omit  other methods\r\n}\r\n```\r\n```\r\n@Embeddable\r\npublic record ItemDetail(@NotBlank(message = \"事项名称不可以为空\") String name,\r\n                @NotBlank(message = \"事项内容不可以为空\") String content,\r\n                @NotNull(message = \"事项起始时间不可以为NULL\") LocalDateTime begin,\r\n                @NotNull(message = \"事项结束时间不可以为Null\") LocalDateTime end) {\r\n\r\n        public ItemDetail {\r\n                LocalDateTime rightBoundary = LocalDateTime.now();\r\n                LocalDateTime leftBoundary = rightBoundary.minusSeconds(20);\r\n                assert begin.isAfter(leftBoundary) : \"无效的事项起始时间\";\r\n                assert begin.isBefore(end) : \"事项起始时间必须在结束时间之前\";\r\n        }\r\n}\r\n```\r\n\r\n\r\n",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40148/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40148/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
