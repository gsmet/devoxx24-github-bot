{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/20329",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20329/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20329/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20329/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/20329",
  "id": 1004291502,
  "node_id": "I_kwDOCFbutM473EWu",
  "number": 20329,
  "title": "Allow Sort to be empty",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 985346624,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjQ=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/good%20first%20issue",
      "name": "good first issue",
      "color": "7057ff",
      "default": true,
      "description": "Good for newcomers"
    },
    {
      "id": 1273026134,
      "node_id": "MDU6TGFiZWwxMjczMDI2MTM0",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/panache",
      "name": "area/panache",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/150",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/150",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/150/labels",
    "id": 7178092,
    "node_id": "MI_kwDOCFbutM4AbYds",
    "number": 150,
    "title": "2.4.0.CR1",
    "description": "",
    "creator": {
      "login": "geoand",
      "id": 4374975,
      "node_id": "MDQ6VXNlcjQzNzQ5NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4374975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/geoand",
      "html_url": "https://github.com/geoand",
      "followers_url": "https://api.github.com/users/geoand/followers",
      "following_url": "https://api.github.com/users/geoand/following{/other_user}",
      "gists_url": "https://api.github.com/users/geoand/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/geoand/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/geoand/subscriptions",
      "organizations_url": "https://api.github.com/users/geoand/orgs",
      "repos_url": "https://api.github.com/users/geoand/repos",
      "events_url": "https://api.github.com/users/geoand/events{/privacy}",
      "received_events_url": "https://api.github.com/users/geoand/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 126,
    "state": "closed",
    "created_at": "2021-09-22T10:44:58Z",
    "updated_at": "2021-12-27T12:49:40Z",
    "due_on": "2021-10-11T07:00:00Z",
    "closed_at": "2021-10-15T08:11:06Z"
  },
  "comments": 3,
  "created_at": "2021-09-22T13:20:08Z",
  "updated_at": "2021-09-30T11:25:29Z",
  "closed_at": "2021-09-30T11:25:27Z",
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nI am writing amazon lambdas using quarkus-amazon-lambda-rest, quarkus-resteasy-jackson and quarkus-hibernate-orm-panache\r\nI have one rest endpoint that will return me a list of the entities. But I need to be able to sort that list based on a query param.\r\n\r\nRight now my query param is a list of string where I receive 'columnName,(ASC or DSC)'\r\n\r\nThe Sort class from io.quarkus.panache.common has it constructor as private.\r\nIt requires the Sort object to always have some column. We should have way to be able to create a Sort object without defining a column. Pretty much to what spring does with Pageable.Sort.\r\n\r\nFor example, this isn't allowed\r\n\r\n```java\r\n Sort sort = new Sort();\r\n\r\n    for (String s : sortQuery) {\r\n      String sortColumn = s.split(\",\")[0];\r\n      String sortOrder = s.split(\",\")[1];\r\n\r\n      sort.and(sortColumn,\r\n          sortOrder.equalsIgnoreCase(\"ASC\") ? Direction.Ascending : Direction.Descending);\r\n    }\r\nreturn personRepository.findByName(name, sort) \r\n```\r\n\r\n### Implementation ideas\r\n\r\nEither allow the constructor on Sort to be public or create an static method .empty().",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/20329/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20329/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
