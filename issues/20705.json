{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/20705",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20705/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20705/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20705/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/20705",
  "id": 1023995488,
  "node_id": "I_kwDOCFbutM49CO5g",
  "number": 20705,
  "title": "Update OIDC CodeAuthenticationMechanism to support the code flow with standard OAuth2 providers",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1479557456,
      "node_id": "MDU6TGFiZWwxNDc5NTU3NDU2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/oidc",
      "name": "area/oidc",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/152",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/152",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/152/labels",
    "id": 7239525,
    "node_id": "MI_kwDOCFbutM4Abndl",
    "number": 152,
    "title": "2.5.0.CR1",
    "description": "",
    "creator": {
      "login": "aloubyansky",
      "id": 323379,
      "node_id": "MDQ6VXNlcjMyMzM3OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/323379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aloubyansky",
      "html_url": "https://github.com/aloubyansky",
      "followers_url": "https://api.github.com/users/aloubyansky/followers",
      "following_url": "https://api.github.com/users/aloubyansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/aloubyansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aloubyansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aloubyansky/subscriptions",
      "organizations_url": "https://api.github.com/users/aloubyansky/orgs",
      "repos_url": "https://api.github.com/users/aloubyansky/repos",
      "events_url": "https://api.github.com/users/aloubyansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aloubyansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 305,
    "state": "closed",
    "created_at": "2021-10-11T08:43:12Z",
    "updated_at": "2022-01-07T16:32:59Z",
    "due_on": null,
    "closed_at": "2021-11-10T17:25:22Z"
  },
  "comments": 1,
  "created_at": "2021-10-12T16:07:01Z",
  "updated_at": "2021-10-14T21:42:30Z",
  "closed_at": "2021-10-14T21:42:27Z",
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nSome well known providers such as GitHub, LinkedIn, etc, are not OpenId Connect but OAuth2 providers which support the authorization code flow, for example, [GitHub OAuth2](https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps) and [LinkedIn OAuth2](https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow?context=linkedin%2Fcontext&tabs=HTTPS).\r\n\r\nThe real difference is that they don't return an IdToken. Providers like GitHub don't have a token introspection endpoint since GitHub itself is the only intended target of such tokens, and the (GitHub profile) user info is what it can return.\r\n\r\nWe have some users asking about GitHub, and Quarkus itself does some interesting GitHub integrations, so supporting it easily with `quarkus-oidc` can be useful\r\n\r\n### Implementation ideas\r\n\r\n`quarkus-oidc` `web-app` flow is totally built around the presence of ID token. If it is not available, then assuming the configuration allows it, a so called `internal` `IdToken` has to be generated, 1) to simply avoid branching everywhere in the code and 2) by signing this nearly empty token (which will have `iat`, `jti`, `exp` only) and keeping in a session cookie, OIDC can verify, when also picking up the saved access token from the cookie, that it was OIDC itself which placed that IdT there.\r\n\r\nThe other possible advantage of using the `internal IdToken` is that we may be align it with what is returned in the `UserInfo`. \r\n\r\nThe notion of the session is not really important in these cases, as for ex GitHub will not challenge again if the access token is still valid which can last for several days. So with a short session built around the internal `ldToken` it will only be about saving on a few redirects for the same user. ",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/20705/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20705/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
