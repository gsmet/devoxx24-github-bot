{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/26794",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/26794/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/26794/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/26794/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/26794",
  "id": 1308280003,
  "node_id": "I_kwDOCFbutM5N-sTD",
  "number": 26794,
  "title": "Inconsistent configuration substitution when using Dev Services with a named DataSource",
  "labels": [
    {
      "id": 985346625,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjU=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/triage/invalid",
      "name": "triage/invalid",
      "color": "e4e669",
      "default": false,
      "description": "This doesn't seem right"
    },
    {
      "id": 1273030910,
      "node_id": "MDU6TGFiZWwxMjczMDMwOTEw",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/config",
      "name": "area/config",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 2955097667,
      "node_id": "MDU6TGFiZWwyOTU1MDk3NjY3",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/devservices",
      "name": "area/devservices",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 5,
  "created_at": "2022-07-18T17:24:44Z",
  "updated_at": "2022-07-26T13:28:34Z",
  "closed_at": "2022-07-26T13:28:34Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nWhen writing an application, it is common to want a real/configurable database URL for development and production, but a Dev Services URL for tests. However, depending on whether you're using a top-level `datasource` or a named `datasource`, Quarkus may not inject the dev services URL.\r\n\r\n### Expected behavior\r\n\r\nI would expect both of the following configurations to be equivalent and use `${MY_DB_URL}` in dev/prod, and the generated Dev Services URL in `test`.\r\n\r\n1. top-level datasource\r\n    ```yml\r\n    # src/main/resources/application.yml\r\n    quarkus:\r\n      datasource:\r\n        db-kind: postgresql\r\n        reactive:\r\n          url: \"${MY_DB_URL}\r\n    \r\n    # src/test/resources/application.yml\r\n    \"%test\":\r\n      quarkus:\r\n        datasource:\r\n          db-kind: postgresql\r\n          devservices:\r\n            enabled: true\r\n    ```\r\n2. named datasource (this is reproducible with both `name:` and `\"name\":`)\r\n    ```yml\r\n    # src/main/resources/application.yml\r\n    quarkus:\r\n      datasource:\r\n        reactive: false\r\n        \"app\":\r\n          db-kind: postgresql\r\n          reactive:\r\n            url: \"${MY_DB_URL}\r\n    \r\n    # src/test/resources/application.yml\r\n    \"%test\":\r\n      quarkus:\r\n        datasource:\r\n          \"app\":\r\n            db-kind: postgresql\r\n            devservices:\r\n              enabled: true\r\n    ```\r\n\r\nHere's a basic test case, albeit it isn't necessary:\r\n\r\n```kotlin\r\npackage org.acme\r\n\r\nimport io.quarkus.test.junit.QuarkusTest\r\nimport io.vertx.mutiny.pgclient.PgPool\r\nimport org.junit.jupiter.api.Test\r\nimport javax.inject.Inject\r\n\r\n@QuarkusTest\r\nclass DatasourceTest {\r\n    @Inject\r\n//    @ReactiveDataSource(\"app\")\r\n    lateinit var pool: PgPool\r\n\r\n  @Test\r\n  fun `should connect`() {\r\n      val row = pool.query(\"SELECT current_user, inet_server_addr(), inet_server_port()\")\r\n          .execute()\r\n          .await()\r\n          .indefinitely()\r\n          .first()\r\n  \r\n      println(\"Connection is: user=${row.getString(\"current_user\")}, host=${(row.getValue(\"inet_server_addr\") as Inet).address}, port=${row.getInteger(\"inet_server_port\")}\")\r\n  }\r\n}\r\n```\r\n\r\n### Actual behavior\r\n\r\n**Using a top-level datasource**\r\n\r\nThe client fails to connect. (In this case, `MY_DB_URL` is defined as a `postgresql://localhost:5432`.)\r\n\r\n```\r\njava.util.concurrent.CompletionException: io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: localhost/127.0.0.1:5432\r\n\r\n\tat io.smallrye.mutiny.operators.uni.UniBlockingAwait.await(UniBlockingAwait.java:79)\r\n\tat io.smallrye.mutiny.groups.UniAwait.atMost(UniAwait.java:65)\r\n\tat io.smallrye.mutiny.groups.UniAwait.indefinitely(UniAwait.java:46)\r\n\tat org.acme.DatasourceTest.should connect(DatasourceTest.kt:19)\r\n```\r\n\r\n**Using a named datasource**\r\n\r\nThe client works as expected, connecting to the instance generated by Dev Services.\r\n\r\n```\r\nConnection is: user=quarkus, host=/172.17.0.3, port=5432\r\n```\r\n\r\n### How to Reproduce?\r\n\r\n_No response_\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\n_No response_\r\n\r\n### Output of `java -version`\r\n\r\n11\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n2.10.2.Final\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/26794/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/26794/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
