{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/38318",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/38318/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/38318/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/38318/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/38318",
  "id": 2092680108,
  "node_id": "I_kwDOCFbutM58u8Os",
  "number": 38318,
  "title": "Inability to create multiple Kafka Streams topologies in one application using @Produces method(s)",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1449536431,
      "node_id": "MDU6TGFiZWwxNDQ5NTM2NDMx",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/kafka-streams",
      "name": "area/kafka-streams",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 3,
  "created_at": "2024-01-21T17:21:27Z",
  "updated_at": "2024-06-12T09:19:47Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\n## The problem\r\n\r\nQuarkus' guide [Using Apache Kafka Streams](https://quarkus.io/guides/kafka-streams) describes a method of creating Kafka Streams topology using method annotated with `@jakarta.enterprise.inject.Produces`.\r\n\r\nHowever, this method does not seem to be working for more than one topology within the same application, as having more than one such method results in the application failing to start with the following exception seen in the logs:\r\n\r\n```\r\njava.lang.RuntimeException: Failed to start quarkus\r\n        ...\r\nCaused by: jakarta.enterprise.inject.AmbiguousResolutionException: Beans: [PRODUCER_METHOD bean [class=org.acme.qkt.TopologyProducerA, id=6BFQ4NfZqRuS74kLy3x4LX22jgo], PRODUCER_METHOD bean [class=org.acme.qkt.TopologyProducerB, id=na5ipbtejGCLdDVBsclVMcRoeQM]]\r\n        ...\r\n```\r\n\r\n## Analysis\r\nLooking at the the stack trace (see full stack trace below), it appears that `KafkaStreamsProducer` simply doesn't support more than one topology, and throws said exception when it detects more than one `org.apache.kafka.streams.Topology` beans available - see `topology.get` in [KafkaStreamsProducer:106](https://github.com/quarkusio/quarkus/blob/ebee0a4b66d1b4dba9c51165e78d22fbf3b90d3e/extensions/kafka-streams/runtime/src/main/java/io/quarkus/kafka/streams/runtime/KafkaStreamsProducer.java#L106).\r\n\r\nFollowing this logic, this is likely an enhancement request rather than a bug, but I'm raising it as a bug so that someone more familiar with the matter can kindly confirm whether this is a real issue or just my ignorance/wrong expectations regarding the proper configuration.\r\n\r\nIf it's the latter, please accept my apologies and a request to kindly clarify the recommended method of creating multiple topologies (be it in the docs or in a response to this [StackOverflow question](https://stackoverflow.com/questions/77238570/multiple-topologies-in-one-quarkus-based-kafka-streams-application/77495911#77495911)).\r\n\r\nHaving said that, seeing that Quarkus [supports injection of multiple beans of the same type](https://github.com/quarkusio/quarkus/issues/38318) it seems not unreasonable to expect that it should be possible to have multiple `@Produces Topology` methods available in one application.\r\n\r\n## Attempted fix\r\nTo address the exception, custom `@jakarta.inject.Qualifier`-annotated annotations were applied to the methods producing topologies, following remarks from [Quarkus' intro to CDI](https://quarkus.io/guides/cdi#you-talked-about-some-qualifiers).\r\n\r\nUnfortunately, the effect was that whilst the exception was no longer thrown, the topology producer methods were no longer invoked, leaving Kafka Streams not initialised.\r\n\r\nThis is understandable as `KafkaStreamsProducer`'s constructor only appears to expect a `@Default` bean, and once annotated with custom qualifiers, none of the topology beans match this requirement.\r\n\r\n## Workaround\r\nThe only workaround that worked for me was to fall back to the ['legacy' method described in Quarkus' blog](https://quarkus.io/blog/kafka-streams-applications-with-quarkus-and-microprofile/), i.e. 'manually' managing instances of `StreamsBuilder` driven by application lifecycle events.\r\n\r\n### Expected behavior\r\n\r\nTo have multiple, working Kafka Streams topologies (multiple instances of class `org.apache.kafka.streams.Topology` class) produced through `@Produces` annotated methods.\r\n\r\n### Actual behavior\r\n\r\nHaving more than one `@Produces Topology` methods results in the application failing to start with the following stack trace seen in the logs:\r\n```\r\n2024-01-21 16:13:37,136 ERROR [io.qua.run.Application] (Quarkus Main Thread) Failed to start application (with profile [dev]): java.lang.RuntimeException: Failed to start quarkus\r\n        at io.quarkus.runner.ApplicationImpl.doStart(Unknown Source)\r\n        at io.quarkus.runtime.Application.start(Application.java:101)\r\n        at io.quarkus.runtime.ApplicationLifecycleManager.run(ApplicationLifecycleManager.java:111)\r\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:71)\r\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:44)\r\n        at io.quarkus.runtime.Quarkus.run(Quarkus.java:124)\r\n        at io.quarkus.runner.GeneratedMain.main(Unknown Source)\r\n        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)\r\n        at java.base/java.lang.reflect.Method.invoke(Method.java:578)\r\n        at io.quarkus.runner.bootstrap.StartupActionImpl$1.run(StartupActionImpl.java:113)\r\n        at java.base/java.lang.Thread.run(Thread.java:1623)\r\nCaused by: jakarta.enterprise.inject.AmbiguousResolutionException: Beans: [PRODUCER_METHOD bean [class=org.acme.qkt.TopologyProducerA, id=6BFQ4NfZqRuS74kLy3x4LX22jgo], PRODUCER_METHOD bean [class=org.acme.qkt.TopologyProducerB, id=na5ipbtejGCLdDVBsclVMcRoeQM]]\r\n        at io.quarkus.arc.impl.InstanceImpl.bean(InstanceImpl.java:291)\r\n        at io.quarkus.arc.impl.InstanceImpl.getInternal(InstanceImpl.java:309)\r\n        at io.quarkus.arc.impl.InstanceImpl.get(InstanceImpl.java:190)\r\n        at io.quarkus.kafka.streams.runtime.KafkaStreamsProducer.<init>(KafkaStreamsProducer.java:106)\r\n        at io.quarkus.kafka.streams.runtime.KafkaStreamsProducer_Bean.doCreate(Unknown Source)\r\n        at io.quarkus.kafka.streams.runtime.KafkaStreamsProducer_Bean.create(Unknown Source)\r\n        at io.quarkus.kafka.streams.runtime.KafkaStreamsProducer_Bean.create(Unknown Source)\r\n        at io.quarkus.arc.impl.AbstractSharedContext.createInstanceHandle(AbstractSharedContext.java:119)\r\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:38)\r\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:35)\r\n        at io.quarkus.arc.impl.LazyValue.get(LazyValue.java:32)\r\n        at io.quarkus.arc.impl.ComputingCache.computeIfAbsent(ComputingCache.java:69)\r\n        at io.quarkus.arc.impl.ComputingCacheContextInstances.computeIfAbsent(ComputingCacheContextInstances.java:19)\r\n        at io.quarkus.arc.impl.AbstractSharedContext.get(AbstractSharedContext.java:35)\r\n        at io.quarkus.kafka.streams.runtime.KafkaStreamsProducer_Bean.get(Unknown Source)\r\n        at io.quarkus.kafka.streams.runtime.KafkaStreamsProducer_Bean.get(Unknown Source)\r\n        at io.quarkus.kafka.streams.runtime.KafkaStreamsProducer_ProducerMethod_getKafkaStreams_d5DLwLZ87HgycVRDmdD6cQd9k9w_Bean.doCreate(Unknown Source)\r\n        at io.quarkus.kafka.streams.runtime.KafkaStreamsProducer_ProducerMethod_getKafkaStreams_d5DLwLZ87HgycVRDmdD6cQd9k9w_Bean.create(Unknown Source)\r\n        at io.quarkus.kafka.streams.runtime.KafkaStreamsProducer_ProducerMethod_getKafkaStreams_d5DLwLZ87HgycVRDmdD6cQd9k9w_Bean.create(Unknown Source)\r\n        at io.quarkus.arc.impl.AbstractSharedContext.createInstanceHandle(AbstractSharedContext.java:119)\r\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:38)\r\n        at io.quarkus.arc.impl.AbstractSharedContext$1.get(AbstractSharedContext.java:35)\r\n        at io.quarkus.arc.impl.LazyValue.get(LazyValue.java:32)\r\n        at io.quarkus.arc.impl.ComputingCache.computeIfAbsent(ComputingCache.java:69)\r\n        at io.quarkus.arc.impl.ComputingCacheContextInstances.computeIfAbsent(ComputingCacheContextInstances.java:19)\r\n        at io.quarkus.arc.impl.AbstractSharedContext.get(AbstractSharedContext.java:35)\r\n        at io.quarkus.kafka.streams.runtime.KafkaStreamsProducer_ProducerMethod_getKafkaStreams_d5DLwLZ87HgycVRDmdD6cQd9k9w_Bean.get(Unknown Source)\r\n        at io.quarkus.kafka.streams.runtime.KafkaStreamsProducer_ProducerMethod_getKafkaStreams_d5DLwLZ87HgycVRDmdD6cQd9k9w_Bean.get(Unknown Source)\r\n        at io.quarkus.arc.impl.ArcContainerImpl.beanInstanceHandle(ArcContainerImpl.java:553)\r\n        at io.quarkus.arc.impl.ArcContainerImpl.beanInstanceHandle(ArcContainerImpl.java:533)\r\n        at io.quarkus.arc.impl.ArcContainerImpl.beanInstanceHandle(ArcContainerImpl.java:566)\r\n        at io.quarkus.arc.impl.ArcContainerImpl.instance(ArcContainerImpl.java:338)\r\n        at io.quarkus.kafka.streams.runtime.KafkaStreamsProducer_Observer_Synthetic_GBi-MxGEb8kh__7Q4XC-t4hECVU.notify(Unknown Source)\r\n        at io.quarkus.arc.impl.EventImpl$Notifier.notifyObservers(EventImpl.java:346)\r\n        at io.quarkus.arc.impl.EventImpl$Notifier.notify(EventImpl.java:328)\r\n        at io.quarkus.arc.impl.EventImpl.fire(EventImpl.java:82)\r\n        at io.quarkus.arc.runtime.ArcRecorder.fireLifecycleEvent(ArcRecorder.java:157)\r\n        at io.quarkus.arc.runtime.ArcRecorder.handleLifecycleEvents(ArcRecorder.java:108)\r\n        at io.quarkus.deployment.steps.LifecycleEventsBuildStep$startupEvent1144526294.deploy_0(Unknown Source)\r\n        at io.quarkus.deployment.steps.LifecycleEventsBuildStep$startupEvent1144526294.deploy(Unknown Source)\r\n        ... 11 more\r\n\r\n```\r\n\r\n### How to Reproduce?\r\n\r\n* Checkout the demo project https://github.com/ziemsky/quarkus-kstreams-topologies.\r\n* Run the application with `./gradlew quarkusDev -i`.\r\n* Observe that the application fails to start, with `AmbiguousResolutionException` referencing producer classes `TopologyProducerA` and `TopologyProducerB`.\r\n* Uncomment `// @TopologyA` and `// @TopologyB` lines in the `TopologyProducer*` classes and run the application.\r\n* Observe that the application starts without exception, but topologies are not created and Kafka Streams not initialised.\r\n\r\nIn other words:\r\n\r\nHave a basic Quarkus project with:\r\n* `io.quarkus:quarkus-kafka-streams` extension included,\r\n* Two `@Produces Topology` methods in a class (or classes) annotated with `ApplicationScoped`.\r\n* Start the application and see that it fails to start with `AmbiguousResolutionException`.\r\n* Now add custom `@Qualifier`s to the topology beans and see that the application starts but topologies/steams are not activated.\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nLinux my-host-name 6.7.0-arch3-1 #1 SMP PREEMPT_DYNAMIC Sat, 13 Jan 2024 14:37:14 +0000 x86_64 GNU/Linux\r\n\r\n### Output of `java -version`\r\n\r\nopenjdk version \"20.0.2\" 2023-07-18 OpenJDK Runtime Environment (build 20.0.2+9-78) OpenJDK 64-Bit Server VM (build 20.0.2+9-78, mixed mode, sharing)\r\n\r\n### Quarkus version or git rev\r\n\r\n3.6.6\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nGradle 8.3 - Build time:   2023-08-17 07:06:47 UTC Revision:     8afbf24b469158b714b36e84c6f4d4976c86fcd5  Kotlin:       1.9.0 Groovy:       3.0.17 Ant:          Apache Ant(TM) version 1.10.13 compiled on January 4 2023 JVM:          20.0.2 (Oracle Corporation 20.0.2+9-78) OS:           Linux 6.7.0-arch3-1 amd64\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/38318/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/38318/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
