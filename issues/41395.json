{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/41395",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41395/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41395/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41395/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/41395",
  "id": 2370639391,
  "node_id": "I_kwDOCFbutM6NTRYf",
  "number": 41395,
  "title": "Reading manifest from jar in jar-based `PathTreeWithManifest` is suboptimal",
  "labels": [
    {
      "id": 1273027849,
      "node_id": "MDU6TGFiZWwxMjczMDI3ODQ5",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/core",
      "name": "area/core",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 8,
  "created_at": "2024-06-24T16:21:35Z",
  "updated_at": "2024-06-25T15:23:16Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "I will probably have a look at this soon but I wanted to log my findings. /cc @aloubyansky \r\n\r\n(This is part of my overall work on class loader leaking even if it has nothing to do with it)\r\n\r\nin `ArchivePathTree`, we have this method:\r\n\r\n```java\r\n    @Override\r\n    protected <T> T apply(String relativePath, Function<PathVisit, T> func, boolean manifestEnabled) {\r\n        ensureResourcePath(relativePath);\r\n        if (!PathFilter.isVisible(pathFilter, relativePath)) {\r\n            return func.apply(null);\r\n        }\r\n        if (manifestEnabled) {\r\n            relativePath = toMultiReleaseRelativePath(relativePath);\r\n        }\r\n        try (FileSystem fs = openFs()) {\r\n            for (Path root : fs.getRootDirectories()) {\r\n                final Path path = root.resolve(relativePath);\r\n                if (!Files.exists(path)) {\r\n                    continue;\r\n                }\r\n                return PathTreeVisit.process(archive, root, path, pathFilter, func);\r\n            }\r\n        } catch (IOException e) {\r\n            throw new UncheckedIOException(\"Failed to read \" + archive, e);\r\n        }\r\n        return func.apply(null);\r\n    }\r\n```\r\n\r\n`toMultiReleaseRelativePath(relativePath);` will actually read the `Manifest` (I have a patch to avoid doing that for `META-INF` entries but in the end we will read the Manifest at some point).\r\n\r\nReading the manifest is done by using an `InputStream` that will in the end use `java.util.zip.Inflater` to read the jar. From my reports, it actually takes quite a lot of memory to do that (the `quarkus-ide-launcher` jar probably doesn't help).\r\n\r\nGiven we actually open a zip fs at the line below, we could actually use this zip fs to read the manifest and my guess is that it would be a bit more optimal.\r\n\r\nNot sure yet how to rework the code to be able to do that without messing things up too much in the hierarchy.\r\n\r\n@aloubyansky thoughts?\r\n\r\nSee the stack here:\r\n\r\n![Screenshot from 2024-06-24 18-16-28](https://github.com/quarkusio/quarkus/assets/1279749/31a4c545-d512-44d1-98f8-a0dd4adddba0)\r\n",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/41395/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41395/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
