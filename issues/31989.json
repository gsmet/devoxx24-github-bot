{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/31989",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31989/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31989/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31989/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/31989",
  "id": 1632901263,
  "node_id": "I_kwDOCFbutM5hVBiP",
  "number": 31989,
  "title": "spring-di autowiring fallback by bean name",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1552233747,
      "node_id": "MDU6TGFiZWwxNTUyMjMzNzQ3",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/spring",
      "name": "area/spring",
      "color": "0366d6",
      "default": false,
      "description": "Issues relating to the Spring integration"
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/240",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/240",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/240/labels",
    "id": 9161556,
    "node_id": "MI_kwDOCFbutM4Ai8tU",
    "number": 240,
    "title": "3.0.0.Beta1",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 94,
    "state": "closed",
    "created_at": "2023-03-15T07:49:49Z",
    "updated_at": "2023-05-15T13:59:51Z",
    "due_on": null,
    "closed_at": "2023-03-22T14:24:37Z"
  },
  "comments": 3,
  "created_at": "2023-03-20T21:36:26Z",
  "updated_at": "2023-03-22T04:59:09Z",
  "closed_at": "2023-03-22T04:59:05Z",
  "active_lock_reason": null,
  "body": "### Description\n\nSpring-di can resolve ambiguous beans by matching the bean name against the field/method parameter name.\r\nhttps://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-autowired-annotation-qualifiers\r\n> Letting qualifier values select against target bean names, within the type-matching candidates, does not require a `@Qualifier` annotation at the injection point. If there is no other resolution indicator (such as a qualifier or a primary marker), for a non-unique dependency situation, Spring matches the injection point name (that is, the field name or parameter name) against the target bean names and chooses the same-named candidate, if any.\r\n\r\nFor instance:\r\n\r\n```java\r\n@Configuration\r\npublic static class Configuration {\r\n\r\n      @Bean\r\n      public Foo foo1() {\r\n          return new Foo(\"foo1\");\r\n      }\r\n\r\n      @Bean\r\n      public Foo foo2() {\r\n          return new Foo(\"foo2\");\r\n      }\r\n\r\n      // Ambiguity is resolved by fall-backing to a match by name\r\n      @Bean\r\n      public Baz baz(Foo foo2) {\r\n          return new Baz(foo2);\r\n      }\r\n}\r\n```\r\n\r\nHere's a reproducer: https://github.com/rquinio/quarkus/blob/275405cc23f8f21a891554f1f1809210781afcd5/extensions/spring-di/deployment/src/test/java/io/quarkus/spring/di/deployment/BeanNameAsQualifierTest.java\n\n### Implementation ideas\n\nI don't think this is equivalent to generating `@Named` for every bean name and field/parameter name, as it would prevent a simple injection by type (relying on `@Default`).\r\nSo not sure it is possible to implement in Arc / quarkus-spring-di, and maybe this has to be listed as a limitation in the guide ?",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/31989/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31989/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
