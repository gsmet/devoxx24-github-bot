{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/20732",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20732/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20732/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20732/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/20732",
  "id": 1025040554,
  "node_id": "I_kwDOCFbutM49GOCq",
  "number": 20732,
  "title": "The incoming event in an AWS Lambda Function is always null when the first invocation runs (cold start), but is populated in subsequent invocations (warm start)",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 985346621,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjE=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/triage/duplicate",
      "name": "triage/duplicate",
      "color": "cfd3d7",
      "default": false,
      "description": "This issue or pull request already exists"
    },
    {
      "id": 1326073020,
      "node_id": "MDU6TGFiZWwxMzI2MDczMDIw",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/amazon-lambda",
      "name": "area/amazon-lambda",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/155",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/155",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/155/labels",
    "id": 7262270,
    "node_id": "MI_kwDOCFbutM4AbtA-",
    "number": 155,
    "title": "2.3.1.Final",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 82,
    "state": "closed",
    "created_at": "2021-10-18T08:24:48Z",
    "updated_at": "2021-12-07T21:29:09Z",
    "due_on": null,
    "closed_at": "2021-10-20T13:14:36Z"
  },
  "comments": 2,
  "created_at": "2021-10-13T09:59:45Z",
  "updated_at": "2021-10-18T09:36:36Z",
  "closed_at": "2021-10-13T13:23:11Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nThe issue is present when running the function in a native build only when a new lambda container instance is started (e.g. A new output to the CloudWatch logs), but goes away when more events come in and the same lambda container instance is re-used for subsequent invocations.  The issue is **NOT** present when deploying using the Java11 runtime.\r\n\r\nThe issue has been noticed when subscribing a Lambda function to an SNS topic and when subscribing to an SQSQueue, which in turn is subscribed to an SNS topic.\r\n\r\nI haven't crossed checked, but I believe this issue hasn't been experienced in previous deployments of Quarkus (1.11.3.Final and 2.1.3.Final) since a similar setup was used when deploying in native mode.\r\n\r\n### Expected behavior\r\n\r\nThe incoming event to be populated on all invocations without having to have a warmed up lambda instance.\r\n\r\n### Actual behavior\r\n\r\nCloud watch logs:\r\n\r\nIn native, when cold starting a lambda request\r\n\r\n```\r\nINFO  [io.quarkus] bot-notification 1.0.0-SNAPSHOT native (powered by Quarkus 2.3.0.Final) started in 0.252s.\r\nINFO  [io.quarkus] Profile prod activated.\r\nINFO  [io.quarkus] Installed features: [amazon-lambda, amazon-sqs, cdi, resteasy-jsonb, smallrye-context-propagation, vertx]\r\nINFO  [BotNotificationHandler] Processing request: null\r\n\r\n```\r\nIn native, when warm starting a lambda request.  Also cold/warm start when using the Java11 runtime.\r\n\r\n```\r\nINFO  [io.quarkus] bot-notification 1.0.0-SNAPSHOT on JVM (powered by Quarkus 2.3.0.Final) started in 2.870s.\r\nINFO  [io.quarkus] Profile prod activated.\r\nINFO  [io.quarkus] Installed features: [amazon-lambda, amazon-sqs, cdi, resteasy-jsonb, smallrye-context-propagation, vertx]\r\nINFO  [BotNotificationHandler] Processing request: {\"records\":[{\"attribut......\r\n\r\n```\r\n\r\n### How to Reproduce?\r\nThe source code is in a private repository so I can't provide a link for it, but I've included relevant snippets in the additional info section.  Any more details are required let me know and I'll be glad to get them for you.\r\n\r\nSteps to reproduce:\r\n\r\n1. Build AWS Lambda function in native mode and deploy\r\n2. Subscribe a lambda function to an SNS topic or SQS queue\r\n3. Submit a topic/message\r\n4. Watch the CloudWatch logs, the incoming request event is null.\r\n5. Wait a couple of minutes for the Lambda container to shut-off to force a cold start in the next invocation\r\n6. Submit a topic/message\r\n7. Watch the CloudWatch logs, the incoming request event is null.\r\n8. Submit a topic/message shortly after looking at the logs, the previous lambda container should still be accepting new requests\r\n9. Watch the CloudWatch logs, the incoming request event is populated\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nx86_64 GNU/Linux (AWS Lambda)\r\n\r\n### Output of `java -version`\r\n\r\njava 11.0.11 2021-04-20 LTS\r\n\r\n### GraalVM version (if different from Java)\r\n\r\nGraalVM EE 21.1.0 (build 11.0.11+9-LTS-jvmci-21.1-b05)\r\n\r\n### Quarkus version or git rev\r\n\r\n2.3.0.Final\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nApache Maven 3.8.1\r\n\r\n### Additional information\r\n\r\n\r\n**Sample Function**\r\n\r\n```\r\nimport com.amazonaws.services.lambda.runtime.Context;\r\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\r\nimport com.amazonaws.services.lambda.runtime.events.SQSEvent;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport javax.inject.Inject;\r\nimport javax.inject.Named;\r\nimport javax.json.bind.Jsonb;\r\nimport java.util.Map;\r\n\r\n@Named(\"bot-notification\")\r\npublic class BotNotificationHandler implements RequestHandler<SQSEvent, String> {\r\n\r\n    final static Logger log = LoggerFactory.getLogger(BotNotificationHandler.class.getSimpleName());\r\n\r\n    @Inject\r\n    Jsonb jsonb;\r\n\r\n    @Override\r\n    public String handleRequest(SQSEvent event, Context context) {\r\n        log.info(\"Processing request: {}\", jsonb.toJson(event));\r\n        return jsonb.toJson(Map.of(\"statusCode\", 200, \"body\", \"Complete\"));\r\n    }\r\n}\r\n```\r\n\r\n\r\n**Maven Snippet**\r\n\r\n```\r\n        <dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-amazon-sqs</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-amazon-lambda</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-amazon-lambda-xray</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-arc</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.jboss.resteasy</groupId>\r\n            <artifactId>resteasy-multipart-provider</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.jboss.logging</groupId>\r\n            <artifactId>commons-logging-jboss-logging</artifactId>\r\n            <version>1.0.0.Final</version>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>software.amazon.awssdk</groupId>\r\n            <artifactId>url-connection-client</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-jsonb</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-vertx</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-resteasy-jsonb</artifactId>\r\n        </dependency>\r\n\r\n```\r\n**AWS Cloud Formation Snippet**\r\n\r\n```\r\n  BotNotificationFunction:\r\n    Type: AWS::Serverless::Function\r\n    Properties:\r\n      CodeUri: ../functions/bot-notification/target/function.zip\r\n      MemorySize: 1024\r\n      Timeout: 25\r\n      #Tracing: Active\r\n      Environment:\r\n        Variables:\r\n          DISABLE_SIGNAL_HANDLERS: true\r\n      Events:\r\n        BotNotificationTopicEvent:\r\n          Type: SNS\r\n          Properties:\r\n            Topic: !Ref BotNotificationTopic\r\n            SqsSubscription:\r\n              QueueArn: !GetAtt BotNotificationQueue.Arn\r\n              QueueUrl: !Ref BotNotificationQueue\r\n              BatchSize: 10\r\n      Policies:\r\n        - AWSXrayWriteOnlyAccess\r\n        - Statement:\r\n            - Effect: 'Allow'\r\n              Resource: 'arn:aws:logs:*:*:*'\r\n              Action:\r\n                - 'logs:*'\r\n\r\n```\r\n",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/20732/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20732/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
