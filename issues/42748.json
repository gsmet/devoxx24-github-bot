{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/42748",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/42748/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/42748/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/42748/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/42748",
  "id": 2485392262,
  "node_id": "I_kwDOCFbutM6UJBOG",
  "number": 42748,
  "title": "Jakarta JSON-P `Json.***` methods are crazily inefficient",
  "labels": [
    {
      "id": 1283619446,
      "node_id": "MDU6TGFiZWwxMjgzNjE5NDQ2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/smallrye",
      "name": "area/smallrye",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 23,
  "created_at": "2024-08-25T17:42:09Z",
  "updated_at": "2024-08-30T15:12:56Z",
  "closed_at": "2024-08-30T15:12:56Z",
  "active_lock_reason": null,
  "body": "The low-level static method hosted in the Jakarta JSON-P `Json` object are very inefficient: they are resolving a `JsonProvider.provider()` for each call which in turn calls the `ServiceLoader` (among other things...) and allocate a new `JsonProvider`.\r\n\r\nSee:\r\n- https://github.com/jakartaee/jsonp-api/blob/master/api/src/main/java/jakarta/json/Json.java#L433-L435\r\n- https://github.com/jakartaee/jsonp-api/blob/master/api/src/main/java/jakarta/json/spi/JsonProvider.java#L109-L145\r\n\r\nMeaning that when you are calling `Json.createValue(\"string\")` to allocate a simple String value, you are actually making a call to the service loader and instantiating a new `JsonProvider`.\r\n\r\nI stumbled upon that independently this week-end and after experimenting with it and writing a quick patch, I was like \"it's crazy nobody complained about it\" so I went to the JSON-P website and stumbled upon:\r\n\r\n- https://github.com/jakartaee/jsonp-api/pull/347 (which is the same patch I wrote)\r\n- and then: https://github.com/jakartaee/jsonp-api/issues/346\r\n- and finally: https://github.com/jakartaee/jsonp-api/issues/154\r\n\r\nMeaning that I don't expect it to be fixed any time soon.\r\n\r\nTo give an idea of how things go, I did a simple JMH benchmark.\r\n\r\n`Json.createValue(\"test\")` i.e. what people (including us) use:\r\n\r\n```\r\nIteration   1: 153.907 ops/ms\r\nIteration   2: 155.308 ops/ms\r\nIteration   3: 154.542 ops/ms\r\nIteration   4: 155.963 ops/ms\r\nIteration   5: 156.462 ops/ms\r\n```\r\n\r\nUsing a static provider with `JSON_PROVIDER.createValue(\"test\")`:\r\n\r\n```\r\nIteration   1: 1112305.967 ops/ms\r\nIteration   2: 1114183.052 ops/ms\r\nIteration   3: 1113783.793 ops/ms\r\nIteration   4: 1111395.048 ops/ms\r\nIteration   5: 1112449.325 ops/ms\r\n```\r\n\r\nThat's **7200+** times faster.\r\nThe `createValue()` methods are the ones for which it's the most inefficient as they should be extremely lightweight as called quite often.\r\n\r\nWhile we are mostly using Jackson in Quarkus itself and recommending Jackson, we have several components using JSON-P and JSON-B in the SmallRye world, for instance SmallRye GraphQL and SmallRye Health.\r\nAnd we have people using JSON-P/JSON-B out there because they want to stay in the MicroProfile or Jakarta world.\r\n\r\nI know SmallRye GraphQL is affected by the inefficiencies as I have seen some direct calls to the `Json` methods in some runtime code (for instance here: https://github.com/smallrye/smallrye-graphql/blob/main/client/implementation/src/main/java/io/smallrye/graphql/client/impl/RequestImpl.java#L75).\r\nFrom what I can see SmallRye Health is not affected as it creates a unique `JsonProvider`.\r\n\r\nNote that I haven't done any benchmarks in SmallRye GraphQL, I have just verified that we were instantiating too many ``JsonProvider``s.\r\n\r\nAs for the SmallRye components, I think we should discuss this subject in the context of Quarkus as the solution we want to put in place for Quarkus might be different from the ones we want to use in the general case (for instance in WildFly).\r\n\r\n- we might want to have an SPI to push Jackson there. I discussed it a few times with @jmartisk already but it wasn't considered top priority\r\n- even if we do, we probably need to fix the JSON-P/JSON-B case - while fixing our JSON-P calls could be easy (at least in the Quarkus case, I'm not sure if in the case of WildFly, we would want a single provider), I don't know if JSON-B uses the `Json` shortcut under the hood, in which case it might make things a bit harder to handle.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/42748/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/42748/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
