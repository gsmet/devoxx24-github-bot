{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/29763",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29763/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29763/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29763/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/29763",
  "id": 1485002401,
  "node_id": "I_kwDOCFbutM5Yg1ah",
  "number": 29763,
  "title": "CSRF not working on POST actions that require no form parameters",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1282139374,
      "node_id": "MDU6TGFiZWwxMjgyMTM5Mzc0",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/security",
      "name": "area/security",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/225",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/225",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/225/labels",
    "id": 8816584,
    "node_id": "MI_kwDOCFbutM4AhofI",
    "number": 225,
    "title": "2.15.2.Final",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 23,
    "state": "closed",
    "created_at": "2023-01-03T14:21:16Z",
    "updated_at": "2023-05-15T13:58:07Z",
    "due_on": null,
    "closed_at": "2023-01-04T14:12:19Z"
  },
  "comments": 12,
  "created_at": "2022-12-08T16:38:19Z",
  "updated_at": "2023-01-03T14:21:44Z",
  "closed_at": "2022-12-20T15:38:19Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\n\nI'm pretty sure this is related to the problem I had in https://github.com/quarkusio/quarkus/issues/22444 where the body was not read if the endpoint didn't have a single `@RestForm` parameter.\r\n\r\nIf your endpoint doesn't have any `@RestForm` or `@FormParam` parameter, RESTEasy Reactive doesn't add the body filter that reads the form parameters (urlencoded or multipart) and so the CSRF filter can't work:\r\n\r\n```java\r\n@Path(\"Application\")\r\npublic class Application {\r\n\r\n    @Inject\r\n    CsrfTokenParameterProvider csrfToken;\r\n\r\n@Path(\"csrfToken\")\r\n    public String csrfToken() {\r\n        return csrfToken.getToken();\r\n    }\r\n\r\n@Path(\"csrfForm1\")\r\n    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\r\n    @POST\r\n    public String csrfForm1(@RestForm String name) {\r\n        return \"OK: \" + name;\r\n    }\r\n\r\n@Path(\"csrfForm2\")\r\n    @Consumes(MediaType.MULTIPART_FORM_DATA)\r\n    @POST\r\n    public String csrfForm2(@RestForm String name) {\r\n        return \"OK: \" + name;\r\n    }\r\n\r\n@Path(\"csrfForm3\")\r\n    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\r\n    @POST\r\n    public String csrfForm3() {\r\n        return \"OK\";\r\n    }\r\n\r\n@Path(\"csrfForm4\")\r\n    @Consumes(MediaType.MULTIPART_FORM_DATA)\r\n    @POST\r\n    public String csrfForm4() {\r\n        return \"OK\";\r\n    }\r\n}\r\n```\r\n\r\n```java\r\n@QuarkusTest\r\npublic class RenardeResourceTest {\r\n\r\n    @Test\r\n    public void testCsrf() {\r\n        RenardeCookieFilter cookieFilter = new RenardeCookieFilter();\r\n        String token = given()\r\n                .filter(cookieFilter)\r\n                .when().get(\"/Application/csrfToken\")\r\n                .then()\r\n                .statusCode(200)\r\n                .extract().asString();\r\n        Assertions.assertTrue(token.length() > 0, \"Empty token in form: \" + htmlForm);\r\n        // no token, no dice\r\n        given()\r\n                .filter(cookieFilter)\r\n                .when()\r\n                .param(\"name\", \"Stef\")\r\n                .post(\"/Application/csrfForm1\")\r\n                .then()\r\n                .statusCode(400);\r\n        // token: good\r\n        given()\r\n                .filter(cookieFilter)\r\n                .when()\r\n                .param(\"csrf-token\", token)\r\n                .param(\"name\", \"Stef\")\r\n                .post(\"/Application/csrfForm1\")\r\n                .then()\r\n                .statusCode(200)\r\n                .body(is(\"OK: Stef\"));\r\n        // no token, no dice\r\n        given()\r\n                .filter(cookieFilter)\r\n                .when()\r\n                .multiPart(\"name\", \"Stef\")\r\n                .post(\"/Application/csrfForm2\")\r\n                .then()\r\n                .statusCode(400);\r\n        // token: good\r\n        given()\r\n                .filter(cookieFilter)\r\n                .when()\r\n                .multiPart(\"csrf-token\", token)\r\n                .multiPart(\"name\", \"Stef\")\r\n                .post(\"/Application/csrfForm2\")\r\n                .then()\r\n                .statusCode(200)\r\n                .body(is(\"OK: Stef\"));\r\n        given()\r\n        .filter(cookieFilter)\r\n        .when()\r\n        .param(\"csrf-token\", token)\r\n        .post(\"/Application/csrfForm3\")\r\n        .then()\r\n        .statusCode(200)\r\n        .body(is(\"OK: Stef\"));\r\n        given()\r\n        .filter(cookieFilter)\r\n        .when()\r\n        .multiPart(\"csrf-token\", token)\r\n        .post(\"/Application/csrfForm4\")\r\n        .then()\r\n        .statusCode(200)\r\n        .body(is(\"OK: Stef\"));\r\n    }\r\n}\r\n```\r\n\r\nThis currently prevents using the CSRF filter in any application that doesn't need form parameters, except for the CSRF token one. So it should be fixed in 2.15 (because I don't think the CSRF handler fix was backported to 2.14 so it doesn't work there anyway, unless i'm mistaken).\r\n\r\nCC @sberyozkin \n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/29763/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29763/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
