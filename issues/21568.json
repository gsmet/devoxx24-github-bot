{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/21568",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/21568/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/21568/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/21568/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/21568",
  "id": 1058514671,
  "node_id": "I_kwDOCFbutM4_F6bv",
  "number": 21568,
  "title": "Noargs constructor is executed on non-bean-object proxies when returned from scoped producer method",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1282102389,
      "node_id": "MDU6TGFiZWwxMjgyMTAyMzg5",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/arc",
      "name": "area/arc",
      "color": "0366d6",
      "default": false,
      "description": "Issue related to ARC (dependency injection)"
    },
    {
      "id": 1676631606,
      "node_id": "MDU6TGFiZWwxNjc2NjMxNjA2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/env/windows",
      "name": "env/windows",
      "color": "edea47",
      "default": false,
      "description": "Impacts Windows machines"
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 11,
  "created_at": "2021-11-19T13:12:28Z",
  "updated_at": "2021-11-24T08:21:40Z",
  "closed_at": "2021-11-23T08:13:07Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nConsider a class:\r\n\r\n```java\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\nimport javax.enterprise.inject.Vetoed;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\n@Vetoed\r\nclass A {\r\n    private static final Logger LOG = LoggerFactory.getLogger(A.class);\r\n    public static AtomicInteger count = new AtomicInteger(0);\r\n\r\n    A() {\r\n        LOG.info(\"{} constructed\", this.getClass().getSimpleName());\r\n        count.incrementAndGet();\r\n    }\r\n\r\n    public int getCount() {\r\n        return A.count.get();\r\n    }\r\n}\r\n```\r\n\r\nSome bean with a scoped producer:\r\n```java\r\nimport javax.enterprise.context.ApplicationScoped;\r\nimport javax.enterprise.inject.Produces;\r\n\r\n@ApplicationScoped\r\nclass Producer {\r\n    @Produces\r\n    @ApplicationScoped\r\n    A produce() {\r\n        return new A();\r\n    }\r\n}\r\n```\r\n\r\nAnd a unit test:\r\n```java\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\nimport javax.inject.Inject;\r\nimport org.junit.jupiter.api.Test;\r\nimport io.quarkus.test.junit.QuarkusTest;\r\n\r\n@QuarkusTest\r\nclass ATest {\r\n    @Inject\r\n    A a;\r\n\r\n    @Test\r\n    void test() {\r\n        assertEquals(1, a.getCount());\r\n    }\r\n}\r\n```\r\n\r\nThe constructor will be invoked twice - once on creation of the client proxy for the application scope and once when creating the actual object.\r\n\r\n### Expected behavior\r\n\r\nNon-bean noargs constructor is not called or only pseudo scopes (`@Dependent`) are allowed for producers returning non-bean objects.\r\n\r\n### Actual behavior\r\n\r\nThe test fails with:\r\n> org.opentest4j.AssertionFailedError: expected: <1> but was: <2>\r\n\r\nAnd it logs:\r\n\r\n> 2021-11-19 11:59:46,732 INFO  [org.acm.cdi.pro.A] (main) Producer_ProducerMethod_produce_e48d74bd24e672937bf49c60afc6db55ea4584ea_ClientProxy constructed\r\n> 2021-11-19 11:59:46,755 INFO  [org.acm.cdi.pro.A] (main) A constructed\r\n\r\nBecause the non-bean noargs constructor is called when the client proxy is constructed.\r\n\r\n### How to Reproduce?\r\n\r\nRun the unit test from the description above.\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nMSYS_NT-10.0-WOW STECH015 2.10.0(0.325/5/3) 2018-04-05 00:47 i686 Msys\r\n\r\n### Output of `java -version`\r\n\r\nJava version: 11.0.2, vendor: Oracle Corporation, runtime: C:\\Java\\jdk-11.0.2\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n2.4.2.Final or 1.13.7.Final\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nApache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f) Maven home: $USERPROFILE\\.m2\\wrapper\\dists\\apache-maven-3.6.3-bin\\1iopthnavndlasol9gbrbg6bf2\\apache-maven-3.6.3 Java version: 11.0.2, vendor: Oracle Corporation, runtime: C:\\Java\\jdk-11.0.2 Default locale: de_DE, platform encoding: Cp1252 OS name: \"windows 10\", version: \"10.0\", arch: \"amd64\", family: \"windows\"\r\n\r\n### Additional information\r\n\r\nAs per the [CDI2 spec](https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#producer_method)\r\n\r\n> A producer method acts as a source of objects to be injected, where:\r\n> * the objects to be injected are not required to be instances of beans [...]\r\n\r\nproducer methods are meant (among other use-cases) to bring non-beans into the CDI context, so it cannot be expected that those classes follow or even care about the rules of CDI (like having a noargs constructor without side-effects to allow proxy creation)\r\n\r\nCurrently, Quarkus will add a no-args constructor even to non-CDI classes in order to be able to generate a client proxy. So in addition to inserting and calling a noargs constructor into the bytecode when it does not exist, Quarkus could add and call a similar constructor _with_ argument(s) when a no-args constructor already exists.\r\n\r\nIf that is not possible, another option would be to fail at packaging when a (non-empty) non-bean constructor is invoked for creation of a client proxy.\r\n\r\nNow a good consideration would be -- what does Weld do, as the reference implementation of CDI2? This test succeeds with Weld:\r\n\r\n```java\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\nimport static org.junit.jupiter.api.Assertions.assertNotEquals;\r\n\r\nimport org.jboss.weld.junit5.auto.AddBeanClasses;\r\nimport org.jboss.weld.junit5.auto.EnableAutoWeld;\r\nimport org.junit.jupiter.api.Test;\r\n\r\n@EnableAutoWeld\r\n@AddBeanClasses({ Producer.class })\r\nclass AWeldTest {\r\n    @Test\r\n    void test(A a) {\r\n        assertNotEquals(a.getClass(), A.class); // Make sure we get a client proxy\r\n        assertEquals(1, a.getCount());\r\n    }\r\n}\r\n```",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/21568/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/21568/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
