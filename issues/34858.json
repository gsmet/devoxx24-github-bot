{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/34858",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34858/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34858/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34858/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/34858",
  "id": 1812049823,
  "node_id": "I_kwDOCFbutM5sAa-f",
  "number": 34858,
  "title": "Treat incorrect Accept header as a user error",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 2552031458,
      "node_id": "MDU6TGFiZWwyNTUyMDMxNDU4",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/rest",
      "name": "area/rest",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/262",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/262",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/262/labels",
    "id": 9678871,
    "node_id": "MI_kwDOCFbutM4Ak7AX",
    "number": 262,
    "title": "3.2.2.Final",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 18,
    "state": "closed",
    "created_at": "2023-07-20T15:29:02Z",
    "updated_at": "2023-07-26T17:13:26Z",
    "due_on": null,
    "closed_at": "2023-07-24T07:14:53Z"
  },
  "comments": 3,
  "created_at": "2023-07-19T14:14:01Z",
  "updated_at": "2023-07-20T15:35:50Z",
  "closed_at": "2023-07-20T11:10:13Z",
  "active_lock_reason": null,
  "body": "### Description\n\nHey,\r\n\r\nwhile doing some security tests, we found out that if we sent a fake `Accept` header to a Quarkus-based service, it would respond with an internal server error, i.e.:\r\n\r\n```\r\nhttp localhost:8080/hello Accept:blah\r\n```\r\n\r\n```\r\nHTTP/1.1 500 Internal Server Error\r\ncontent-length: 3252\r\ncontent-type: application/json; charset=utf-8\r\n\r\n{\r\n    \"details\": \"Error id 2425a57c-4865-4301-bca4-e99ed554f884-1, java.lang.IllegalArgumentException: Failed to parse media type blah\",\r\n    \"stack\": \"java.lang.IllegalArgumentException: Failed to parse media type blah\r\n\tat org.jboss.resteasy.reactive.common.headers.MediaTypeHeaderDelegate.internalParse(MediaTypeHeaderDelegate.java:77)\r\n\tat org.jboss.resteasy.reactive.common.headers.MediaTypeHeaderDelegate.parse(MediaTypeHeaderDelegate.java:53)\r\n\tat org.jboss.resteasy.reactive.common.headers.MediaTypeHeaderDelegate.fromString(MediaTypeHeaderDelegate.java:125)\r\n\tat org.jboss.resteasy.reactive.common.headers.MediaTypeHeaderDelegate.fromString(MediaTypeHeaderDelegate.java:15)\r\n\tat jakarta.ws.rs.core.MediaType.valueOf(MediaType.java:172)\r\n\tat org.jboss.resteasy.reactive.server.handlers.ClassRoutingHandler.acceptHeaderMatches(ClassRoutingHandler.java:160)\r\n\tat org.jboss.resteasy.reactive.server.handlers.ClassRoutingHandler.handle(ClassRoutingHandler.java:130)\r\n\tat io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:123)\r\n\tat org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:145)\r\n\tat org.jboss.resteasy.reactive.server.handlers.RestInitialHandler.beginProcessing(RestInitialHandler.java:48)\r\n\tat org.jboss.resteasy.reactive.server.vertx.ResteasyReactiveVertxHandler.handle(ResteasyReactiveVertxHandler.java:23)\r\n\tat org.jboss.resteasy.reactive.server.vertx.ResteasyReactiveVertxHandler.handle(ResteasyReactiveVertxHandler.java:10)\r\n\tat io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)\r\n\tat io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:177)\r\n\tat io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:141)\r\n\tat io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:102)\r\n\tat io.quarkus.vertx.http.runtime.StaticResourcesRecorder$2.handle(StaticResourcesRecorder.java:88)\r\n\tat io.vertx.ext.web.impl.RouteState.handleContext(RouteState.java:1284)\r\n\tat io.vertx.ext.web.impl.RoutingContextImplBase.iterateNext(RoutingContextImplBase.java:140)\r\n\tat io.vertx.ext.web.impl.RoutingContextImpl.next(RoutingContextImpl.java:141)\r\n\tat io.vertx.ext.web.handler.impl.StaticHandlerImpl.lambda$sendStatic$1(StaticHandlerImpl.java:290)\r\n\tat io.vertx.core.impl.future.FutureImpl$3.onSuccess(FutureImpl.java:141)\r\n\tat io.vertx.core.impl.future.FutureBase.lambda$emitSuccess$0(FutureBase.java:54)\r\n\tat io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)\r\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)\r\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\r\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.base/java.lang.Thread.run(Thread.java:833)\"\r\n}\r\n```\r\n\r\nThis behavior was observed on:\r\n\r\n- Quarkus 3.2.0\r\n- Quarkus 2.16.6\r\n\r\nSo, we ended up adding a dedicated exception mapper, which will map this exception to a 400 (`BAD_REQUEST`) status code. After having some seconds thoughts, we are considering returning a more specific status code, i.e. `406 Not Acceptable`, but the point is that we didn't want to treat it as an internal server error, as it's purely related to a user action.\r\n\r\nI was wondering what's your opinion in this case. Do you think it's OK to add such exception mapping to quarkus itself, so in such case it will be mapped to an HTTP status code from 4xx family?\r\n\r\nAlternatively, if the `Accept` header value cannot be parsed it could be ignored, and the content type negotiation could default to a type which is offered by server.\r\n\r\nIf you are OK with changing this behavior, I'll be happy to address it, so we don't need to add exception mappers for this specific case in our services :)\n\n### Implementation ideas\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/34858/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34858/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
