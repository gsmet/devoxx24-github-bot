{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40243",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40243/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40243/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40243/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/40243",
  "id": 2261101512,
  "node_id": "I_kwDOCFbutM6GxavI",
  "number": 40243,
  "title": "unexpected stacktraces about missing Http1xServerResponse and RecordParserImpl vertx classes in native build",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1283619446,
      "node_id": "MDU6TGFiZWwxMjgzNjE5NDQ2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/smallrye",
      "name": "area/smallrye",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 1320737519,
      "node_id": "MDU6TGFiZWwxMzIwNzM3NTE5",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/vertx",
      "name": "area/vertx",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 2236031412,
      "node_id": "MDU6TGFiZWwyMjM2MDMxNDEy",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/tracing",
      "name": "area/tracing",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 2497075451,
      "node_id": "MDU6TGFiZWwyNDk3MDc1NDUx",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/native-image",
      "name": "area/native-image",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/328",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/328",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/328/labels",
    "id": 11051630,
    "node_id": "MI_kwDOCFbutM4AqKJu",
    "number": 328,
    "title": "3.8.5",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 112,
    "state": "closed",
    "created_at": "2024-05-14T13:22:35Z",
    "updated_at": "2024-06-05T11:10:12Z",
    "due_on": null,
    "closed_at": "2024-06-05T11:10:12Z"
  },
  "comments": 6,
  "created_at": "2024-04-24T11:47:02Z",
  "updated_at": "2024-05-16T14:14:48Z",
  "closed_at": "2024-04-24T17:55:05Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\n\nWhen creating an initial project via code.quarkus.io using quarkus-qpid-jms, compiling the project under a native build then produces two stacktraces during the native build, about missing vert.x classes `io.vertx.core.http.impl.Http1xServerResponse` and `io.vertx.core.parsetools.impl.RecordParserImpl`, in apparent attempts to handle runtime-reinitialisation of them.\r\n\r\nQuarkus-qpid-jms does not itself use vertx (thus why it isnt present), so it isnt clear what specifically is prompting the apparent attempts to handle runtime-reinitialisation of these classes. Things quarkus-qpid-jms does do which look to visibly alter the build command include: enabling https protocol support (for TLS), enabling security services (for some SASL mechs), and depending on quarkus-netty to handle things for native builds. Presumably something around these differences is causing it?\r\n\r\nThis happens with 3.8.x and 3.9.x, yet did not happen historically (not yet known when it started exactly) and it does not occur on 3.2.x. In this period, quarkus-qpid-jms itself essentially has not changed at all except the version of quarkus used and built against (and the recent graal-sdk -> nativeimage sdk dep switch).\r\n\r\nAs might be expected, the stacktraces disappear when vertx is present, so e.g the quarkus-qpid-jms tests and quickstart never showed these stacktraces as they all use quarkus-rest[easy-reactive] and thus do bring in the vertx classes.\r\n\r\nThe native build command + output:\r\n```\r\n[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Running Quarkus native-image plugin on MANDREL 23.1.2.0 JDK 21.0.2+13-LTS\r\n[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildRunner] podman run --env LANG=C --rm --user 1000:1000 --userns=keep-id -v /home/rgemmell/workspace/testing/quarkus-3.8/3.8.4-upstream/code-with-quarkus-upstream/target/code-with-quarkus-1.0.0-SNAPSHOT-native-image-source-jar:/project:z --name build-native-SBEaq quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-21 -J-Dsun.nio.ch.maxUpdateArraySize=100 -J-Djava.util.logging.manager=org.jboss.logmanager.LogManager -J-Dlogging.initial-configurator.min-level=500 -J-Dio.netty.leakDetection.level=DISABLED -J-Dio.netty.allocator.maxOrder=3 -J-Duser.language=en -J-Duser.country=GB -J-Dfile.encoding=UTF-8 --features=io.quarkus.runner.Feature,io.quarkus.runtime.graal.DisableLoggingFeature -J--add-exports=java.security.jgss/sun.security.krb5=ALL-UNNAMED -J--add-opens=java.base/java.text=ALL-UNNAMED -J--add-opens=java.base/java.io=ALL-UNNAMED -J--add-opens=java.base/java.lang.invoke=ALL-UNNAMED -J--add-opens=java.base/java.util=ALL-UNNAMED -H:+UnlockExperimentalVMOptions -H:BuildOutputJSONFile=code-with-quarkus-1.0.0-SNAPSHOT-runner-build-output-stats.json -H:-UnlockExperimentalVMOptions --strict-image-heap -H:+UnlockExperimentalVMOptions -H:+AllowFoldMethods -H:-UnlockExperimentalVMOptions -J-Djava.awt.headless=true --no-fallback --link-at-build-time -H:+UnlockExperimentalVMOptions -H:+ReportExceptionStackTraces -H:-UnlockExperimentalVMOptions -H:-AddAllCharsets --enable-url-protocols=http,https --enable-monitoring=heapdump -H:+UnlockExperimentalVMOptions -H:-UseServiceLoaderFeature -H:-UnlockExperimentalVMOptions -J--add-exports=org.graalvm.nativeimage/org.graalvm.nativeimage.impl=ALL-UNNAMED --exclude-config io\\.netty\\.netty-codec /META-INF/native-image/io\\.netty/netty-codec/generated/handlers/reflect-config\\.json --exclude-config io\\.netty\\.netty-handler /META-INF/native-image/io\\.netty/netty-handler/generated/handlers/reflect-config\\.json code-with-quarkus-1.0.0-SNAPSHOT-runner -jar code-with-quarkus-1.0.0-SNAPSHOT-runner.jar\r\n========================================================================================================================\r\nGraalVM Native Image: Generating 'code-with-quarkus-1.0.0-SNAPSHOT-runner' (executable)...\r\n========================================================================================================================\r\nFor detailed information and explanations on the build output, visit:\r\nhttps://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/BuildOutput.md\r\n------------------------------------------------------------------------------------------------------------------------\r\n[1/8] Initializing...                                                                                    (2.2s @ 0.10GB)\r\n Java version: 21.0.2+13-LTS, vendor version: Mandrel-23.1.2.0-Final\r\n Graal compiler: optimization level: 2, target machine: x86-64-v3\r\n C compiler: gcc (redhat, x86_64, 8.5.0)\r\n Garbage collector: Serial GC (max heap size: 80% of RAM)\r\n 3 user-specific feature(s):\r\n - com.oracle.svm.thirdparty.gson.GsonFeature\r\n - io.quarkus.runner.Feature: Auto-generated class by Quarkus from the existing extensions\r\n - io.quarkus.runtime.graal.DisableLoggingFeature: Disables INFO logging during the analysis phase\r\n------------------------------------------------------------------------------------------------------------------------\r\n 3 experimental option(s) unlocked:\r\n - '-H:+AllowFoldMethods' (origin(s): command line)\r\n - '-H:BuildOutputJSONFile' (origin(s): command line)\r\n - '-H:-UseServiceLoaderFeature' (origin(s): command line)\r\n------------------------------------------------------------------------------------------------------------------------\r\nBuild resources:\r\n - 14.76GB of memory (75.6% of 19.53GB system memory, determined at start)\r\n - 8 thread(s) (100.0% of 8 available processor(s), determined at start)\r\njava.lang.ClassNotFoundException: io.vertx.core.http.impl.Http1xServerResponse\r\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\r\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\r\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageClassLoader.loadClass(NativeImageClassLoader.java:652)\r\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)\r\n\tat java.base/java.lang.Class.forName0(Native Method)\r\n\tat java.base/java.lang.Class.forName(Class.java:534)\r\n\tat java.base/java.lang.Class.forName(Class.java:513)\r\n\tat io.quarkus.runner.Feature.runtimeReinitializedClasses(Unknown Source)\r\n\tat io.quarkus.runner.Feature.beforeAnalysis(Unknown Source)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.lambda$runPointsToAnalysis$9(NativeImageGenerator.java:773)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.FeatureHandler.forEachFeature(FeatureHandler.java:90)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.runPointsToAnalysis(NativeImageGenerator.java:773)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:592)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.run(NativeImageGenerator.java:550)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.buildImage(NativeImageGeneratorRunner.java:539)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.build(NativeImageGeneratorRunner.java:721)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.start(NativeImageGeneratorRunner.java:143)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.main(NativeImageGeneratorRunner.java:98)\r\njava.lang.ClassNotFoundException: io.vertx.core.parsetools.impl.RecordParserImpl\r\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641)\r\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188)\r\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageClassLoader.loadClass(NativeImageClassLoader.java:652)\r\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:526)\r\n\tat java.base/java.lang.Class.forName0(Native Method)\r\n\tat java.base/java.lang.Class.forName(Class.java:534)\r\n\tat java.base/java.lang.Class.forName(Class.java:513)\r\n\tat io.quarkus.runner.Feature.runtimeReinitializedClasses(Unknown Source)\r\n\tat io.quarkus.runner.Feature.beforeAnalysis(Unknown Source)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.lambda$runPointsToAnalysis$9(NativeImageGenerator.java:773)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.FeatureHandler.forEachFeature(FeatureHandler.java:90)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.runPointsToAnalysis(NativeImageGenerator.java:773)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:592)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.run(NativeImageGenerator.java:550)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.buildImage(NativeImageGeneratorRunner.java:539)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.build(NativeImageGeneratorRunner.java:721)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.start(NativeImageGeneratorRunner.java:143)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.main(NativeImageGeneratorRunner.java:98)\r\n[2/8] Performing analysis...  [*****]                                                                    (9.1s @ 1.00GB)\r\n    8,971 reachable types   (85.5% of   10,487 total)\r\n   12,016 reachable fields  (53.7% of   22,373 total)\r\n   45,708 reachable methods (57.0% of   80,138 total)\r\n    2,984 types,   106 fields, and 3,092 methods registered for reflection\r\n       60 types,    60 fields, and    55 methods registered for JNI access\r\n        4 native libraries: dl, pthread, rt, z\r\n[3/8] Building universe...                                                                               (1.6s @ 1.13GB)\r\n[4/8] Parsing methods...      [*]                                                                        (0.7s @ 1.22GB)\r\n[5/8] Inlining methods...     [***]                                                                      (0.6s @ 1.30GB)\r\n[6/8] Compiling methods...    [***]                                                                      (7.7s @ 0.75GB)\r\n[7/8] Layouting methods...    [*]                                                                        (1.9s @ 1.28GB)\r\n[8/8] Creating image...       [**]                                                                       (2.4s @ 1.67GB)\r\n  18.91MB (47.18%) for code area:    29,354 compilation units\r\n  20.79MB (51.85%) for image heap:  240,915 objects and 74 resources\r\n 398.41kB ( 0.97%) for other data\r\n  40.09MB in total\r\n------------------------------------------------------------------------------------------------------------------------\r\nTop 10 origins of code area:                                Top 10 object types in image heap:\r\n  11.81MB java.base                                            5.87MB byte[] for code metadata\r\n   1.32MB svm.jar (Native Image)                               3.19MB byte[] for java.lang.String\r\n 728.89kB org.apache.qpid.proton-j-0.34.1.jar                  2.21MB java.lang.String\r\n 562.44kB org.apache.qpid.qpid-jms-client-2.5.0.jar            2.12MB java.lang.Class\r\n 434.53kB io.netty.netty-buffer-4.1.108.Final.jar            997.21kB byte[] for general heap data\r\n 405.56kB code-with-quarkus-1.0.0-SNAPSHOT-runner.jar        770.95kB com.oracle.svm.core.hub.DynamicHubCompanion\r\n 378.71kB io.netty.netty-common-4.1.108.Final.jar            534.73kB byte[] for reflection metadata\r\n 359.62kB io.smallrye.config.smallrye-config-core-3.5.4.jar  433.84kB java.lang.String[]\r\n 323.90kB jdk.crypto.ec                                      343.80kB java.lang.Object[]\r\n 309.67kB o.j.logmanager.jboss-logmanager-3.0.4.Final.jar    324.69kB c.o.svm.core.hub.DynamicHub$ReflectionMetadata\r\n   2.15MB for 45 more packages                                 4.07MB for 2276 more object types\r\n------------------------------------------------------------------------------------------------------------------------\r\nRecommendations:\r\n HEAP: Set max heap for improved and more predictable memory usage.\r\n CPU:  Enable more CPU features with '-march=native' for improved performance.\r\n------------------------------------------------------------------------------------------------------------------------\r\n                        2.1s (7.9% of total time) in 119 GCs | Peak RSS: 2.84GB | CPU load: 5.39\r\n------------------------------------------------------------------------------------------------------------------------\r\nProduced artifacts:\r\n /project/code-with-quarkus-1.0.0-SNAPSHOT-runner (executable)\r\n /project/code-with-quarkus-1.0.0-SNAPSHOT-runner-build-output-stats.json (build_info)\r\n========================================================================================================================\r\nFinished generating 'code-with-quarkus-1.0.0-SNAPSHOT-runner' in 26.6s.\r\n[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildRunner] podman run --env LANG=C --rm --user 1000:1000 --userns=keep-id -v /home/rgemmell/workspace/testing/quarkus-3.8/3.8.4-upstream/code-with-quarkus-upstream/target/code-with-quarkus-1.0.0-SNAPSHOT-native-image-source-jar:/project:z --entrypoint /bin/bash quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-21 -c objcopy --strip-debug code-with-quarkus-1.0.0-SNAPSHOT-runner\r\n[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 31402ms\r\n```\r\n\r\nCommenting out the quarkus-qpid-jms extension, leaving just quarkus-arc (and quarkus-junit 5 as a test dep), the native build command alters slightly as discussed previously and it does not produce the same stacktraces during native build, suggesting perhaps one of the differences in the build command or the quarkus-netty dep is causing a side effect in quarkus components that provoke the stacktraces? :\r\n```\r\n[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Running Quarkus native-image plugin on MANDREL 23.1.2.0 JDK 21.0.2+13-LTS\r\n[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildRunner] podman run --env LANG=C --rm --user 1000:1000 --userns=keep-id -v /home/rgemmell/workspace/testing/quarkus-3.8/3.8.4-upstream/code-with-quarkus-upstream/target/code-with-quarkus-1.0.0-SNAPSHOT-native-image-source-jar:/project:z --name build-native-ZPvIz quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-21 -J-Djava.util.logging.manager=org.jboss.logmanager.LogManager -J-Dlogging.initial-configurator.min-level=500 -J-Duser.language=en -J-Duser.country=GB -J-Dfile.encoding=UTF-8 --features=io.quarkus.runner.Feature,io.quarkus.runtime.graal.DisableLoggingFeature -J--add-exports=java.security.jgss/sun.security.krb5=ALL-UNNAMED -J--add-opens=java.base/java.text=ALL-UNNAMED -J--add-opens=java.base/java.io=ALL-UNNAMED -J--add-opens=java.base/java.lang.invoke=ALL-UNNAMED -J--add-opens=java.base/java.util=ALL-UNNAMED -H:+UnlockExperimentalVMOptions -H:BuildOutputJSONFile=code-with-quarkus-1.0.0-SNAPSHOT-runner-build-output-stats.json -H:-UnlockExperimentalVMOptions --strict-image-heap -H:+UnlockExperimentalVMOptions -H:+AllowFoldMethods -H:-UnlockExperimentalVMOptions -J-Djava.awt.headless=true --no-fallback --link-at-build-time -H:+UnlockExperimentalVMOptions -H:+ReportExceptionStackTraces -H:-UnlockExperimentalVMOptions -H:-AddAllCharsets --enable-url-protocols=http --enable-monitoring=heapdump -H:+UnlockExperimentalVMOptions -H:-UseServiceLoaderFeature -H:-UnlockExperimentalVMOptions -J--add-exports=org.graalvm.nativeimage/org.graalvm.nativeimage.impl=ALL-UNNAMED code-with-quarkus-1.0.0-SNAPSHOT-runner -jar code-with-quarkus-1.0.0-SNAPSHOT-runner.jar\r\n========================================================================================================================\r\nGraalVM Native Image: Generating 'code-with-quarkus-1.0.0-SNAPSHOT-runner' (executable)...\r\n========================================================================================================================\r\nFor detailed information and explanations on the build output, visit:\r\nhttps://github.com/oracle/graal/blob/master/docs/reference-manual/native-image/BuildOutput.md\r\n------------------------------------------------------------------------------------------------------------------------\r\n[1/8] Initializing...                                                                                    (1.9s @ 0.13GB)\r\n Java version: 21.0.2+13-LTS, vendor version: Mandrel-23.1.2.0-Final\r\n Graal compiler: optimization level: 2, target machine: x86-64-v3\r\n C compiler: gcc (redhat, x86_64, 8.5.0)\r\n Garbage collector: Serial GC (max heap size: 80% of RAM)\r\n 3 user-specific feature(s):\r\n - com.oracle.svm.thirdparty.gson.GsonFeature\r\n - io.quarkus.runner.Feature: Auto-generated class by Quarkus from the existing extensions\r\n - io.quarkus.runtime.graal.DisableLoggingFeature: Disables INFO logging during the analysis phase\r\n------------------------------------------------------------------------------------------------------------------------\r\n 3 experimental option(s) unlocked:\r\n - '-H:+AllowFoldMethods' (origin(s): command line)\r\n - '-H:BuildOutputJSONFile' (origin(s): command line)\r\n - '-H:-UseServiceLoaderFeature' (origin(s): command line)\r\n------------------------------------------------------------------------------------------------------------------------\r\nBuild resources:\r\n - 14.76GB of memory (75.6% of 19.53GB system memory, determined at start)\r\n - 8 thread(s) (100.0% of 8 available processor(s), determined at start)\r\n[2/8] Performing analysis...  [*****]                                                                    (7.4s @ 0.81GB)\r\n    7,189 reachable types   (84.8% of    8,482 total)\r\n    9,190 reachable fields  (54.8% of   16,765 total)\r\n   34,018 reachable methods (56.4% of   60,342 total)\r\n    2,301 types,    93 fields, and 2,185 methods registered for reflection\r\n       60 types,    60 fields, and    55 methods registered for JNI access\r\n        4 native libraries: dl, pthread, rt, z\r\n[3/8] Building universe...                                                                               (1.2s @ 0.94GB)\r\n[4/8] Parsing methods...      [*]                                                                        (0.9s @ 1.01GB)\r\n[5/8] Inlining methods...     [****]                                                                     (0.6s @ 1.11GB)\r\n[6/8] Compiling methods...    [***]                                                                      (6.8s @ 1.07GB)\r\n[7/8] Layouting methods...    [*]                                                                        (1.7s @ 0.81GB)\r\n[8/8] Creating image...       [*]                                                                        (2.0s @ 1.13GB)\r\n  15.21MB (46.50%) for code area:    21,391 compilation units\r\n  17.12MB (52.36%) for image heap:  207,796 objects and 55 resources\r\n 383.45kB ( 1.15%) for other data\r\n  32.70MB in total\r\n------------------------------------------------------------------------------------------------------------------------\r\nTop 10 origins of code area:                                Top 10 object types in image heap:\r\n  11.22MB java.base                                            4.57MB byte[] for code metadata\r\n   1.28MB svm.jar (Native Image)                               2.65MB byte[] for java.lang.String\r\n 376.09kB code-with-quarkus-1.0.0-SNAPSHOT-runner.jar          1.86MB java.lang.String\r\n 359.59kB io.smallrye.config.smallrye-config-core-3.5.4.jar    1.66MB java.lang.Class\r\n 323.90kB jdk.crypto.ec                                      881.76kB byte[] for general heap data\r\n 308.22kB o.j.logmanager.jboss-logmanager-3.0.4.Final.jar    617.80kB com.oracle.svm.core.hub.DynamicHubCompanion\r\n 226.16kB jdk.zipfs                                          393.85kB byte[] for reflection metadata\r\n 161.46kB io.quarkus.quarkus-core-3.8.4.jar                  363.64kB java.lang.String[]\r\n 153.55kB io.quarkus.arc.arc-3.8.4.jar                       311.16kB java.lang.Object[]\r\n 104.40kB java.naming                                        303.52kB java.util.HashMap$Node\r\n 601.89kB for 27 more packages                                 3.57MB for 2012 more object types\r\n------------------------------------------------------------------------------------------------------------------------\r\nRecommendations:\r\n HEAP: Set max heap for improved and more predictable memory usage.\r\n CPU:  Enable more CPU features with '-march=native' for improved performance.\r\n------------------------------------------------------------------------------------------------------------------------\r\n                        1.9s (7.9% of total time) in 123 GCs | Peak RSS: 2.09GB | CPU load: 5.47\r\n------------------------------------------------------------------------------------------------------------------------\r\nProduced artifacts:\r\n /project/code-with-quarkus-1.0.0-SNAPSHOT-runner (executable)\r\n /project/code-with-quarkus-1.0.0-SNAPSHOT-runner-build-output-stats.json (build_info)\r\n========================================================================================================================\r\nFinished generating 'code-with-quarkus-1.0.0-SNAPSHOT-runner' in 23.0s.\r\n[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildRunner] podman run --env LANG=C --rm --user 1000:1000 --userns=keep-id -v /home/rgemmell/workspace/testing/quarkus-3.8/3.8.4-upstream/code-with-quarkus-upstream/target/code-with-quarkus-1.0.0-SNAPSHOT-native-image-source-jar:/project:z --entrypoint /bin/bash quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-21 -c objcopy --strip-debug code-with-quarkus-1.0.0-SNAPSHOT-runner\r\n[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 27656ms\r\n```\r\n\r\n\n\n### Expected behavior\n\nNo stacktraces about missing classes that arent being used by extension.\n\n### Actual behavior\n\n2 stacktraces printed about missing classes that aren't being used by extension.\n\n### How to Reproduce?\n\n1. Created base project from code.quarkus.io using quarus-qpid-jms, e.g: wget -O code-with-quarkus-test.zip 'https://code.quarkus.io/d?e=org.amqphub.quarkus%3Aquarkus-qpid-jms'\r\n2. Extract it\r\n3. Native build with e.g \"mvn clean verify -Pnative\" and observe stacktraces printed.\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Mandrel or GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40243/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40243/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
