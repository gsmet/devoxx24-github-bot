{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/24508",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24508/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24508/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24508/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/24508",
  "id": 1178355761,
  "node_id": "I_kwDOCFbutM5GPEgx",
  "number": 24508,
  "title": "Agroal doesn't seem to throw an exception when unable to acquire connection despite `acquisitionTimeout` set?",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 2955097332,
      "node_id": "MDU6TGFiZWwyOTU1MDk3MzMy",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/agroal",
      "name": "area/agroal",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/180",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/180",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/180/labels",
    "id": 7812665,
    "node_id": "MI_kwDOCFbutM4AdzY5",
    "number": 180,
    "title": "2.8.0.Final",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 39,
    "state": "closed",
    "created_at": "2022-03-28T20:07:30Z",
    "updated_at": "2022-05-05T18:08:40Z",
    "due_on": null,
    "closed_at": "2022-03-30T13:09:00Z"
  },
  "comments": 3,
  "created_at": "2022-03-23T16:21:39Z",
  "updated_at": "2022-03-30T16:02:12Z",
  "closed_at": "2022-03-29T19:20:45Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nMy tests began to suddenly stop running -- not failing, but they would just hang on `running tests` indefinitely.\r\nAfter debugging for an hour, I found that the stack trace was blocked on Agroal waiting for a datasource connection (my Docker service had crashed):\r\n\r\n![image](https://user-images.githubusercontent.com/26604994/159746774-4378490c-d965-41fc-aa32-1ccd9674e6a6.png)\r\n\r\nLooking at the Agroal docs, it seemed like I should add the `acquisitionTimeout` property, so I did:\r\n\r\n```\r\nacquisitionTimeout(Duration) - The maximum amount of time a thread can wait for\r\na connection, after which an exception is thrown instead. The default is zero,\r\nmeaning a thread will wait indefinitely. This property can be changed during\r\nruntime.\r\n```\r\n\r\n```kt\r\nobject AgroalDataSourceService {\r\n    const val DEFAULT_MAX_POOL_SIZE = 10\r\n\r\n    fun createDataSource(jdbcUrl: String, properties: Map<String, String> = emptyMap()): DataSource {\r\n        val configSupplier = AgroalDataSourceConfigurationSupplier()\r\n            .metricsEnabled()\r\n            .connectionPoolConfiguration { connectionPool ->\r\n                connectionPool\r\n                    .maxSize(DEFAULT_MAX_POOL_SIZE)\r\n                    .acquisitionTimeout(Duration.ofSeconds(5))\r\n                    .connectionFactoryConfiguration { connFactory ->\r\n                        connFactory.jdbcUrl(jdbcUrl)\r\n                        properties.forEach { (key, value) ->\r\n                            connFactory.jdbcProperty(key, value)\r\n                        }\r\n                        connFactory\r\n                    }\r\n            }\r\n\r\n        return AgroalDataSource.from(configSupplier)\r\n    }\r\n}\r\n```\r\n\r\nBut it seems like this still didn't change anything, the same behavior was present.\r\nWhat is the proper setting for Agroal to throw an exception after X amount of time if the connection can't be established?\r\n\r\nThank you =)\r\n\r\n### Expected behavior\r\n\r\nAgroal throws an exception, allowing me to catch the problem in my app and fix it\r\n\r\n### Actual behavior\r\n\r\nIt silently hangs waiting for the connection indefinitely\r\n\r\n### How to Reproduce?\r\n\r\n_No response_\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\n_No response_\r\n\r\n### Output of `java -version`\r\n\r\n_No response_\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n_No response_\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/24508/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24508/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
