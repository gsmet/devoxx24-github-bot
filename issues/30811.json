{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/30811",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/30811/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/30811/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/30811/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/30811",
  "id": 1568081367,
  "node_id": "I_kwDOCFbutM5ddwXX",
  "number": 30811,
  "title": "CDI Decorator ignored for beans implementing interface extending other generic interface",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1282102389,
      "node_id": "MDU6TGFiZWwxMjgyMTAyMzg5",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/arc",
      "name": "area/arc",
      "color": "0366d6",
      "default": false,
      "description": "Issue related to ARC (dependency injection)"
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/254",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/254",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/254/labels",
    "id": 9511254,
    "node_id": "MI_kwDOCFbutM4AkSFW",
    "number": 254,
    "title": "3.1.2.Final",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 62,
    "state": "closed",
    "created_at": "2023-06-08T06:32:46Z",
    "updated_at": "2023-11-15T13:50:56Z",
    "due_on": null,
    "closed_at": "2023-06-15T12:51:10Z"
  },
  "comments": 1,
  "created_at": "2023-02-02T13:39:17Z",
  "updated_at": "2023-06-14T09:10:34Z",
  "closed_at": "2023-06-07T18:27:09Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\n\nCDI Decorator is ignored for beans implementing interface extending other generic interface. \r\nE.g.\r\n```\r\npublic interface MyInterface extends Consumer<String> {\r\n}\r\n```\r\n\r\nIMHO is the bug in [BeanInfo.findMatchingDecorators](https://github.com/quarkusio/quarkus/blob/1c12f86c16ffa5dbd4b6e74b67b0c7d44744d9b1/independent-projects/arc/processor/src/main/java/io/quarkus/arc/processor/BeanInfo.java#L659)\r\n\r\nIn this case method name is matched on Consumer interface (`void accept(T t)`), but because `Consumer` is generic, its parameter type (`T`) cannot be matched against the parameter type of the implementation (`String`).\r\n\r\nRepeating the parent interface method declaration fixes this issue e.g.:\r\n\r\n```\r\npublic interface MyInterface extends Consumer<String> {\r\n   void accept(String t);\r\n}\r\n```\r\n\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n```\r\nimport java.util.function.Consumer;\r\n\r\nimport javax.annotation.Priority;\r\nimport javax.decorator.Decorator;\r\nimport javax.decorator.Delegate;\r\nimport javax.enterprise.context.Dependent;\r\nimport javax.enterprise.inject.Any;\r\nimport javax.inject.Inject;\r\n\r\nimport io.quarkus.runtime.QuarkusApplication;\r\nimport io.quarkus.runtime.annotations.QuarkusMain;\r\n\r\n@QuarkusMain\r\npublic class DecoratorTest implements QuarkusApplication {\r\n\r\n    public interface NotWorking extends Consumer<String> {\r\n\r\n    }\r\n\r\n    @Dependent\r\n    public static class NotWorkingDefaultImpl implements NotWorking {\r\n\r\n        @Override\r\n        public void accept(String t) {\r\n            System.out.println(\"NotWorkingDefaultImpl \" + t);\r\n        }\r\n\r\n    }\r\n\r\n    @Priority(1)\r\n    @Decorator\r\n    public static class NotWorkingDecorator implements NotWorking {\r\n\r\n        @Inject\r\n        @Delegate\r\n        @Any\r\n        NotWorking delegate;\r\n\r\n        @Override\r\n        public void accept(String t) {\r\n            System.out.println(\"NotWorkingDecorator \" + t);\r\n            delegate.accept(t);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public interface Working extends Consumer<String> {\r\n        // must redeclare accept method from Consumer for decorator to work\r\n        @Override\r\n        void accept(String t);\r\n    }\r\n\r\n    @Dependent\r\n    public static class WorkingDefaultImpl implements Working {\r\n\r\n        @Override\r\n        public void accept(String t) {\r\n            System.out.println(\"WorkingDefaultImpl \" + t);\r\n        }\r\n\r\n    }\r\n\r\n    @Priority(1)\r\n    @Decorator\r\n    public static class WorkingDecorator implements Working {\r\n\r\n        @Inject\r\n        @Delegate\r\n        @Any\r\n        Working delegate;\r\n\r\n        @Override\r\n        public void accept(String t) {\r\n            System.out.println(\"WorkingDecorator \" + t);\r\n            delegate.accept(t);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    @Inject\r\n    NotWorking decoratorNotWorking;\r\n\r\n    @Inject\r\n    Working decoratorWorking;\r\n\r\n    @Override\r\n    public int run(String... args) throws Exception {\r\n\r\n        /*\r\n         * prints:\r\n         * \r\n         * NotWorkingDefaultImpl value\r\n         */\r\n        decoratorNotWorking.accept(\"value\");\r\n\r\n        /*\r\n         * prints:\r\n         * \r\n         * WorkingDecorator value\r\n         * \r\n         * WorkingDefaultImpl value\r\n         */\r\n        decoratorWorking.accept(\"value\");\r\n        return 0;\r\n    }\r\n\r\n}\r\n\r\n\r\n```\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/30811/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/30811/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
