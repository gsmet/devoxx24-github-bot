{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/36996",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/36996/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/36996/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/36996/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/36996",
  "id": 1987226682,
  "node_id": "I_kwDOCFbutM52cqw6",
  "number": 36996,
  "title": "Native builds fail after upgrading to Quarkus 3.5.1, Mandrel 23.1.1.0-Final and Java 21",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 985346624,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjQ=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/good%20first%20issue",
      "name": "good first issue",
      "color": "7057ff",
      "default": true,
      "description": "Good for newcomers"
    },
    {
      "id": 2497075451,
      "node_id": "MDU6TGFiZWwyNDk3MDc1NDUx",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/native-image",
      "name": "area/native-image",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/288",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/288",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/288/labels",
    "id": 10189838,
    "node_id": "MI_kwDOCFbutM4Am3wO",
    "number": 288,
    "title": "3.7.0.CR1",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 432,
    "state": "closed",
    "created_at": "2023-11-15T08:06:53Z",
    "updated_at": "2024-05-17T12:27:49Z",
    "due_on": null,
    "closed_at": "2024-01-17T13:52:08Z"
  },
  "comments": 8,
  "created_at": "2023-11-10T09:16:32Z",
  "updated_at": "2023-11-28T13:59:12Z",
  "closed_at": "2023-11-28T13:59:06Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nPreviously successful native builds of an application are not possible anymore after upgrading the project - see \"Actual behavior\".\r\nThe upgrades conducted are as follows:\r\n- Java 17 -> 21\r\n- Quarkus 3.3.0 -> 3.5.1\r\n- Mandrel 23.0.1.2-Final -> 23.1.1.0-Final\r\n\r\nOther projects with the same upgrades are not affected and an analysis of the error log leads me to the conclusion that the Maven dependency `com.google.cloud.sql:postgres-socket-factory:1.14.1` is the culprit, maybe something with JNR as those come transitively with that.\r\n\r\n\r\n### Expected behavior\r\n\r\nNative builds still work as before after upgrading aforementioned versions\r\n\r\n### Actual behavior\r\n\r\nNative build fails with the following log entries:\r\n\r\n```\r\nBuild resources:\r\n - 6.22GB of memory (77.8% of 8.00GB system memory, set via '-Xmx7g')\r\n - 2 thread(s) (100.0% of 2 available processor(s), determined at start)\r\n[2/8] Performing analysis...  [*****]                                                                  (153.6s @ 1.13GB)\r\n   13,073 reachable types   (86.0% of   15,209 total)\r\n   18,526 reachable fields  (56.8% of   32,597 total)\r\n   64,703 reachable methods (55.5% of  116,494 total)\r\n    4,179 types,   410 fields, and 4,521 methods registered for reflection\r\n       61 types,    59 fields, and    55 methods registered for JNI access\r\n        4 native libraries: dl, pthread, rt, z\r\nError: Detected a started Thread in the image heap. Thread name: jnr.ffi.util.ref.internal.Finalizer. Threads running in the image generator are no longer running at image runtime. If these objects should not be stored in the image heap, you can use \r\n    '--trace-object-instantiation=java.lang.Thread'\r\nto find classes that instantiate these objects. Once you found such a class, you can mark it explicitly for run time initialization with \r\n    '--initialize-at-run-time=<culprit>'\r\nto prevent the instantiation of the object.\r\nThe object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\r\nDetailed message:\r\nTrace: Object was reached by\r\n  reading field java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.waiter of constant \r\n    java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode@16abede8: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode@16abede8\r\n  reading field java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.firstWaiter of constant \r\n    java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@1201d95d: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@1201d95d\r\n  reading field java.lang.ref.ReferenceQueue.notEmpty of constant \r\n    java.lang.ref.ReferenceQueue@22d4697c: java.lang.ref.ReferenceQueue@22d4697c\r\n  scanning root java.lang.ref.ReferenceQueue@22d4697c: java.lang.ref.ReferenceQueue@22d4697c embedded in \r\n    jnr.ffi.provider.jffi.TransientNativeMemory$Magazine.<init>(TransientNativeMemory.java)\r\n  parsing method jnr.ffi.provider.jffi.TransientNativeMemory$Magazine.<init>(TransientNativeMemory.java:132) reachable via the parsing context\r\n    at jnr.ffi.provider.jffi.TransientNativeMemory.allocate(TransientNativeMemory.java:75)\r\n    at jnr.ffi.provider.jffi.TransientNativeMemory.allocate(TransientNativeMemory.java:45)\r\n    at jnr.ffi.provider.jffi.NativeMemoryManager.allocateDirect(NativeMemoryManager.java:49)\r\n    at jnr.ffi.Struct$Info.allocateMemory(Struct.java:90)\r\n    at jnr.ffi.Struct$Info.getMemory(Struct.java:69)\r\n    at jnr.ffi.Struct$AbstractMember.getMemory(Struct.java:826)\r\n    at jnr.ffi.Struct$UTFString.getStringMemory(Struct.java:2425)\r\n    at jnr.ffi.Struct$UTFString.get(Struct.java:2429)\r\n    at jnr.ffi.Struct$String.toString(Struct.java:2415)\r\n    at java.lang.String.valueOf(String.java:4461)\r\n    at java.security.Provider.putId(Provider.java:857)\r\n    at java.security.Provider.<init>(Provider.java:238)\r\n    at sun.security.provider.Sun.<init>(Sun.java:53)\r\n    at com.oracle.svm.core.code.FactoryMethodHolder.Sun_constructor_992f12f580cf47c3444e9ec7818b9d0a187cd44d(generated:0)\r\n    at static root method.(Unknown Source)\r\ncom.oracle.svm.core.util.UserError$UserException: Detected a started Thread in the image heap. Thread name: jnr.ffi.util.ref.internal.Finalizer. Threads running in the image generator are no longer running at image runtime. If these objects should not be stored in the image heap, you can use \r\n    '--trace-object-instantiation=java.lang.Thread'\r\nto find classes that instantiate these objects. Once you found such a class, you can mark it explicitly for run time initialization with \r\n    '--initialize-at-run-time=<culprit>'\r\nto prevent the instantiation of the object.\r\nThe object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\r\nDetailed message:\r\nTrace: Object was reached by\r\n  reading field java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.waiter of constant \r\n    java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode@16abede8: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode@16abede8\r\n  reading field java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.firstWaiter of constant \r\n    java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@1201d95d: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@1201d95d\r\n  reading field java.lang.ref.ReferenceQueue.notEmpty of constant \r\n    java.lang.ref.ReferenceQueue@22d4697c: java.lang.ref.ReferenceQueue@22d4697c\r\n  scanning root java.lang.ref.ReferenceQueue@22d4697c: java.lang.ref.ReferenceQueue@22d4697c embedded in \r\n    jnr.ffi.provider.jffi.TransientNativeMemory$Magazine.<init>(TransientNativeMemory.java)\r\n  parsing method jnr.ffi.provider.jffi.TransientNativeMemory$Magazine.<init>(TransientNativeMemory.java:132) reachable via the parsing context\r\n    at jnr.ffi.provider.jffi.TransientNativeMemory.allocate(TransientNativeMemory.java:75)\r\n    at jnr.ffi.provider.jffi.TransientNativeMemory.allocate(TransientNativeMemory.java:45)\r\n    at jnr.ffi.provider.jffi.NativeMemoryManager.allocateDirect(NativeMemoryManager.java:49)\r\n    at jnr.ffi.Struct$Info.allocateMemory(Struct.java:90)\r\n    at jnr.ffi.Struct$Info.getMemory(Struct.java:69)\r\n    at jnr.ffi.Struct$AbstractMember.getMemory(Struct.java:826)\r\n    at jnr.ffi.Struct$UTFString.getStringMemory(Struct.java:2425)\r\n    at jnr.ffi.Struct$UTFString.get(Struct.java:2429)\r\n    at jnr.ffi.Struct$String.toString(Struct.java:2415)\r\n    at java.lang.String.valueOf(String.java:4461)\r\n    at java.security.Provider.putId(Provider.java:857)\r\n    at java.security.Provider.<init>(Provider.java:238)\r\n    at sun.security.provider.Sun.<init>(Sun.java:53)\r\n    at com.oracle.svm.core.code.FactoryMethodHolder.Sun_constructor_992f12f580cf47c3444e9ec7818b9d0a187cd44d(generated:0)\r\n    at static root method.(Unknown Source)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.core.util.UserError.abort(UserError.java:85)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.FallbackFeature.reportAsFallback(FallbackFeature.java:248)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.runPointsToAnalysis(NativeImageGenerator.java:814)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:592)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.run(NativeImageGenerator.java:550)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.buildImage(NativeImageGeneratorRunner.java:538)\r\n \tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.build(NativeImageGeneratorRunner.java:720)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.start(NativeImageGeneratorRunner.java:142)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.main(NativeImageGeneratorRunner.java:97)\r\nCaused by: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: Detected a started Thread in the image heap. Thread name: jnr.ffi.util.ref.internal.Finalizer. Threads running in the image generator are no longer running at image runtime. If these objects should not be stored in the image heap, you can use \r\n    '--trace-object-instantiation=java.lang.Thread'\r\nto find classes that instantiate these objects. Once you found such a class, you can mark it explicitly for run time initialization with \r\n    '--initialize-at-run-time=<culprit>'\r\nto prevent the instantiation of the object.\r\nThe object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\r\nDetailed message:\r\nTrace: Object was reached by\r\n  reading field java.util.concurrent.locks.AbstractQueuedSynchronizer$Node.waiter of constant \r\n    java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode@16abede8: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionNode@16abede8\r\n  reading field java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.firstWaiter of constant \r\n    java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@1201d95d: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject@1201d95d\r\n  reading field java.lang.ref.ReferenceQueue.notEmpty of constant \r\n    java.lang.ref.ReferenceQueue@22d4697c: java.lang.ref.ReferenceQueue@22d4697c\r\n  scanning root java.lang.ref.ReferenceQueue@22d4697c: java.lang.ref.ReferenceQueue@22d4697c embedded in \r\n    jnr.ffi.provider.jffi.TransientNativeMemory$Magazine.<init>(TransientNativeMemory.java)\r\n  parsing method jnr.ffi.provider.jffi.TransientNativeMemory$Magazine.<init>(TransientNativeMemory.java:132) reachable via the parsing context\r\n    at jnr.ffi.provider.jffi.TransientNativeMemory.allocate(TransientNativeMemory.java:75)\r\n    at jnr.ffi.provider.jffi.TransientNativeMemory.allocate(TransientNativeMemory.java:45)\r\n    at jnr.ffi.provider.jffi.NativeMemoryManager.allocateDirect(NativeMemoryManager.java:49)\r\n    at jnr.ffi.Struct$Info.allocateMemory(Struct.java:90)\r\n    at jnr.ffi.Struct$Info.getMemory(Struct.java:69)\r\n    at jnr.ffi.Struct$AbstractMember.getMemory(Struct.java:826)\r\n    at jnr.ffi.Struct$UTFString.getStringMemory(Struct.java:2425)\r\n    at jnr.ffi.Struct$UTFString.get(Struct.java:2429)\r\n    at jnr.ffi.Struct$String.toString(Struct.java:2415)\r\n    at java.lang.String.valueOf(String.java:4461)\r\n    at java.security.Provider.putId(Provider.java:857)\r\n    at java.security.Provider.<init>(Provider.java:238)\r\n    at sun.security.provider.Sun.<init>(Sun.java:53)\r\n    at com.oracle.svm.core.code.FactoryMethodHolder.Sun_constructor_992f12f580cf47c3444e9ec7818b9d0a187cd44d(generated:0)\r\n    at static root method.(Unknown Source)\r\n\tat org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.constraints.UnsupportedFeatures.report(UnsupportedFeatures.java:126)\r\n\tat org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.runPointsToAnalysis(NativeImageGenerator.java:809)\r\n\t... 6 more\r\n```\r\n\r\n### How to Reproduce?\r\n\r\nReproducer:\r\n\r\n1. Generate example Quarkus project - I used `Quarkus create`\r\n2. Change `maven.compiler.release` in pom.xml to `21`\r\n3. Add dependency `com.google.cloud.sql:postgres-socket-factory:1.14.1`\r\n4. Add dependency `io.quarkus:quarkus-agroal`\r\n5. Add dependency `io.quarkus:quarkus-jdbc-postgresql`\r\n6. Remove tests in `src/test/java` to make build not fail with Quarkus test startup failure due to missing Docker\r\n7. Start native build with Mandrel\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nLinux runner-... 3.10.0-1160.66.1.el7.x86_64 #1 SMP Wed Apr 27 20:34:34 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n### Output of `java -version`\r\n\r\nopenjdk version \"21.0.1\" 2023-10-17 LTS / OpenJDK Runtime Environment Temurin-21.0.1+12 (build 21.0.1+12-LTS) / OpenJDK 64-Bit Server VM Temurin-21.0.1+12 (build 21.0.1+12-LTS, mixed mode, sharing)\r\n\r\n### Mandrel or GraalVM version (if different from Java)\r\n\r\nMandrel-23.1.1.0-Final\r\n\r\n### Quarkus version or git rev\r\n\r\n3.5.1\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nApache Maven 3.9.4\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/36996/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/36996/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
