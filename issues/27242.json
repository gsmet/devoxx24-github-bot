{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/27242",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/27242/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/27242/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/27242/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/27242",
  "id": 1335653380,
  "node_id": "I_kwDOCFbutM5PnHQE",
  "number": 27242,
  "title": "Dev mode failing to compile changes on external JAR dependencies",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1273039603,
      "node_id": "MDU6TGFiZWwxMjczMDM5NjAz",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/devmode",
      "name": "area/devmode",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 1287515315,
      "node_id": "MDU6TGFiZWwxMjg3NTE1MzE1",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/kotlin",
      "name": "area/kotlin",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 22,
  "created_at": "2022-08-11T08:45:32Z",
  "updated_at": "2022-09-04T19:23:18Z",
  "closed_at": "2022-09-04T19:23:18Z",
  "active_lock_reason": null,
  "body": "I'm developing a web application using Quarkus, it's a normal Maven project, but part of my business code is developed on another project that uses Gradle as it's a requirement for building a [Kotlin MPP](https://kotlinlang.org/docs/multiplatform-library.html) library, so I configured this library written in Kotlin to compile for the following platforms: JVM (Quarkus), Android SDK (Android app) and Swift (iOS app). For JVM, the kotlin-multiplatform gradle plugin generates a JAR that works as expected on any JVM platform. \r\n\r\nThe idea behind this is a shared library to avoid duplicate code, I know that Kotlin MPP is more common to be used only for mobile apps, but I need to share unit code between client and server because my app also works offline and process the same logic used on the backend in some situations.\r\n\r\n**Quarkus behavior**\r\nThe issue is that Quarkus dev mode is unable to reload changes on this external library. Doing some research on existent issues, I found a closed issue [#2865](https://github.com/quarkusio/quarkus/issues/2865) and @stuartwdouglas says \"If you have a multi module maven project this should work, as it will monitor the source directories of all the modules in the project.\".\r\n\r\nI know that Quarkus dev mode can reloads a multi-module Maven project, but as sayed before, my business library cannot be compiled on Maven as kotlin multiplatform plugin only works with Gradle. There's no magic to build the multiplatform artifacts, I just execute: `$ ./gradlew build publishToMavenLocal`. \r\n\r\nI also attempted to migrate my Quarkus project to use Gradle as build tool instead of Maven and uses the business library as a Gradle module, but when I did it, I found a similiar problem that is already reported on issue [#1098](https://github.com/quarkusio/quarkus/issues/10987#issuecomment-1200597965), then I prefered to just use Maven for Quarkus as it's more stable.\r\n\r\n**NOTE:** **there is no need to configure Kotlin multiplatform specific features to reproduce the issue, you can do it with a normal Java project that generates a JAR.**\r\n\r\n### Expected behavior\r\n\r\nQuarkus dev mode should also reload code changes made to external JAR artifacts if configured to do so.\r\n\r\n### Actual behavior\r\n\r\nQuarkus dev mode fails to compile changes made in a external JAR artifact, forcing me to stop and start dev mode again after each build of the external JAR.\r\n\r\n\r\n### How to Reproduce?\r\n\r\n**How to Reproduce**\r\n\r\n1. Get the sample business project that generates JAR artifact.\r\n[business-sample.zip](https://github.com/quarkusio/quarkus/files/9307269/business-sample.zip)\r\n\r\n2. Get the sample Quarkus project.\r\n[quarkus-service.zip](https://github.com/quarkusio/quarkus/files/9307271/quarkus-service.zip)\r\n\r\n\r\n3. Build the business project: `mvn install `\r\n4. Run Quarkus Dev Mode: `mvn compile quarkus:dev`\r\n5. Send a request to http://localhost:8080/uuid endpoint.\r\n6. Look that the UUID was successful generated using the external business code\r\n7. Now, uncomment the `randomUpperCase()` method on the external business project.\r\n```java\r\npublic class JavaUUID {\r\n  public String random() {\r\n      return String.format(\"JAVA-%s\",\r\n          UUID.randomUUID().toString());\r\n  }\r\n  \r\n  public String randomUpperCase() {\r\n      return random().toUpperCase();\r\n  }\r\n}\r\n```\r\n\r\n8. Build the business project: mvn clean install\r\n9. **Change JAX-RS GET endpoint to use the external** `randomUpperCase()` **method instead of** `random()`:\r\n\r\n```java\r\n@Path(\"/uuid\")\r\n@Produces(MediaType.APPLICATION_JSON)\r\npublic class UUIDResource {\r\n\r\n  @GET\r\n  public Response generate() {\r\n      final String uuid = new JavaUUID().randomUpperCase();\r\n      final LocalDateTime dateTime = LocalDateTime.now();\r\n  \r\n      return Response.ok(new UUIDResponse(uuid, dateTime)).build();\r\n  }\r\n}\r\n```\r\n\r\n10. Send a request http://localhost:8080/uuid endpoint again.\r\n11. **Look that Quarkus throws a RuntimeException and fails to compile the changes**.\r\n```\r\njava.lang.NoSuchMethodError: 'java.lang.String org.acme.business.JavaUUID.randomUpperCase()'\r\n\tat org.acme.UUIDResource.generate(UUIDResource.java:18)\r\n\tat org.acme.UUIDResource_Subclass.generate$$superforward1(Unknown Source)\r\n\tat org.acme.UUIDResource_Subclass$$function$$2.apply(Unknown Source)\r\n\tat io.quarkus.arc.impl.AroundInvokeInvocationContext.proceed(AroundInvokeInvocationContext.java:53)\r\n\tat io.quarkus.arc.runtime.devconsole.InvocationInterceptor.proceed(InvocationInterceptor.java:62)\r\n\tat io.quarkus.arc.runtime.devconsole.InvocationInterceptor.monitor(InvocationInterceptor.java:49)\r\n\tat io.quarkus.arc.runtime.devconsole.InvocationInterceptor_Bean.intercept(Unknown Source)\r\n\tat io.quarkus.arc.impl.InterceptorInvocation.invoke(InterceptorInvocation.java:41)\r\n\tat io.quarkus.arc.impl.AroundInvokeInvocationContext.perform(AroundInvokeInvocationContext.java:40)\r\n\tat io.quarkus.arc.impl.InvocationContexts.performAroundInvoke(InvocationContexts.java:32)\r\n\tat org.acme.UUIDResource_Subclass.generate(Unknown Source)\r\n```\r\n12. Comment any reference and import of the external business class on the JAX-RS resource.\r\n13. Send the request to the endpoint and see that the exception goes away.\r\n14. Restart Quarkus by pressing _\"S\"_ on the terminal.\r\n15. Uncomment business code on the JAX-RS resource.\r\n16. Send the request again and you'll **see the same exception as before**.\r\n17. **Repeat steps 1 to 10 and see that this approach works only if you stop dev mode and starts again after each business project build**. I think there could be a way to restart the application from scratch.\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nFernandos-iMac-Pro.local 21.5.0 Darwin Kernel Version 21.5.0: Tue Apr 26 21:08:22 PDT 2022; root:xnu-8020.121.3~4/RELEASE_X86_64 x86_64\r\n\r\n### Output of `java -version`\r\n\r\njava version \"17.0.3\" 2022-04-19 LTS Java(TM) SE Runtime Environment (build 17.0.3+8-LTS-111) Java HotSpot(TM) 64-Bit Server VM (build 17.0.3+8-LTS-111, mixed mode, sharing)\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\nTested on 2.11 (stable) and master (999-SNAPSHOT)\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nMaven home: /Users/fernando/.sdkman/candidates/maven/current Java version: 17.0.3, vendor: Oracle Corporation, runtime: /Users/fernando/.sdkman/candidates/java/17.0.3-oracle Default locale: en_US, platform encoding: UTF-8 OS name: \"mac os x\", version: \"12.4\", arch: \"x86_64\", family: \"mac\"\r\n\r\n### Additional information\r\n\r\nI research about Quarkus ClassLoader and I found a [article](https://quarkus.io/blog/solving-problems-with-custom-extensions/#the-jandex-index) written by @gsmet on the Quarkus Blog and it says _\"An important assumption of Quarkus is that the application lives in a closed world. You cannot dynamically add a jar at runtime to your Quarkus application and expect it to work.\"_\r\n\r\n**So, this is a limitation or it's possible to do a workaround to enable a JAR redeployment at runtime?** I'm happy with the development experience that Quarkus provide us, is fast even when I need to restart the dev mode from scratch...just curious about this behaviour.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/27242/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/27242/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
