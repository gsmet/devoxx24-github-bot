{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/29337",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29337/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29337/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29337/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/29337",
  "id": 1453369045,
  "node_id": "I_kwDOCFbutM5WoKbV",
  "number": 29337,
  "title": "gRPC Server Streaming: Client Only Receives #onNext Response After Server Calls #onCompleted",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 2062531368,
      "node_id": "MDU6TGFiZWwyMDYyNTMxMzY4",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/grpc",
      "name": "area/grpc",
      "color": "0366d6",
      "default": false,
      "description": "gRPC"
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 14,
  "created_at": "2022-11-17T13:40:07Z",
  "updated_at": "2022-11-28T16:47:32Z",
  "closed_at": "2022-11-28T16:40:48Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nThe server's `responseObserver#onNext` calls seem to be collected and only sent to the client after the server calls `responseObserver#onComplete`.\r\n\r\n\r\n### Expected behavior\r\n\r\nThe server's `responseObserver#onNext` calls are sent to the client immediately when the server calls them and not only after `responseObserver#onComplete` was called.\r\n\r\n### Actual behavior\r\n\r\nThe server's `responseObserver#onNext` calls seem to be collected and only sent to the client after the server calls `responseObserver#onComplete`.\r\n\r\n### How to Reproduce?\r\n\r\nCreate a Maven project and follow these steps (note that I put client and server in the same Maven project)\r\n\r\nGenerate code for this protobuf:\r\n\r\n```\r\nsyntax = \"proto3\";\r\n\r\noption java_multiple_files = true;\r\noption java_package = \"examples\";\r\noption java_outer_classname = \"HelloWorldProto\";\r\n\r\npackage helloworld;\r\n\r\nservice Greeter {\r\n    rpc SayHelloServerStr (HelloRequest) returns (stream HelloReply) {}\r\n}\r\n\r\nmessage HelloRequest {\r\n    repeated int32 duration = 1;\r\n}\r\n\r\nmessage HelloReply {\r\n    string message = 1;\r\n}\r\n```\r\n\r\npom.xml:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>org.acme</groupId>\r\n    <artifactId>grpc-plain-text-quickstart</artifactId>\r\n    <version>1.0.0-SNAPSHOT</version>\r\n\r\n    <properties>\r\n        <quarkus.platform.artifact-id>quarkus-bom</quarkus.platform.artifact-id>\r\n        <quarkus.platform.group-id>io.quarkus</quarkus.platform.group-id>\r\n        <quarkus.platform.version>2.14.1.Final</quarkus.platform.version>\r\n        <surefire-plugin.version>3.0.0-M7</surefire-plugin.version>\r\n        <compiler-plugin.version>3.8.0</compiler-plugin.version>\r\n        <assertj.version>3.22.0</assertj.version>\r\n\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\r\n    </properties>\r\n\r\n    <dependencyManagement>\r\n        <dependencies>\r\n            <dependency>\r\n                <groupId>${quarkus.platform.group-id}</groupId>\r\n                <artifactId>${quarkus.platform.artifact-id}</artifactId>\r\n                <version>${quarkus.platform.version}</version>\r\n                <scope>import</scope>\r\n                <type>pom</type>\r\n            </dependency>\r\n            <dependency>\r\n                <groupId>org.assertj</groupId>\r\n                <artifactId>assertj-core</artifactId>\r\n                <version>${assertj.version}</version>\r\n            </dependency>\r\n        </dependencies>\r\n    </dependencyManagement>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-resteasy-reactive</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-grpc</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-junit5</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.rest-assured</groupId>\r\n            <artifactId>rest-assured</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.awaitility</groupId>\r\n            <artifactId>awaitility</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.assertj</groupId>\r\n            <artifactId>assertj-core</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n\t<plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-compiler-plugin</artifactId>\r\n                <version>${compiler-plugin.version}</version>\r\n                <configuration>\r\n                    <source>11</source>\r\n                    <target>11</target>\r\n                </configuration>\r\n            </plugin>\r\n\r\n            <plugin>\r\n                <groupId>${quarkus.platform.group-id}</groupId>\r\n                <artifactId>quarkus-maven-plugin</artifactId>\r\n                <version>${quarkus.platform.version}</version>\r\n                <executions>\r\n                    <execution>\r\n                        <goals>\r\n\t\t\t    <goal>build</goal>\r\n\t\t\t    <goal>generate-code</goal>\r\n\t\t            <goal>generate-code-tests</goal>\r\n                        </goals>\r\n                    </execution>\r\n                </executions>\r\n            </plugin>\r\n\r\n            <plugin>\r\n                <artifactId>maven-surefire-plugin</artifactId>\r\n                <version>${surefire-plugin.version}</version>\r\n                <configuration>\r\n                    <systemPropertyVariables>\r\n                        <java.util.logging.manager>org.jboss.logmanager.LogManager</java.util.logging.manager>\r\n                    </systemPropertyVariables>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n    <profiles>\r\n        <profile>\r\n            <id>native</id>\r\n            <activation>\r\n                <property>\r\n                    <name>native</name>\r\n                </property>\r\n            </activation>\r\n            <properties>\r\n                <quarkus.package.type>native</quarkus.package.type>\r\n            </properties>\r\n            <build>\r\n                <plugins>\r\n                    <plugin>\r\n                        <groupId>org.apache.maven.plugins</groupId>\r\n                        <artifactId>maven-failsafe-plugin</artifactId>\r\n                        <version>${surefire-plugin.version}</version>\r\n                        <executions>\r\n                            <execution>\r\n                                <goals>\r\n                                    <goal>integration-test</goal>\r\n                                    <goal>verify</goal>\r\n                                </goals>\r\n                                <configuration>\r\n                                    <systemPropertyVariables>\r\n                                        <native.image.path>${project.build.directory}/${project.build.finalName}-runner</native.image.path>\r\n                                    </systemPropertyVariables>\r\n                                </configuration>\r\n                            </execution>\r\n                        </executions>\r\n                    </plugin>\r\n                </plugins>\r\n            </build>\r\n        </profile>\r\n    </profiles>\r\n</project>\r\n\r\n```\r\n\r\nJava server service impl.:\r\n\r\n```java\r\nimport examples.GreeterGrpc.GreeterImplBase;\r\nimport examples.HelloReply;\r\nimport examples.HelloRequest;\r\nimport io.grpc.stub.StreamObserver;\r\nimport io.quarkus.grpc.GrpcService;\r\n\r\n@GrpcService\r\npublic class HelloWorldService extends GreeterImplBase {\r\n\t\r\n\t@Override\r\n\tpublic void sayHelloServerStr(HelloRequest request, StreamObserver<HelloReply> responseObserver) {\r\n\r\n\t\trequest.getDurationList().parallelStream().forEach(duration -> {\r\n\t\t\tSystem.out.println(\"server: starting \" + duration);\r\n\t\t\tsleep(duration);\r\n\t\t\tresponseObserver.onNext(HelloReply.newBuilder().setMessage(\"Slept for \" + duration + \" ms\").build());\r\n\t\t\tSystem.out.println(\"server: finished \" + duration);\r\n\t\t});\r\n\r\n\t\tSystem.out.println(\"server: reached #onCompleted\");\r\n\t\tsleep(2000);\r\n\t\tresponseObserver.onCompleted();\r\n\t\tSystem.out.println(\"server: finished #onCompleted\");\r\n\t}\r\n\r\n\tpublic static void sleep(long duration) {\r\n\t\ttry {\r\n\t\t\tThread.sleep(duration);\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\tthrow new RuntimeException(e);\r\n\t\t}\r\n\t}\r\n\r\n}\r\n\r\n```\r\n\r\nJava client code:\r\n\r\n```java\r\nimport static java.util.Arrays.asList;\r\n\r\nimport examples.GreeterGrpc;\r\nimport examples.HelloRequest;\r\nimport io.grpc.ManagedChannel;\r\nimport io.grpc.ManagedChannelBuilder;\r\n\r\npublic class MainServerStreaming {\r\n\tpublic static void main(String[] args) {\r\n\t\tManagedChannel channel = ManagedChannelBuilder.forAddress(\"localhost\", 9000).usePlaintext().build();\r\n\r\n\t\ttry {\r\n\t\t\tfinal var durations = asList(1000, 1500, 50);\r\n\r\n\t\t\tfinal var request = HelloRequest.newBuilder().addAllDuration(durations).build();\r\n\r\n\t\t\tfinal var stub = GreeterGrpc.newBlockingStub(channel);\r\n\r\n\t\t\tstub.sayHelloServerStr(request).forEachRemaining(response -> {\r\n\t\t\t\tSystem.out.println(\"client:\" + response.getMessage());\r\n\t\t\t});\r\n\t\t\tSystem.out.println(\"client: done\");\r\n\r\n\t\t} finally {\r\n\t\t\tchannel.shutdown();\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\n### Steps\r\n* Run the server (e.g. with `mvn compile quarkus:dev`)\r\n* Run the client\r\n\r\nYou'll notice that the client output\r\n```\r\nclient:Slept for 50 ms\r\nclient:Slept for 1000 ms\r\nclient:Slept for 1500 ms\r\nclient: done\r\n```\r\nonly starts after the server calls `responseObserver.onCompleted();`. \r\n\r\n\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nMSYS_NT-10.0-19044 LT-000X9DJ1M2 3.3.3-341.x86_64 2022-01-17 11:45 UTC x86_64 Msys\r\n\r\n### Output of `java -version`\r\n\r\nopenjdk version \"17.0.3\" 2022-04-19 OpenJDK Runtime Environment Temurin-17.0.3+7 (build 17.0.3+7) OpenJDK 64-Bit Server VM Temurin-17.0.3+7 (build 17.0.3+7, mixed mode, sharing)\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n2.14.1.Final\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nApache Maven 3.8.5\r\n\r\n### Additional information\r\n\r\nI implemented a gRPC server with vanilla gRPC with the Maven dependencies described on https://github.com/grpc/grpc-java/blob/master/README.md. I used the very same service implementation and client code. I only had to start the server on my own like\r\n\r\n```java\r\npublic static void main(String[] args) throws Exception {\r\n\tSystem.out.println(\"Server started on 9000\");\r\n\r\n\tServer server = ServerBuilder.forPort(9000).addService(new HelloWorldService()).build();\r\n\tserver.start();\r\n\r\n\tRuntime.getRuntime().addShutdownHook(new Thread(() -> {\r\n\t\tserver.shutdown();\r\n\t\tSystem.out.println(\"Successfully stopped the server\");\r\n\t}));\r\n\r\n\tserver.awaitTermination();\r\n}\r\n```\r\n\r\n-> The vanilla gRPC server works as specified: The `#onNext` responses are sent to the client immediately. The client starts printing its output already _before_ the server calls `#onCompleted` on the observer.\r\n\r\nI.e. with vanilla gRPC I can achieve the desired behavior I cannot achieve with Quarkus gRPC.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/29337/reactions",
    "total_count": 9,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 1,
    "confused": 0,
    "heart": 0,
    "rocket": 2,
    "eyes": 4
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29337/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
