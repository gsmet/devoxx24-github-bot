{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/25501",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/25501/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/25501/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/25501/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/25501",
  "id": 1232675655,
  "node_id": "I_kwDOCFbutM5JeSNH",
  "number": 25501,
  "title": "Ecosystem CI for Google Cloud Services fails with Quarkus main",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 2243658033,
      "node_id": "MDU6TGFiZWwyMjQzNjU4MDMz",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/google-cloud-functions",
      "name": "area/google-cloud-functions",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 12,
  "created_at": "2022-05-11T13:49:48Z",
  "updated_at": "2022-07-20T12:47:34Z",
  "closed_at": "2022-07-20T12:47:34Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\n\nThe Quarkiverse extension Google Cloud Services fails to runs the ecosystem CI due to an issue to build a native image with the current Quarkus main.\r\n\r\nSee the failing build: https://github.com/quarkiverse/quarkus-google-cloud-services/actions/runs/2304956797\n\n### Expected behavior\n\nEciosystem CI build is OK\n\n### Actual behavior\n\nIt fails with\r\n\r\n```\r\nFatal error: org.graalvm.compiler.debug.GraalError: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: Detected a PlatformManagedObject (a MXBean defined by the virtual machine) in the image heap. This bean is introspecting the VM that runs the image builder, i.e., a VM instance that is no longer available at image runtime. Class of disallowed object: com.sun.management.internal.HotSpotDiagnostic  Object has been initialized by the com.oracle.svm.hosted.jfr.JfrFeature class initializer with a trace: \r\n \tat com.sun.management.internal.HotSpotDiagnostic.<init>(HotSpotDiagnostic.java:42)\r\n\tat com.sun.management.internal.PlatformMBeanProviderImpl.getDiagnosticMXBean(PlatformMBeanProviderImpl.java:274)\r\n\tat jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Unknown Source)\r\n\tat jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat com.oracle.svm.hosted.jfr.JfrFeature.getDiagnosticBean(JfrFeature.java:154)\r\n\tat com.oracle.svm.hosted.jfr.JfrFeature.<clinit>(JfrFeature.java:125)\r\n. Try to avoid initializing the class that stores the object in a static field The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\r\n\tat com.oracle.graal.pointsto.util.AnalysisFuture.setException(AnalysisFuture.java:49)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:269)\r\n\tat com.oracle.graal.pointsto.util.AnalysisFuture.ensureDone(AnalysisFuture.java:63)\r\n\tat com.oracle.graal.pointsto.heap.ImageHeapScanner.lambda$postTask$9(ImageHeapScanner.java:611)\r\n\tat com.oracle.graal.pointsto.util.CompletionExecutor.executeCommand(CompletionExecutor.java:193)\r\n\tat com.oracle.graal.pointsto.util.CompletionExecutor.lambda$executeService$0(CompletionExecutor.java:177)\r\n\tat java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1426)\r\n\tat java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)\r\n\tat java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)\r\n\tat java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)\r\n\tat java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)\r\n\tat java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)\r\nCaused by: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: Detected a PlatformManagedObject (a MXBean defined by the virtual machine) in the image heap. This bean is introspecting the VM that runs the image builder, i.e., a VM instance that is no longer available at image runtime. Class of disallowed object: com.sun.management.internal.HotSpotDiagnostic  Object has been initialized by the com.oracle.svm.hosted.jfr.JfrFeature class initializer with a trace: \r\n \tat com.sun.management.internal.HotSpotDiagnostic.<init>(HotSpotDiagnostic.java:42)\r\n\tat com.sun.management.internal.PlatformMBeanProviderImpl.getDiagnosticMXBean(PlatformMBeanProviderImpl.java:274)\r\n\tat jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Unknown Source)\r\n\tat jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat com.oracle.svm.hosted.jfr.JfrFeature.getDiagnosticBean(JfrFeature.java:154)\r\n\tat com.oracle.svm.hosted.jfr.JfrFeature.<clinit>(JfrFeature.java:125)\r\n. Try to avoid initializing the class that stores the object in a static field The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\r\n\tat com.oracle.svm.hosted.image.DisallowedImageHeapObjectFeature.error(DisallowedImageHeapObjectFeature.java:173)\r\n\tat com.oracle.svm.hosted.image.DisallowedImageHeapObjectFeature.checkDisallowedMBeanObjects(DisallowedImageHeapObjectFeature.java:162)\r\n\tat com.oracle.svm.hosted.image.DisallowedImageHeapObjectFeature.replacer(DisallowedImageHeapObjectFeature.java:119)\r\n\tat com.oracle.graal.pointsto.meta.AnalysisUniverse.replaceObject(AnalysisUniverse.java:582)\r\n\tat com.oracle.svm.hosted.ameta.AnalysisConstantReflectionProvider.replaceObject(AnalysisConstantReflectionProvider.java:257)\r\n\tat com.oracle.svm.hosted.ameta.AnalysisConstantReflectionProvider.interceptValue(AnalysisConstantReflectionProvider.java:228)\r\n\tat com.oracle.svm.hosted.heap.SVMImageHeapScanner.transformFieldValue(SVMImageHeapScanner.java:126)\r\n\tat com.oracle.graal.pointsto.heap.ImageHeapScanner.onFieldValueReachable(ImageHeapScanner.java:331)\r\n\tat com.oracle.graal.pointsto.heap.ImageHeapScanner.onFieldValueReachable(ImageHeapScanner.java:310)\r\n\tat com.oracle.graal.pointsto.heap.ImageHeapScanner.lambda$computeTypeData$1(ImageHeapScanner.java:153)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\t... 10 more\r\n```\n\n### How to Reproduce?\n\nThis can be reproduced using the integration test of the extension pack.\r\n\r\nFork the repository: https://github.com/quarkiverse/quarkus-google-cloud-services\r\nUpdate the pom.xml to use Quarkus version 999-SNAPSHOT\r\nBuild everything: `mvn clean install -DskipTests`\r\nBuild the native executable the main integration test : \r\n```\r\ncd integration-test/main\r\nmvn clean package -DskipTests -Pnative\r\n```\r\n\n\n### Output of `uname -a` or `ver`\n\nLinux\n\n### Output of `java -version`\n\n11\n\n### GraalVM version (if different from Java)\n\n22.1\n\n### Quarkus version or git rev\n\nmain\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nMaven 3.8\n\n### Additional information\n\nThe repo uses a Google provided native image support library: https://github.com/GoogleCloudPlatform/native-image-support-java",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/25501/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/25501/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
