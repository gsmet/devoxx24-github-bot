{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40909",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40909/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40909/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40909/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/40909",
  "id": 2326452801,
  "node_id": "I_kwDOCFbutM6KqtpB",
  "number": 40909,
  "title": "UUID and import.sql not working in Quarkus 3.11 with MariaDB 10.11 ",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1273026509,
      "node_id": "MDU6TGFiZWwxMjczMDI2NTA5",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/persistence",
      "name": "area/persistence",
      "color": "FBCA04",
      "default": false,
      "description": "OBSOLETE, DO NOT USE"
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 11,
  "created_at": "2024-05-30T20:06:51Z",
  "updated_at": "2024-06-03T08:33:39Z",
  "closed_at": "2024-06-03T07:17:46Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nAccording to all the documentation I can find with Quarkus and Hibernate 6, the UUID type should be supported for MariaDB 10.11.\r\n\r\nYet, when I attempt to use the `import.sql` file to add some test data, startup fails with an error.\r\n\r\nIt looks like the Hibernate table generator is still using the `BINARY(16)` column type instead of the `UUID` type available since MariaDB 10.7.\r\n\r\nLinks:\r\nhttps://mariadb.com/kb/en/uuid/\r\nhttps://www.baeldung.com/java-hibernate-uuid-primary-key\r\n\r\nSample project, very simple one table and import.sql\r\n\r\nhttps://github.com/tmulle/quarkus-mariadb-uuidtest\r\n\r\nI've tried with and without the `@GeneratedValue(strategy = GenerationType.UUID)` on the id field and still same thing. The table gets generated as a `BINARY(16)` in mariadb 10.11 (Dev Services).\r\n\r\nThis is the output:\r\n```\r\n[INFO] Scanning for projects...\r\n[INFO] \r\n[INFO] ---------------------< org.acme:mariadb-uuid-test >---------------------\r\n[INFO] Building mariadb-uuid-test 1.0.0-SNAPSHOT\r\n[INFO]   from pom.xml\r\n[INFO] --------------------------------[ jar ]---------------------------------\r\n[INFO] \r\n[INFO] --- quarkus:3.11.0:dev (default-cli) @ mariadb-uuid-test ---\r\n[INFO] Invoking resources:3.3.1:resources (default-resources) @ mariadb-uuid-test\r\n[INFO] Copying 2 resources from src/main/resources to target/classes\r\n[INFO] Invoking quarkus:3.11.0:generate-code (default) @ mariadb-uuid-test\r\n[INFO] Invoking compiler:3.12.1:compile (default-compile) @ mariadb-uuid-test\r\n[INFO] Nothing to compile - all classes are up to date.\r\n[INFO] Invoking resources:3.3.1:testResources (default-testResources) @ mariadb-uuid-test\r\n[INFO] skip non existing resourceDirectory /home/tmulle/Downloads/mariadb-uuid-test/src/test/resources\r\n[INFO] Invoking quarkus:3.11.0:generate-code-tests (default) @ mariadb-uuid-test\r\n[INFO] Invoking compiler:3.12.1:testCompile (default-testCompile) @ mariadb-uuid-test\r\n[INFO] No sources to compile\r\n[WARNING] Changed debug port to 40841 because of a port conflict\r\nListening for transport dt_socket at address: 40841\r\n\r\n2024-05-30 15:48:36,472 INFO  [io.qua.dat.dep.dev.DevServicesDatasourceProcessor] (build-4) Dev Services for default datasource (mariadb) started - container ID is e360378173a7\r\n__  ____  __  _____   ___  __ ____  ______ \r\n --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ \r\n -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\   \r\n--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   \r\n2024-05-30 15:48:37,364 WARN  [org.mar.jdb.mes.ser.ErrorPacket] (JPA Startup Thread) Error: 1406-22001: Data too long for column 'id' at row 1\r\n\r\n2024-05-30 15:48:37,365 WARN  [org.hib.too.sch.int.ExceptionHandlerLoggedImpl] (JPA Startup Thread) GenerationTarget encountered exception accepting command : Error executing DDL \"insert into MyEntity (id, entity_name) values (UUID(), 'FooBAR')\" via JDBC [(conn=4) Data too long for column 'id' at row 1]: org.hibernate.tool.schema.spi.CommandAcceptanceException: Error executing DDL \"insert into MyEntity (id, entity_name) values (UUID(), 'FooBAR')\" via JDBC [(conn=4) Data too long for column 'id' at row 1]\r\n        at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:94)\r\n        at org.hibernate.tool.schema.internal.Helper.applySqlString(Helper.java:233)\r\n        at org.hibernate.tool.schema.internal.Helper.applyScript(Helper.java:255)\r\n        at org.hibernate.tool.schema.internal.SchemaCreatorImpl.applyImportFiles(SchemaCreatorImpl.java:676)\r\n        at org.hibernate.tool.schema.internal.SchemaCreatorImpl.applyImportSources(SchemaCreatorImpl.java:595)\r\n        at org.hibernate.tool.schema.internal.SchemaCreatorImpl.performCreation(SchemaCreatorImpl.java:184)\r\n        at org.hibernate.tool.schema.internal.SchemaCreatorImpl.doCreation(SchemaCreatorImpl.java:142)\r\n        at org.hibernate.tool.schema.internal.SchemaCreatorImpl.doCreation(SchemaCreatorImpl.java:118)\r\n        at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.performDatabaseAction(SchemaManagementToolCoordinator.java:250)\r\n        at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.lambda$process$5(SchemaManagementToolCoordinator.java:144)\r\n        at java.base/java.util.HashMap.forEach(HashMap.java:1429)\r\n        at org.hibernate.tool.schema.spi.SchemaManagementToolCoordinator.process(SchemaManagementToolCoordinator.java:141)\r\n        at io.quarkus.hibernate.orm.runtime.observers.SessionFactoryObserverForSchemaExport.sessionFactoryCreated(SessionFactoryObserverForSchemaExport.java:21)\r\n        at org.hibernate.internal.SessionFactoryObserverChain.sessionFactoryCreated(SessionFactoryObserverChain.java:35)\r\n        at org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:322)\r\n        at io.quarkus.hibernate.orm.runtime.boot.FastBootEntityManagerFactoryBuilder.build(FastBootEntityManagerFactoryBuilder.java:87)\r\n        at io.quarkus.hibernate.orm.runtime.FastBootHibernatePersistenceProvider.createEntityManagerFactory(FastBootHibernatePersistenceProvider.java:72)\r\n        at jakarta.persistence.Persistence.createEntityManagerFactory(Persistence.java:80)\r\n        at jakarta.persistence.Persistence.createEntityManagerFactory(Persistence.java:55)\r\n        at io.quarkus.hibernate.orm.runtime.JPAConfig$LazyPersistenceUnit.get(JPAConfig.java:154)\r\n        at io.quarkus.hibernate.orm.runtime.JPAConfig$1.run(JPAConfig.java:61)\r\n        at java.base/java.lang.Thread.run(Thread.java:1583)\r\nCaused by: java.sql.SQLSyntaxErrorException: (conn=4) Data too long for column 'id' at row 1\r\n        at org.mariadb.jdbc.export.ExceptionFactory.createException(ExceptionFactory.java:289)\r\n        at org.mariadb.jdbc.export.ExceptionFactory.create(ExceptionFactory.java:378)\r\n        at org.mariadb.jdbc.message.ClientMessage.readPacket(ClientMessage.java:172)\r\n        at org.mariadb.jdbc.client.impl.StandardClient.readPacket(StandardClient.java:915)\r\n        at org.mariadb.jdbc.client.impl.StandardClient.readResults(StandardClient.java:854)\r\n        at org.mariadb.jdbc.client.impl.StandardClient.readResponse(StandardClient.java:773)\r\n        at org.mariadb.jdbc.client.impl.StandardClient.execute(StandardClient.java:697)\r\n        at org.mariadb.jdbc.Statement.executeInternal(Statement.java:1035)\r\n        at org.mariadb.jdbc.Statement.execute(Statement.java:1165)\r\n        at org.mariadb.jdbc.Statement.execute(Statement.java:493)\r\n        at io.agroal.pool.wrapper.StatementWrapper.execute(StatementWrapper.java:220)\r\n        at org.hibernate.tool.schema.internal.exec.GenerationTargetToDatabase.accept(GenerationTargetToDatabase.java:80)\r\n        ... 21 more\r\n\r\n\r\n2024-05-30 15:48:37,369 INFO  [io.quarkus] (Quarkus Main Thread) mariadb-uuid-test 1.0.0-SNAPSHOT on JVM (powered by Quarkus 3.11.0) started in 7.710s. \r\n2024-05-30 15:48:37,370 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.\r\n2024-05-30 15:48:37,370 INFO  [io.quarkus] (Quarkus Main Thread) Installed features: [agroal, cdi, hibernate-orm, hibernate-orm-panache, jdbc-mariadb, narayana-jta, smallrye-context-propagation]\r\n```\r\n\r\n### Expected behavior\r\n\r\nI would think the generator would use the `UUID` type instead of the old `BINARY(16)` type since it is now using Hibernate 6.x? \r\n\r\n\r\n\r\n### Actual behavior\r\n\r\n_No response_\r\n\r\n### How to Reproduce?\r\n\r\n_No response_\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\n_No response_\r\n\r\n### Output of `java -version`\r\n\r\nJDK 17\r\n\r\n### Quarkus version or git rev\r\n\r\n3.11\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nmaven\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40909/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40909/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
