{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/22025",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22025/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22025/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22025/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/22025",
  "id": 1074354117,
  "node_id": "I_kwDOCFbutM5ACVfF",
  "number": 22025,
  "title": "Mixed up Test configuration when using @ResourceArg",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 985346626,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjY=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/question",
      "name": "kind/question",
      "color": "d876e3",
      "default": false,
      "description": "Further information is requested"
    },
    {
      "id": 1375177076,
      "node_id": "MDU6TGFiZWwxMzc1MTc3MDc2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/testing",
      "name": "area/testing",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 17,
  "created_at": "2021-12-08T12:24:57Z",
  "updated_at": "2021-12-09T14:51:16Z",
  "closed_at": "2021-12-09T14:51:07Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nTL:DR; When running tests with different `@ResourceArg`s to configure a TestLifecycleManager, the configuration of different tests get thrown around and override others, breaking tests meant to run with specific configurations. Originally on SO: https://stackoverflow.com/questions/70268026/quarkus-mixed-up-test-configuration-when-using-resourcearg\r\n\r\nSo, I have a service that has tests that run in different configuration setups. The main difference at the moment is the service can either manage its own authentication or get it from an external source (Keycloak).\r\n\r\nI firstly control this using test profiles, which seem to work fine. Unfortunately, in order to support both cases, the `ResourceLifecycleManager` I have setup supports setting up a Keycloak instance and returns config values that break the config for self authentication (This is due primarily to the fact that I have not found out how to get the lifecycle manager to determine on its own what profile or config is currently running. If I could do this, I think I would be much better off than using `@ResourceArg`, so would love to know if I missed something here. Maybe a potential improvement for the future).\r\n\r\nTo remedy this shortcoming, I have attempted to use `@ResourceArg`s to convey to the lifecycle manager when to setup for external auth. However, I have noticed some really odd execution timings and the config that ends up at my test/service isn't what I intend based on the test class's annotations, where it is obvious the lifecycle manager has setup for external auth.\r\n\r\nTo be specific, the config value that breaks things for self-auth tests is `mp.jwt.verify.publickey.location`, as the code grabs the public key from Keycloak to verify jwt's (which breaks the verification of self-signed keys!)\r\n\r\nAdditionally, it should be noted that I have my tests ordered such that the profiles and configs shouldn't be running out of order; all the tests that don't care are run first, then the 'normal' tests with self auth, then the tests with the external auth profile. I can see this working appropriately when I run in intellij, and the fact I can tell the time is being taken to start up the new service instance between the test profiles.\r\n\r\nLooking at the logs when I throw a breakpoint in places, some odd things are obvious:\r\n\r\n - When breakpoint on an erring test (before the external-configured tests run)\r\n   - The `start()` method of my `TestResourceLifecycleManager` has been called twice\r\n     - The first run ran with Keycloak starting, would override/break config\r\n       - though the time I would expect to need to be taken to start up keycloak not happening, a little confused here\r\n     - The second run is correct, not starting keycloak\r\n   - The profile config is what is expected, except for what the keycloak setup overrides\r\n - When breakpoint on an external-configured test (after all self-configured tests run):\r\n   - The `start()` method has now been called 4 times; appears that things were started in the same order as before again for the new run of the app\r\n\r\nThere could be some weirdness in how Intellij/Gradle shows logs, but I am interpreting this as:\r\n - Quarkus initting the two instances of LifecycleManager when starting the app for some reason, and one's config overrides the other, causing my woes.\r\n - The lifecycle manager is working as expected; it appropriately starts/ doesn't start keycloak when configured either way\r\n\r\nAt this point I can't tell if I'm doing something wrong, or if there's a bug.\r\n\r\n\r\nTest class example for self-auth test (same annotations for all tests in this (`test`) profile):\r\n\r\n```java\r\n@Slf4j\r\n@QuarkusTest\r\n@QuarkusTestResource(TestResourceLifecycleManager.class)\r\n@TestHTTPEndpoint(Auth.class)\r\nclass AuthTest extends RunningServerTest {\r\n```\r\n\r\nTest class example for external auth test (same annotations for all tests in this (`externalAuth`) profile):\r\n\r\n```java\r\n@Slf4j\r\n@QuarkusTest\r\n@TestProfile(ExternalAuthTestProfile.class)\r\n@QuarkusTestResource(value = TestResourceLifecycleManager.class, initArgs = @ResourceArg(name=TestResourceLifecycleManager.EXTERNAL_AUTH_ARG, value=\"true\"))\r\n@TestHTTPEndpoint(Auth.class)\r\nclass AuthExternalTest extends RunningServerTest {\r\n```\r\n\r\n`ExternalAuthTestProfile` extends this, providing the appropriate profile name:\r\n\r\n```java\r\npublic class NonDefaultTestProfile implements QuarkusTestProfile {\r\n\r\n    private final String testProfile;\r\n    private final Map<String, String> overrides = new HashMap<>();\r\n\r\n    protected NonDefaultTestProfile(String testProfile) {\r\n        this.testProfile = testProfile;\r\n    }\r\n\r\n    protected NonDefaultTestProfile(String testProfile, Map<String, String> configOverrides) {\r\n        this(testProfile);\r\n        this.overrides.putAll(configOverrides);\r\n    }\r\n\r\n    @Override\r\n    public Map<String, String> getConfigOverrides() {\r\n        return new HashMap<>(this.overrides);\r\n    }\r\n\r\n    @Override\r\n    public String getConfigProfile() {\r\n        return testProfile;\r\n    }\r\n\r\n    @Override\r\n    public List<TestResourceEntry> testResources() {\r\n        return QuarkusTestProfile.super.testResources();\r\n    }\r\n}\r\n```\r\n\r\n\r\nLifecycle manager:\r\n\r\n```java\r\n@Slf4j\r\npublic class TestResourceLifecycleManager implements QuarkusTestResourceLifecycleManager {\r\n    public static final String EXTERNAL_AUTH_ARG = \"externalAuth\";\r\n\r\n    private static volatile MongodExecutable MONGO_EXE = null;\r\n    private static volatile KeycloakContainer KEYCLOAK_CONTAINER = null;\r\n\r\n\tprivate boolean externalAuth = false;\r\n\r\n    public synchronized Map<String, String> startKeycloakTestServer() {\r\n        if(!this.externalAuth){\r\n            log.info(\"No need for keycloak.\");\r\n            return Map.of();\r\n        }\r\n        if (KEYCLOAK_CONTAINER != null) {\r\n            log.info(\"Keycloak already started.\");\r\n        } else {\r\n            KEYCLOAK_CONTAINER = new KeycloakContainer()\r\n//\t\t\t\t.withEnv(\"hello\",\"world\")\r\n                    .withRealmImportFile(\"keycloak-realm.json\");\r\n            KEYCLOAK_CONTAINER.start();\r\n            log.info(\r\n                    \"Test keycloak started at endpoint: {}\\tAdmin creds: {}:{}\",\r\n                    KEYCLOAK_CONTAINER.getAuthServerUrl(),\r\n                    KEYCLOAK_CONTAINER.getAdminUsername(),\r\n                    KEYCLOAK_CONTAINER.getAdminPassword()\r\n            );\r\n\r\n        }\r\n        String clientId;\r\n        String clientSecret;\r\n        String publicKey = \"\";\r\n        try (\r\n                Keycloak keycloak = KeycloakBuilder.builder()\r\n                        .serverUrl(KEYCLOAK_CONTAINER.getAuthServerUrl())\r\n                        .realm(\"master\")\r\n                        .grantType(OAuth2Constants.PASSWORD)\r\n                        .clientId(\"admin-cli\")\r\n                        .username(KEYCLOAK_CONTAINER.getAdminUsername())\r\n                        .password(KEYCLOAK_CONTAINER.getAdminPassword())\r\n                        .build();\r\n        ) {\r\n            RealmResource appsRealmResource = keycloak.realms().realm(\"apps\");\r\n\r\n            ClientRepresentation qmClientResource = appsRealmResource.clients().findByClientId(\"quartermaster\").get(0);\r\n\r\n            clientSecret = qmClientResource.getSecret();\r\n\r\n            log.info(\"Got client id \\\"{}\\\" with secret: {}\", \"quartermaster\", clientSecret);\r\n\r\n            //get private key\r\n            for (KeysMetadataRepresentation.KeyMetadataRepresentation curKey : appsRealmResource.keys().getKeyMetadata().getKeys()) {\r\n                if (!SIG.equals(curKey.getUse())) {\r\n                    continue;\r\n                }\r\n                if (!\"RSA\".equals(curKey.getType())) {\r\n                    continue;\r\n                }\r\n                String publicKeyTemp = curKey.getPublicKey();\r\n                if (publicKeyTemp == null || publicKeyTemp.isBlank()) {\r\n                    continue;\r\n                }\r\n                publicKey = publicKeyTemp;\r\n                log.info(\"Found a relevant key for public key use: {} / {}\", curKey.getKid(), publicKey);\r\n            }\r\n        }\r\n        // write public key\r\n        // = new File(TestResourceLifecycleManager.class.getResource(\"/\").toURI().toString() + \"/security/testKeycloakPublicKey.pem\");\r\n        File publicKeyFile;\r\n        try {\r\n            publicKeyFile = File.createTempFile(\"oqmTestKeycloakPublicKey\",\".pem\");\r\n//            publicKeyFile = new File(TestResourceLifecycleManager.class.getResource(\"/\").toURI().toString().replace(\"/classes/java/\", \"/resources/\") + \"/security/testKeycloakPublicKey.pem\");\r\n            log.info(\"path of public key: {}\", publicKeyFile);\r\n//            if(publicKeyFile.createNewFile()){\r\n//                log.info(\"created new public key file\");\r\n//\r\n//            } else {\r\n//                log.info(\"Public file already exists\");\r\n//            }\r\n            try (\r\n                    FileOutputStream os = new FileOutputStream(\r\n                            publicKeyFile\r\n                    );\r\n            ) {\r\n                IOUtils.write(publicKey, os, UTF_8);\r\n            } catch (IOException e) {\r\n                log.error(\"Failed to write out public key of keycloak: \", e);\r\n                throw new IllegalStateException(\"Failed to write out public key of keycloak.\", e);\r\n            }\r\n        } catch (IOException  e) {\r\n            log.error(\"Failed to create public key file: \", e);\r\n            throw new IllegalStateException(\"Failed to create public key file\", e);\r\n        }\r\n\r\n        String keycloakUrl = KEYCLOAK_CONTAINER.getAuthServerUrl().replace(\"/auth\", \"\");\r\n\r\n        return Map.of(\r\n                \"test.keycloak.url\", keycloakUrl,\r\n                \"test.keycloak.authUrl\", KEYCLOAK_CONTAINER.getAuthServerUrl(),\r\n                \"test.keycloak.adminName\", KEYCLOAK_CONTAINER.getAdminUsername(),\r\n                \"test.keycloak.adminPass\", KEYCLOAK_CONTAINER.getAdminPassword(),\r\n                //TODO:: add config for server to talk to\r\n                \"service.externalAuth.url\", keycloakUrl,\r\n                \"mp.jwt.verify.publickey.location\", publicKeyFile.getAbsolutePath()\r\n\r\n\r\n        );\r\n    }\r\n\r\n    public static synchronized void startMongoTestServer() throws IOException {\r\n        if (MONGO_EXE != null) {\r\n            log.info(\"Flapdoodle Mongo already started.\");\r\n            return;\r\n        }\r\n        Version.Main version = Version.Main.V4_0;\r\n        int port = 27018;\r\n        log.info(\"Starting Flapdoodle Test Mongo {} on port {}\", version, port);\r\n        IMongodConfig config = new MongodConfigBuilder()\r\n                .version(version)\r\n                .net(new Net(port, Network.localhostIsIPv6()))\r\n                .build();\r\n        try {\r\n            MONGO_EXE = MongodStarter.getDefaultInstance().prepare(config);\r\n            MongodProcess process = MONGO_EXE.start();\r\n            if (!process.isProcessRunning()) {\r\n                throw new IOException();\r\n            }\r\n        } catch (Throwable e) {\r\n            log.error(\"FAILED to start test mongo server: \", e);\r\n            MONGO_EXE = null;\r\n            throw e;\r\n        }\r\n    }\r\n\r\n    public static synchronized void stopMongoTestServer() {\r\n        if (MONGO_EXE == null) {\r\n            log.warn(\"Mongo was not started.\");\r\n            return;\r\n        }\r\n        MONGO_EXE.stop();\r\n        MONGO_EXE = null;\r\n    }\r\n\r\n    public synchronized static void cleanMongo() throws IOException {\r\n        if (MONGO_EXE == null) {\r\n            log.warn(\"Mongo was not started.\");\r\n            return;\r\n        }\r\n\r\n        log.info(\"Cleaning Mongo of all entries.\");\r\n    }\r\n\r\n\r\n    @Override\r\n    public void init(Map<String, String> initArgs) {\r\n        this.externalAuth = Boolean.parseBoolean(initArgs.getOrDefault(EXTERNAL_AUTH_ARG, Boolean.toString(this.externalAuth)));\r\n    }\r\n\r\n    @Override\r\n    public Map<String, String> start() {\r\n        log.info(\"STARTING test lifecycle resources.\");\r\n        Map<String, String> configOverride = new HashMap<>();\r\n        try {\r\n            startMongoTestServer();\r\n        } catch (IOException e) {\r\n            log.error(\"Unable to start Flapdoodle Mongo server\");\r\n        }\r\n\r\n        configOverride.putAll(startKeycloakTestServer());\r\n\r\n        return configOverride;\r\n    }\r\n\r\n    @Override\r\n    public void stop() {\r\n        log.info(\"STOPPING test lifecycle resources.\");\r\n        stopMongoTestServer();\r\n    }\r\n}\r\n```\r\n\r\n \r\n\r\n### Expected behavior\r\n\r\nIn any particular test class, I expect the configuration of the running quarkus app to match what the annotations set.\r\n\r\n### Actual behavior\r\n\r\nThe configuration of the running tests isn't what the test class annotation set.\r\n\r\n### How to Reproduce?\r\n\r\nThe app can be found here: https://github.com/Epic-Breakfast-Productions/OpenQuarterMaster/tree/main/software/open-qm-base-station\r\n\r\nThe tests are currently failing in the ways I am describing, so feel free to look around.\r\n\r\nNote that to run this, you will need to run `./gradlew build publishToMavenLocal` in https://github.com/Epic-Breakfast-Productions/OpenQuarterMaster/tree/main/software/libs/open-qm-core to install a dependency locally.\r\n \r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nLinux GeneralDevBox 5.11.0-41-generic #45~20.04.1-Ubuntu SMP Wed Nov 10 10:20:10 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n### Output of `java -version`\r\n\r\nopenjdk version \"11.0.11\" 2021-04-20 OpenJDK Runtime Environment (build 11.0.11+9-Ubuntu-0ubuntu2.20.04) OpenJDK 64-Bit Server VM (build 11.0.11+9-Ubuntu-0ubuntu2.20.04, mixed mode, sharing)\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n2.5.0.Final\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nGradle 7.3\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/22025/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22025/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
