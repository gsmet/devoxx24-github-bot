{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/27623",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/27623/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/27623/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/27623/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/27623",
  "id": 1357114044,
  "node_id": "I_kwDOCFbutM5Q4-q8",
  "number": 27623,
  "title": "Async startup code",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1282102389,
      "node_id": "MDU6TGFiZWwxMjgyMTAyMzg5",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/arc",
      "name": "area/arc",
      "color": "0366d6",
      "default": false,
      "description": "Issue related to ARC (dependency injection)"
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 8,
  "created_at": "2022-08-31T10:10:38Z",
  "updated_at": "2023-09-22T08:27:54Z",
  "closed_at": "2023-04-17T12:36:45Z",
  "active_lock_reason": null,
  "body": "### Description\n\nFor blocking code, we can use:\r\n\r\n```java\r\n@ApplicationScoped\r\npublic class Startup {\r\n    \r\n    @Transactional\r\n    public void init2(@Observes StartupEvent evt){\r\n        Person p = new Person();\r\n        p.firstName = \"Stef\";\r\n        p.lastName = \"Epardaud\";\r\n        Person.deleteAll();\r\n        p.persist();\r\n    }\r\n}\r\n```\r\n\r\nBut for reactive code, I don't know how to do it. This doesn't work:\r\n\r\n```java\r\n@ApplicationScoped\r\npublic class Startup {\r\n    \r\n    public Uni<Object> init(@Observes StartupEvent evt){\r\n        Person p = new Person();\r\n        p.firstName = \"Stef\";\r\n        p.lastName = \"Epardaud\";\r\n        return Person.deleteAll()\r\n                .chain(ignore -> p.persist());\r\n    }\r\n}\r\n```\r\n\r\nBecause `ArC` doesn't subscribe to the returned `Uni`, and there's no transaction anyway.\r\n\r\nThis doesn't work either:\r\n\r\n```\r\n@ApplicationScoped\r\npublic class Startup {\r\n    \r\n    @ReactiveTransactional\r\n    public Uni<Object> init(@Observes StartupEvent evt){\r\n        Person p = new Person();\r\n        p.firstName = \"Stef\";\r\n        p.lastName = \"Epardaud\";\r\n        return Person.deleteAll()\r\n                .chain(ignore -> p.persist());\r\n    }\r\n}\r\n```\r\n\r\nBecause again, ArC doesn't subscribe to the `Uni` returned by the `io.quarkus.hibernate.reactive.panache.common.runtime.ReactiveTransactionalInterceptorBase` interceptor.\r\n\r\nIf it did, there's a chance it might work, pending the question of whether it would have a request context, and whether that request context would be propagated to the IO thread we would move this code to, because the interceptor calls:\r\n\r\n```java\r\n            return AbstractJpaOperations.getSession().flatMap(session -> session.withTransaction(tx -> {\r\n                inTransactionCallback(tx);\r\n                try {\r\n                    return (Uni) ic.proceed();\r\n                } catch (RuntimeException e) {\r\n                    throw e;\r\n                } catch (Exception e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n            }));\r\n```\r\n\r\nAnd `getSession()` moves this to the IO thread like this:\r\n\r\n```java\r\n    public static Uni<Mutiny.Session> getSession() {\r\n        // Always check if we're running on the event loop: if not,\r\n        // we need to delegate the execution of all tasks on it.\r\n        if (io.vertx.core.Context.isOnEventLoopThread()) {\r\n            return Uni.createFrom().item(lookupSessionFromArc());\r\n        } else {\r\n            // FIXME: we may need context propagation\r\n            final Executor executor = AbstractJpaOperations::executeInVertxEventLoop;\r\n            return Uni.createFrom().item(AbstractJpaOperations::lookupSessionFromArc)\r\n                    .runSubscriptionOn(executor);\r\n        }\r\n    }\r\n```\r\n\r\nNotice that FIXME. It's entirely possible that ArC doesn't enable the request context, or doesn't extend its life-time, once it will actually subscribe to the returned `Uni`, and that even if it did, we'd need CP or something to propagate it here.\r\n\r\nSo this is likely a multi-person cooperation job.\n\n### Implementation ideas\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/27623/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/27623/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
