{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/24764",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24764/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24764/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24764/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/24764",
  "id": 1192838158,
  "node_id": "I_kwDOCFbutM5HGUQO",
  "number": 24764,
  "title": "Allow us to configure dynamic query parameters in the rest client ",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1326067509,
      "node_id": "MDU6TGFiZWwxMzI2MDY3NTA5",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/rest-client",
      "name": "area/rest-client",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/184",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/184",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/184/labels",
    "id": 7922797,
    "node_id": "MI_kwDOCFbutM4AeORt",
    "number": 184,
    "title": "2.7.6.Final",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 171,
    "state": "closed",
    "created_at": "2022-04-28T08:08:41Z",
    "updated_at": "2022-05-30T11:25:22Z",
    "due_on": null,
    "closed_at": "2022-05-30T11:25:22Z"
  },
  "comments": 6,
  "created_at": "2022-04-05T08:59:19Z",
  "updated_at": "2022-05-24T21:01:36Z",
  "closed_at": "2022-04-06T07:57:17Z",
  "active_lock_reason": null,
  "body": "### Description\n\nIn certain scenarios it's not possible to know all query parameters in advance and to configure these accordingly with the `@QueryParam(\"verbose\")` annotation. Other frameworks offer solutions for this, like annotating a map parameter with a `@RequestParam` annotation: \r\n\r\n```\r\n@RequestMapping(\r\n    path = \"/{id}/assets/with-options\",\r\n    method = RequestMethod.GET\r\n)\r\npublic ResponseEntity<Collection<Asset>> getAssetsWithOptions(\r\n    @PathVariable(\"id\") String name,\r\n    @RequestParam Map<String, String> params\r\n) {\r\n    ...\r\n}\r\n```\r\n\r\nIt would be nice if we would have an option to configure dynamic query paramters in quarkus as well. There is a workaround for this by adding a ClientRequestFilter, i.e: \r\n\r\n```\r\n@Provider\r\npublic class GetMessageBodyFilter implements ClientRequestFilter {\r\n    @Override\r\n    public void filter(ClientRequestContext requestContext) throws IOException {\r\n        if (requestContext.getEntity() instanceof Map && requestContext.getMethod().equals(HttpMethod.GET)) {\r\n            UriBuilder uriBuilder = UriBuilder.fromUri(requestContext.getUri());\r\n            Map allParam = (Map)requestContext.getEntity();\r\n            for (Object key : allParam.keySet()) {\r\n                uriBuilder.queryParam(key.toString(), allParam.get(key));\r\n            }\r\n            requestContext.setUri(uriBuilder.build());\r\n            requestContext.setEntity(null);\r\n        }\r\n    }\r\n}\r\n```\r\nThis method is a bit cumbersome though imo. \n\n### Implementation ideas\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/24764/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24764/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
