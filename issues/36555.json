{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/36555",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/36555/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/36555/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/36555/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/36555",
  "id": 1949646274,
  "node_id": "I_kwDOCFbutM50NT3C",
  "number": 36555,
  "title": "Quarkus Cache: Filter/Interceptor/Transformer for Cached Data",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1808747697,
      "node_id": "MDU6TGFiZWwxODA4NzQ3Njk3",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/cache",
      "name": "area/cache",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 1,
  "created_at": "2023-10-18T12:33:58Z",
  "updated_at": "2023-10-18T12:34:03Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Description\n\nWe are using the Redis Cache extension. We would like to encrypt the data that is cached. Currently we have to:\r\n\r\n```java\r\npublic String getData(String key) {\r\n    return decrypt(getEncryptedData(key));\r\n}\r\n\r\n@CacheResult(cacheName = \"foo\")\r\npublic String getEncryptedData(String key) {\r\n    return encrypt(getRawData(key));\r\n}\r\n\r\npublic String getRawData(String key) {\r\n    return \"foo\";\r\n}\r\n```\r\n\r\nor with the programmatic API:\r\n\r\n```java\r\n@Inject \r\n@CacheName(\"foo\")\r\nCache cache;\r\n\r\npublic Uni<String> getData(Object key) { \r\n    return cache.get(key, k -> { \r\n        return encrypt(getRawData(k));\r\n    }).onItem.transform(data -> decrypt(data));\r\n}\r\n\r\npublic String getRawData(String key) {\r\n    return \"foo\";\r\n}\r\n```\r\n\r\nWe would like to be able to avoid the encrypt/decrypt boilerplate for the cache. Would it be possible to create a filter/interceptor/transformer for caches, similarly to `ContainerRequestFilter` and `ContainerResponseFilter` for JAX-RS?\r\n\r\nAlternatively we were thinking of implementing our own encrypted cache, for example:\r\n\r\n```java\r\n@Inject \r\n@EncryptedCacheName(\"foo\")\r\nCache cache;\r\n\r\npublic Uni<String> getData(Object key) { \r\n    return cache.get(key, k -> { \r\n        return \"foo\";\r\n    });;\r\n}\r\n```\r\n\r\nbut we are unsure if a filter would be a better solution.\n\n### Implementation ideas\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/36555/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/36555/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
