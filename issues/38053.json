{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/38053",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/38053/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/38053/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/38053/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/38053",
  "id": 2066969188,
  "node_id": "I_kwDOCFbutM57M3Jk",
  "number": 38053,
  "title": "Bytebuddy exception when request on a native packege",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 985346625,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjU=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/triage/invalid",
      "name": "triage/invalid",
      "color": "e4e669",
      "default": false,
      "description": "This doesn't seem right"
    },
    {
      "id": 1287515315,
      "node_id": "MDU6TGFiZWwxMjg3NTE1MzE1",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/kotlin",
      "name": "area/kotlin",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 1676631606,
      "node_id": "MDU6TGFiZWwxNjc2NjMxNjA2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/env/windows",
      "name": "env/windows",
      "color": "edea47",
      "default": false,
      "description": "Impacts Windows machines"
    },
    {
      "id": 2497075451,
      "node_id": "MDU6TGFiZWwyNDk3MDc1NDUx",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/native-image",
      "name": "area/native-image",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 2,
  "created_at": "2024-01-05T08:59:48Z",
  "updated_at": "2024-01-05T11:13:26Z",
  "closed_at": "2024-01-05T11:13:19Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\nIntercept methods of a Object using bytebuddy. It's ok on java -jar quarkus-run.jar , but failed on native package when HTTP request.\r\n\r\n\r\n## ERROR log: \r\n```\r\n ERROR [org.acm.com.web.ExceptionHandler] (executor-thread-1) Handling server request exception: java.lang.IllegalStateException: size = 0\r\n        at net.bytebuddy.matcher.FilterableList$AbstractBase.getOnly(FilterableList.java:139)                                                                    \r\n        at net.bytebuddy.implementation.InvocationHandlerAdapter.apply(InvocationHandlerAdapter.java:255)                                                        \r\n        at net.bytebuddy.implementation.InvocationHandlerAdapter$ForInstance$Appender.apply(InvocationHandlerAdapter.java:404)                                   \r\n        at net.bytebuddy.dynamic.scaffold.TypeWriter$MethodPool$Record$ForDefinedMethod$WithBody.applyCode(TypeWriter.java:730)                                  \r\n        at net.bytebuddy.dynamic.scaffold.TypeWriter$MethodPool$Record$ForDefinedMethod$WithBody.applyBody(TypeWriter.java:715)                                  \r\n        at net.bytebuddy.dynamic.scaffold.TypeWriter$MethodPool$Record$ForDefinedMethod.apply(TypeWriter.java:622)\r\n        at net.bytebuddy.dynamic.scaffold.TypeWriter$Default$ForCreation.create(TypeWriter.java:6043)\r\n        at net.bytebuddy.dynamic.scaffold.TypeWriter$Default.make(TypeWriter.java:2224)\r\n        at net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase$UsingTypeWriter.make(DynamicType.java:4055)\r\n        at net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase.make(DynamicType.java:3739)\r\n        at net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase$Delegator.make(DynamicType.java:3991)\r\n        at org.acme.common.orm.SqlBuilder.enforce(SqlBuilder.kt:73)\r\n        at org.acme.common.orm.SqlBuilder.<init>(SqlBuilder.kt:41)\r\n        at org.acme.common.orm.SqlBuilder.<init>(SqlBuilder.kt:31)\r\n        at org.acme.service.system.MenuService.buildQuery(MenuService.kt:31)\r\n        at org.acme.service.system.MenuService.page(MenuService.kt:19)\r\n        at org.acme.service.system.MenuService_ClientProxy.page(Unknown Source)\r\n        at org.acme.controller.system.MenuController.page(MenuController.kt:21)\r\n        at org.acme.controller.system.MenuController$quarkusrestinvoker$page_437cf267b6e230f6794eba46dc3136970caca206.invoke(Unknown Source)\r\n        at org.jboss.resteasy.reactive.server.handlers.InvocationHandler.handle(InvocationHandler.java:29)\r\n        at io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:141)\r\n        at org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)\r\n        at io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:582)\r\n        at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2513)\r\n        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1538)\r\n        at org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)\r\n        at org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)\r\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n        at java.base@21.0.1/java.lang.Thread.runWith(Thread.java:1596)\r\n        at java.base@21.0.1/java.lang.Thread.run(Thread.java:1583)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.thread.PlatformThreads.threadStartRoutine(PlatformThreads.java:832)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.windows.WindowsPlatformThreads.osThreadStartRoutine(WindowsPlatformThreads.java:210)\r\n\r\n```\r\n\r\n\r\n\r\n\r\n## The reason using bytebuddy\r\nI want to a SqlBuilder like this:\r\n\r\n```kotlin\r\nprivate fun buildQuery(menu: SysMenu): Triple<String, Sort, Parameters> {\r\n        val builder = SqlBuilder(menu)\r\n        builder.like(SysMenu::title)\r\n            .like(SysMenu::path)\r\n            .like(SysMenu::component)\r\n            .eq(SysMenu::isHide)\r\n        println(builder.sql())\r\n        println(builder.params.map())\r\n\r\n        return Triple(builder.sql(), SysMenu.SORT_NUM_DESC, builder.params)\r\n\r\n    }\r\n```\r\n\r\nThe SqlBuilder instance proxy the `menu` object as query condition to generate Hibernate QL,\r\n\r\nwhen a SysMenu method lambda called, like `.eq(SysMenu::isHide)` , will append string ` and isHide=:isHide` to hql, and set the value of isHide field from `menu` object to Paramters.\r\n\r\n\r\n## This is my SqlBuilder source code: \r\n\r\n```kotlin\r\npackage org.acme.common.orm\r\n\r\nimport io.quarkus.panache.common.Parameters\r\nimport net.bytebuddy.ByteBuddy\r\nimport net.bytebuddy.dynamic.loading.ClassLoadingStrategy\r\nimport net.bytebuddy.implementation.InvocationHandlerAdapter\r\nimport net.bytebuddy.matcher.ElementMatchers\r\nimport org.acme.entity.system.SysMenu\r\nimport org.hibernate.boot.model.naming.Identifier\r\nimport org.hibernate.boot.model.naming.PhysicalNamingStrategy\r\nimport org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl\r\nimport java.beans.BeanInfo\r\nimport java.beans.Introspector\r\nimport java.lang.reflect.InvocationHandler\r\nimport java.lang.reflect.Method\r\n\r\nclass FieldInterceptor<T>(val builder: SqlBuilder<T>) : InvocationHandler {\r\n    override fun invoke(proxy: Any, method: Method, args: Array<out Any>?): Any? {\r\n\r\n        val value = method.invoke(builder.origin)\r\n        if (value != null) {\r\n            builder.columnName = builder.methodToField[method.name]\r\n                ?: throw Exception(\"Can not find column by getter method: ${method.name}\")\r\n        }\r\n\r\n        return value\r\n    }\r\n\r\n}\r\n\r\nclass SqlBuilder<T>(val origin: T & Any,  val strategy: PhysicalNamingStrategy = PhysicalNamingStrategyStandardImpl()) {\r\n\r\n\r\n\r\n    val builder = StringBuilder(\" 1=1 \")\r\n\r\n    fun sql() = builder.toString()\r\n\r\n    val params = Parameters()\r\n\r\n    val wrapper: T = enforce()\r\n\r\n    var columnName: String = \"bad\"\r\n\r\n    val methodToField: Map<String, String> = methodMapping()\r\n\r\n    private fun methodMapping(): Map<String, String> {\r\n        val map = mutableMapOf<String, String>()\r\n\r\n\r\n        val cls = origin::class.java\r\n        val info: BeanInfo = Introspector.getBeanInfo(cls)\r\n        for (propertyDescriptor in info.propertyDescriptors) {\r\n            val propertyName = propertyDescriptor.name\r\n            propertyDescriptor.readMethod?.let {\r\n                map[it.name] = strategy.toPhysicalColumnName(Identifier.toIdentifier(propertyName), null).text\r\n            } ?: let {\r\n                val trickName = \"is\" + propertyName.first().uppercase() + propertyName.takeLast(propertyName.length - 1)\r\n                val methodName = cls.getDeclaredMethod(trickName).name\r\n                map[methodName] = strategy.toPhysicalColumnName(Identifier.toIdentifier(trickName), null).text\r\n            }\r\n\r\n        }\r\n        println(map)\r\n        return map\r\n    }\r\n\r\n    fun enforce(): T {\r\n        return ByteBuddy()\r\n            .subclass(origin::class.java)\r\n            .method(ElementMatchers.not(ElementMatchers.isDeclaredBy(Object::class.java)))\r\n            .intercept(InvocationHandlerAdapter.of(FieldInterceptor<T>(this)))\r\n            .make()\r\n            .load(FieldInterceptor::class.java.classLoader, ClassLoadingStrategy.Default.WRAPPER)\r\n            .loaded\r\n            .declaredConstructors\r\n            .first()\r\n            .newInstance() as T\r\n\r\n    }\r\n\r\n\r\n    fun lt(call: (T) -> Any?): SqlBuilder<T> {\r\n        val value = call(wrapper)\r\n\r\n        if (value != null) {\r\n            params.and(columnName, value)\r\n            builder.append(\" and $columnName < :$columnName\")\r\n        }\r\n        return this\r\n    }\r\n\r\n    fun gt(call: (T) -> Any?): SqlBuilder<T> {\r\n        val value = call(wrapper)\r\n\r\n        if (value != null) {\r\n            params.and(columnName, value)\r\n            builder.append(\" and $columnName > :$columnName\")\r\n        }\r\n        return this\r\n    }\r\n\r\n    fun le(call: (T) -> Any?): SqlBuilder<T> {\r\n        val value = call(wrapper)\r\n\r\n        if (value != null) {\r\n            params.and(columnName, value)\r\n            builder.append(\" and $columnName <= :$columnName\")\r\n        }\r\n        return this\r\n    }\r\n\r\n    fun ge(call: (T) -> Any?): SqlBuilder<T> {\r\n        val value = call(wrapper)\r\n\r\n        if (value != null) {\r\n            params.and(columnName, value)\r\n            builder.append(\" and $columnName >= :$columnName\")\r\n        }\r\n        return this\r\n    }\r\n\r\n    fun eq(call: (T) -> Any?): SqlBuilder<T> {\r\n        val value = call(wrapper)\r\n\r\n        if (value != null) {\r\n            params.and(columnName, value)\r\n            builder.append(\" and $columnName = :$columnName\")\r\n        }\r\n        return this\r\n    }\r\n\r\n    fun isNull(call: (T) -> Any?): SqlBuilder<T> {\r\n        val value = call(wrapper)\r\n        builder.append(\" and $columnName is NULL\")\r\n        return this\r\n    }\r\n\r\n    fun notNull(call: (T) -> Any?): SqlBuilder<T> {\r\n        val value = call(wrapper)\r\n        builder.append(\" and $columnName is NOT NULL\")\r\n        return this\r\n    }\r\n\r\n    fun inList(call: (T) -> Any?, list: List<Any>): SqlBuilder<T> {\r\n        val value = call(wrapper)\r\n\r\n        params.and(columnName, list)\r\n        builder.append(\" and $columnName in :$columnName\")\r\n        return this\r\n    }\r\n\r\n    fun like(call: (T) -> Any?): SqlBuilder<T> {\r\n        val value = call(wrapper)\r\n\r\n        if (value != null) {\r\n            params.and(columnName, \"%${value}%\")\r\n            builder.append(\" and $columnName like :$columnName\")\r\n        }\r\n        return this\r\n    }\r\n}\r\n\r\nfun main() {\r\n\r\n    val menu = SysMenu()\r\n    menu.isFull = true\r\n    menu.isLink = \"asdf\"\r\n    menu.isHide = false\r\n    menu.title = \"adsf\"\r\n\r\n    val builder = SqlBuilder(menu).lt(SysMenu::sortNum).lt(SysMenu::isHide).lt(SysMenu::isFull).lt(SysMenu::title)\r\n        .lt(SysMenu::isLink)\r\n    print(builder.params.map())\r\n}\r\n\r\n```\r\n\r\n### Expected behavior\r\n\r\nByteBuddy success on native package.\r\n\r\n### Actual behavior\r\n\r\n_No response_\r\n\r\n### How to Reproduce?\r\n\r\nUsing bytebuddy intercept a object at runtime \r\n\r\n### Output of `uname -a` or `ver`\r\n\r\n_No response_\r\n\r\n### Output of `java -version`\r\n\r\n17\r\n\r\n### Quarkus version or git rev\r\n\r\n3.6.3\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nGradle 8.5\r\n\r\n### Additional information\r\n\r\nGraalVM 21.0.1+12.1\r\n\r\n ------------------------------------------------------------ Gradle 8.5 ------------------------------------------------------------ \r\n Build time:   2023-11-29 14:08:57 UTC \r\nRevision:     28aca86a7180baa17117e0e5ba01d8ea9feca598  \r\nKotlin:       1.9.20 \r\nGroovy:       3.0.17 \r\nAnt:          Apache Ant(TM) version 1.10.13 compiled on January 4 2023 \r\nJVM:          17.0.4.1 (Oracle Corporation 17.0.4.1+1-LTS-2) OS:          \r\n Windows 10 10.0 amd64",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/38053/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/38053/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
