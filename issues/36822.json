{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/36822",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/36822/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/36822/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/36822/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/36822",
  "id": 1973668404,
  "node_id": "I_kwDOCFbutM51o8o0",
  "number": 36822,
  "title": "Native image agent integration with JVM mode tests",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 2497075451,
      "node_id": "MDU6TGFiZWwyNDk3MDc1NDUx",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/native-image",
      "name": "area/native-image",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 26,
  "created_at": "2023-11-02T07:30:56Z",
  "updated_at": "2024-04-29T07:16:49Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "# Motivation\r\nQuarkus users that want to integrate new libraries/components into native image process (e.g. [smbj](https://github.com/hierynomus/smbj)), or want to use JDK APIs that require extensive native image configuration to work (e.g. graphical user interfaces), face a considerable challenge coming up with the native image configuration to make their use cases work.\r\n\r\nThese users can tweak their applications to run in JVM mode with the native image agent in order to auto-generate native image configuration that will help them get a head start getting applications to work as native executables. However, this is both cumbersome to do and the configuration produced contains a lot of superfluous configuration that the Quarkus integration takes care of.\r\n\r\nThe aim of the Quarkus native image agent integration is to make the native image agent integration as seamless as possible and to make sure the configuration produced removes, as much as possible, configuration that Quarkus already takes care of.\r\n\r\n# Description\r\nIn this initial native image agent integration, the focus is on the Quarkus users being able to run JVM mode integration tests on Quarkus Maven applications transparently with the native image agent.\r\n\r\nTo do this, a container runtime is necessary because JVM mode integration tests will run using the JVM within the default Mandrel builder container image. This image contains the native image agent libraries required to produce native image configuration, hence avoiding the need for a local Mandrel or GraalVM installation.\r\n\r\n**NOTE**: It is strongly recommended that subsequent native image builds that use the generated configuration are in-container, using the same Mandrel builder container image. Generating native image configuration with the same Mandrel image as the one that builds the native image is the best guarantee to avoid invalid configuration being produced.\r\n\r\nWith a container runtime running, invoke Maven's `verify` goal with `-DskipITs=false -Dquarkus.test.integration-test-profile=test-with-native-agent` to run the JVM mode integration tests and generate the native image configuration. For example:\r\n\r\n```bash\r\n$ ./mvnw verify -DskipITs=false -Dquarkus.test.integration-test-profile=test-with-native-agent\r\n...\r\n[INFO] --- failsafe:3.2.5:integration-test (default) @ new-project ---\r\n...\r\n[INFO] -------------------------------------------------------\r\n[INFO]  T E S T S\r\n[INFO] -------------------------------------------------------\r\n[INFO] Running org.acme.GreetingResourceIT\r\n2024-04-02 12:55:52,837 INFO  [io.qua.tes.com.DefaultDockerContainerLauncher] (main) Executing \"podman run --name quarkus-integration-test-BPkFA -i --rm --user 501:20 -p 8081:8081 -p 8444:8444 --entrypoint java -v /Users/galder/1/mendrugo/metadata/new-project/target:/project --env QUARKUS_LOG_CATEGORY__IO_QUARKUS__LEVEL=INFO --env QUARKUS_HTTP_PORT=8081 --env QUARKUS_HTTP_SSL_PORT=8444 --env TEST_URL=http://localhost:8081 --env QUARKUS_PROFILE=test-with-native-agent --env QUARKUS_TEST_INTEGRATION_TEST_PROFILE=test-with-native-agent quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-21 -agentlib:native-image-agent=access-filter-file=quarkus-access-filter.json,caller-filter-file=quarkus-caller-filter.json,config-output-dir=native-image-agent-base-config, -jar quarkus-app/quarkus-run.jar\"\r\n...\r\n[INFO]\r\n[INFO] --- quarkus:999-SNAPSHOT:native-image-agent (default) @ new-project ---\r\n[INFO] Discovered native image agent generated files in /Users/galder/1/mendrugo/metadata/new-project/target/native-image-agent-final-config\r\n...\r\n\r\n$ cat ./new-project/target/native-image-agent-final-config/reflect-config.json\r\n[\r\n{\r\n  \"name\":\"org.acme.Alice\",\r\n  \"methods\":[{\"name\":\"<init>\",\"parameterTypes\":[] }, {\"name\":\"sayMyName\",\"parameterTypes\":[] }]\r\n},\r\n{\r\n  \"name\":\"org.acme.Bob\"\r\n}\r\n]\r\n```\r\n\r\nTo achieve this output, the native image integration agent follows this process:\r\n\r\nFirst, it generates native image agent configuration filters. These filters exclude commonly used packages in Quarkus applications because native image configurations related to those are not necessary to run the native executable. These filters are expressed in JSON format and are stored inside `target/quarkus-access-filter.json` and `target/quarkus-caller-filter.json` files.\r\n\r\nSecondly, the `java` process that runs the integration tests is enhanced with the following JVM parameters. When the integration tests complete, the `target/native-image-agent-base-config` contains the native image configuration files generated by the agent:\r\n\r\n```bash\r\n-agentlib:native-image-agent=access-filter-file=quarkus-access-filter.json,caller-filter-file=quarkus-caller-filter.json,config-output-dir=native-image-agent-base-config\r\n```\r\n\r\nThirdly, the filters generated in the first step cover most of the native image configuration use cases that Quarkus already takes care of, but resource configuration filtering is not fully working as expected (see [oracle/graal#8417](https://github.com/oracle/graal/issues/8417) for details). So, in this step the resource configuration is trimmed to remove unnecessary resource configuration. All the configuration is then transferred into the `target/native-image-agent-final-config` folder.\r\n\r\n# Informative By Default\r\nBy default the generated native image configuration files are not used by subsequent native image building processes. This precaution is taken to avoid situations where seemingly unrelated actions have unintended consequences on the native executable produced, e.g. disabling randomly failing tests.\r\n\r\nBy informing the developer of the generated native image configuration, they can copy/paste the output into files (or copy the files from the folder) to be stored under source control and evolve as needed. Ideally these files should be stored under the `src/main/resources/META-INF/native-image/<group-id>/<artifact-id>` folder, in which case the native image process will automatically pick them up.\r\n\r\nIt is possible to instruct Quarkus to optionally apply the generated native image configuration files into subsequent native image processes, by setting the `-Dquarkus.native.agent-configuration-apply` property. This can be useful to verify that the native integration tests work as expected, assuming that the JVM unit tests have generated the correct native image configuration.\r\n\r\nIf managing native image agent configuration files manually, it is highly recommended to regenerate them each time a Mandrel version update occurs, because the configuration necessary to make the application work might have varied due to internal Mandrel changes.\r\n\r\n# Debugging Native Image Agent Integration\r\nIf the generated native image agent configuration does not satisfy the needs of Quarkus users, they can obtain more information using any of the following techniques.\r\n\r\n## Debugging Filters\r\nIf native image agent is generating a configuration that it’s not working as expected, you should check that the configuration files include the expected information. For example, if some method happens to be accessed via reflection at runtime and you get an error, you want to verify that the configuration file contains a reflection entry for that method.\r\n\r\nIf the entry is missing, it could be that some call path is being filtered that maybe shouldn’t have been. To verify that, inspect the contents of `target/quarkus-caller-filter.json` and `target/quarkus-access-filter.json` files, and confirm that the class and/or package making the call or being accessed is not being filtered out.\r\n\r\nIf the missing entry is related to some resource, you should inspect the Quarkus build debug output and verify which resource patterns are being discarded, e.g.\r\n\r\n```bash\r\n$ ./mvnw -X verify -DskipITs=false -Dquarkus.test.integration-test-profile=test-with-native-agent\r\n...\r\n[INFO] --- quarkus:999-SNAPSHOT:native-image-agent (default) @ new-project ---\r\n...\r\n[DEBUG] Discarding resources from native image configuration that match the following regular expression: .*(application.properties|java[.\\/](lang|net|nio|time)|jakarta|jboss|logging|logging.properties|microprofile|quarkus|slf4j|smallrye|vertx).*\r\n[DEBUG] Discarded included resource with pattern: \\\\QMETA-INF/microprofile-config.properties\\\\E\r\n[DEBUG] Discarded included resource with pattern: \\\\QMETA-INF/services/io.quarkus.arc.ComponentsProvider\\\\E\r\n...\r\n```\r\n\r\n## Trace Output\r\nA native image agent configuration trace output JSON file can be generated using the following additional system properties:\r\n\r\n```bash\r\n$ ./mvnw verify -DskipITs=false -Dquarkus.test.integration-test-profile=test-with-native-agent -Dquarkus.test.native.agent.output.property.name=trace-output -Dquarkus.test.native.agent.output.property.value=native-image-agent-trace-file.json\r\n```\r\n\r\nWhen trace output is configured, no native image configuration is generated, and instead a `target/native-image-agent-trace-file.json` file is generated that contains trace information. For example:\r\n\r\n```bash\r\n$ tail ./target/native-image-agent-trace-file.json\r\n{\"tracer\":\"reflect\", \"function\":\"newInstance\", \"class\":\"java.lang.reflect.Array\", \"caller_class\":\"java.util.IdentityHashMap$KeySet\", \"result\":\"true\", \"args\":[\"[Lio.netty.util.concurrent.FastThreadLocal;\"]},\r\n...\r\n```\r\n\r\nUnfortunately the trace output does not take into account the applied configuration filters, so the output contains all configuration decisions made by the agent. This is unlikely to change in the near future (see [oracle/graal#7635](https://github.com/oracle/graal/issues/7635)).\r\n\r\n## Configuration With Origins (Experimental)\r\nAlternative to the trace output, it is possible to configure the native image agent with an experimental flag that shows the origins of the configuration entries. You can enable that with the following additional system property:\r\n\r\n```bash\r\n$ ./mvnw clean test -Dnative-with-agent -Dquarkus.test.native.agent.additional.args=experimental-configuration-with-origins\r\n```\r\n\r\nThe origins of the configuration entries can be found in text files inside the `target/native-image-agent-base-config folder`. For example:\r\n\r\n```bash\r\n$ tail ./target/native-image-agent-base-config/reflect-origins.txt\r\n                                            └── org.acme.GreetingResource$quarkusrestinvoker$greeting_709ef95cd764548a2bbac83843a7f4cdd8077016#invoke(java.lang.Object,java.lang.Object[])\r\n                                                └── org.acme.GreetingResource#greeting(java.lang.String)\r\n                                                    └── org.acme.GreetingService_ClientProxy#greeting(java.lang.String)\r\n                                                        └── org.acme.GreetingService#greeting(java.lang.String)\r\n                                                            ├── java.lang.Class#forName(java.lang.String) - [ {   \"name\":\"org.acme.Alice\" }, {   \"name\":\"org.acme.Bob\" } ]\r\n                                                            ├── java.lang.Class#getDeclaredConstructor(java.lang.Class[]) - [ {   \"name\":\"org.acme.Alice\",   \"methods\":[{\"name\":\"<init>\",\"parameterTypes\":[] }] } ]\r\n                                                            ├── java.lang.reflect.Constructor#newInstance(java.lang.Object[]) - [ {   \"name\":\"org.acme.Alice\",   \"methods\":[{\"name\":\"<init>\",\"parameterTypes\":[] }] } ]\r\n                                                            ├── java.lang.reflect.Method#invoke(java.lang.Object,java.lang.Object[]) - [ {   \"name\":\"org.acme.Alice\",   \"methods\":[{\"name\":\"sayMyName\",\"parameterTypes\":[] }] } ]\r\n                                                            └── java.lang.Class#getMethod(java.lang.String,java.lang.Class[]) - [ {   \"name\":\"org.acme.Alice\",   \"methods\":[{\"name\":\"sayMyName\",\"parameterTypes\":[] }] } ]\r\n```\r\n\r\n## Debugging With GDB\r\nThe native image agent itself is a native executable produced with GraalVM that uses JVMTI to intercept the calls that require native image configuration. As a last resort, it is possible to debug the native image agent with GDB, see [here](https://github.com/oracle/graal/blob/master/substratevm/src/com.oracle.svm.agent/README.md) for instructions on how to do that.\r\n\r\n# Testing\r\nA sample Maven project has been created that contains a pom.xml with the new profile under `integration-tests/maven/target/test-classes/projects/native-agent-integration`. The project includes an endpoint that will only succeed if reflection configuration has been generated and applied to the native executable. This is one use case where `-Dquarkus.native.agent-configuration-apply` is used to automate the process of applying the configuration and get confidence that the native image agent integration is working as expected.\r\n\r\n# Future Work\r\n* Integrate native image agent into other Quarkus life cycle targets, e.g. the run target.\r\n* Add support for Gradle applications.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/36822/reactions",
    "total_count": 2,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/36822/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
