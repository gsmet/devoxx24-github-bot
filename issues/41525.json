{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/41525",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41525/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41525/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41525/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/41525",
  "id": 2379094975,
  "node_id": "I_kwDOCFbutM6Nzhu_",
  "number": 41525,
  "title": "Customizing the JSON logging formatter",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1283428650,
      "node_id": "MDU6TGFiZWwxMjgzNDI4NjUw",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/logging",
      "name": "area/logging",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 3,
  "created_at": "2024-06-27T21:08:26Z",
  "updated_at": "2024-07-25T20:21:22Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Description\n\nI use structured (JSON) logging quite a bit and need to be able to modify the properties of log records being generated by the application in order to be able to do filtering on log messages. \r\n\r\nOne specific example is for dealing with exceptions, where I'll pass enum based error codes into any thrown exception, with the enum name being automatically injected into a log record which logged that exception, like in the `label` or `errorCode` property. This allows for exceptions to be filtered / filtered out based on those error codes, making it a lot easier to go through logs. In theory MDC could be used for this, but it feels wrong to add a thread local error code just to have it show up in the one log record that actually prints the exception log.\r\n\r\nWith Logback this is fairly easy, and can be achieved by extending the JsonLayout class it uses. I looked into something similar with Quarkus, and while the [JsonFormatter](https://github.com/quarkusio/quarkus/blob/main/extensions/logging-json/runtime/src/main/java/io/quarkus/logging/json/runtime/JsonFormatter.java#L11) class seems to support this via the [StructuredFormatter#before](https://github.com/jboss-logging/jboss-logmanager/blob/main/src/main/java/org/jboss/logmanager/formatters/StructuredFormatter.java#L176) method as suggested [here](https://groups.google.com/g/wildfly/c/Y3Tt_MaRGEY/m/eHk12BqYBwAJ), there's no easy to extend the Quarkus `JsonFormatter` because it's initialized directly [in the recorder](https://github.com/quarkusio/quarkus/blob/main/extensions/logging-json/runtime/src/main/java/io/quarkus/logging/json/runtime/LoggingJsonRecorder.java#L29).\r\n\r\nThe feature request would be to either allow the `quarkus-logging-json` extension to have alternative implementations (instances of `JsonFormatter`) to be provided to be used by Quarkus to format JSON logs, or an alternative mechanism to augment log records, for example by overriding the `before` method and running optional interceptors (provided via CDI) on the generator / log record.\n\n### Implementation ideas\n\nNot super familiar with recorders and the way formatter creation is implemented right now, playing around with it, I wasn't able to create the `JsonFormatter` instance with an `@ApplicationScoped` `JsonFormatterFactory` class that just creates a new instance and have that be injected into the recorder with a synthetic injection point.\r\n\r\nIf going with a more basic `@Producer` based approach, then either the `Formatter` beans could have `@Default` on them allowing for overrides, or the existing `JsonFormatter` class could override the `before` method and take in a list of `LogRecordInterceptor` implementations, which would be allowed to modify the log record before it's written. I'm not fully familiar with the potential impact in switching from recorders to producers though.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/41525/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41525/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
