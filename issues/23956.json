{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/23956",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/23956/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/23956/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/23956/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/23956",
  "id": 1149834703,
  "node_id": "I_kwDOCFbutM5EiRXP",
  "number": 23956,
  "title": "RestEasy Reactive returns different resource class/method than RestEasy classic",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 2552031458,
      "node_id": "MDU6TGFiZWwyNTUyMDMxNDU4",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/rest",
      "name": "area/rest",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 9,
  "created_at": "2022-02-24T22:33:54Z",
  "updated_at": "2023-01-17T06:17:02Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Describe the bug\n\nI have an Api class and a Resource class:\r\n\r\n```java\r\n@Path(\"/v1/test\")\r\n@Consumes(MediaType.APPLICATION_JSON)\r\n@Produces(MediaType.APPLICATION_JSON)\r\n@Authenticate(value = false)\r\npublic interface Api {\r\n  String echoGet(@NotNull @QueryParam(\"message\") String message);\r\n}\r\n```\r\n\r\n```java\r\n@Singleton\r\n@Provider\r\npublic class Resource implements Api {\r\n\r\n  @Override\r\n  public String echoGet(String message) {\r\n    return new message;\r\n  }\r\n}\r\n```\r\n\r\nAnd I have a ContainerRequestFilter\r\n\r\n```java\r\n@Singleton\r\n@Provider\r\n@Priority(Priorities.AUTHORIZATION)\r\npublic class AuthzContainerRequestFilter implements ContainerRequestFilter {\r\n\r\n  private final ResourceInfo resourceInfo;\r\n\r\n  @Inject\r\n  public AuthzContainerRequestFilter(ResourceInfo resourceInfo) {\r\n    this.resourceInfo = resourceInfo;\r\n  }\r\n\r\n  @Override\r\n  public void filter(ContainerRequestContext reqCtx) {\r\n    boolean requireAuthn;\r\n\r\n    Authenticate annotation = getAuthenticateAnnotation();\r\n    if (annotation != null) {\r\n      requireAuthn = annotation.value();\r\n    } else {\r\n      // the default is authenticate if no annotation\r\n      requireAuthn = true;\r\n    }\r\n\r\n   // code to implement authn\r\n  }\r\n\r\n  /**\r\n   * Get authentication annotation\r\n   *\r\n   * @return relevant authentication\r\n   */\r\n  private Authenticate getAuthenticateAnnotation() {\r\n    Method resourceMethod = resourceInfo.getResourceMethod();\r\n    Authenticate authenticate = resourceMethod.getAnnotation(Authenticate.class);\r\n    if (authenticate != null) {\r\n      return authenticate;\r\n    }\r\n    Class<?> resourceClass = resourceInfo.getResourceClass();\r\n    return resourceClass.getAnnotation(Authenticate.class);\r\n  }\r\n}\r\n\r\n```\r\n\r\nWith RestEasy classic, ```ResourceInfo.getResourceClass()``` returns my Api class.  With RestEasy reactive, the result is my Resource class.\n\n### Expected behavior\n\nI expect RestEasy Reactive to be a drop-in replacement for RestEasy classic, returning the Api class\n\n### Actual behavior\n\nIn RestEasy Reactive, resourceInfo.getResourceMethod() / resourceInfo.getResourceClass() return the Resource class.\n\n### How to Reproduce?\n\nUse above classes.\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\nOver the years, and different jax-rs implementations have had different behaviors.  Sometimes the implementation returns the resource class, sometimes the api class.  I am not sure if the spec actually defines which should be returned.\r\n\r\nI like the Api class/method to be returned.  This way the Api class has annotations which are part of the interface contract.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/23956/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/23956/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
