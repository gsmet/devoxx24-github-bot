{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/37172",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/37172/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/37172/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/37172/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/37172",
  "id": 1998754599,
  "node_id": "I_kwDOCFbutM53IpMn",
  "number": 37172,
  "title": "Kafka transactional sending API behave in an unexpected way",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1341157944,
      "node_id": "MDU6TGFiZWwxMzQxMTU3OTQ0",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/triage/upstream",
      "name": "triage/upstream",
      "color": "7db4d8",
      "default": false,
      "description": "Used for issues which are caused by issues in upstream projects/dependency"
    },
    {
      "id": 1658790125,
      "node_id": "MDU6TGFiZWwxNjU4NzkwMTI1",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/kafka",
      "name": "area/kafka",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 3,
  "created_at": "2023-11-17T10:15:06Z",
  "updated_at": "2024-01-07T09:46:31Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Describe the bug\n\nWe are sending multiple Kafka messages within a Kafka transaction and use the code below to make in synchronous, because we have to know in that location of the code that the message is both accepted. I expected that waiting on the Uni indefinitely do this, and throws if something is not okay.\r\n\r\nThis is injected:\r\nKafkaTransactions<MyDataRecord> messageProducer;\r\n\r\n    private void sendMessages(\r\n        @NotNull final ImmutableList<\r\n            Map.Entry<MyDataRecord, MyCompletionRecord>> simulationChunks) {\r\n        messageProducer.withTransaction(emitter -> {\r\n                simulationChunks\r\n                    .stream()\r\n                    .map(Map.Entry::getKey)\r\n                    .forEach(emitter::send);\r\n\r\n                return Uni\r\n                    .createFrom()\r\n                    .voidItem();\r\n            })\r\n            .await()\r\n            .indefinitely();\r\n    }\r\n\r\nOne example is, if the message is too big, I'll later get a log message from Kafka:\r\nThe message is 95645096 bytes when serialized which is larger than 83886080, which is the value of the max.request.size configuration.\r\n\r\nI want to be able to catch that errors here in the code, or need an other way to catch such errors in a way that I can identify the transaction - because I have to mark the related entity as \"Failed to send\".\r\n\r\nQuarkus version: 3.4.3\n\n### Expected behavior\n\nUni.await().indefinitely() returns only if the message is already sent.\n\n### Actual behavior\n\nSeem to return when the message is only enqueue inside Kafka.\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n17\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/37172/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/37172/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
