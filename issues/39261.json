{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/39261",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39261/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39261/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39261/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/39261",
  "id": 2174086689,
  "node_id": "I_kwDOCFbutM6Ble4h",
  "number": 39261,
  "title": "Support programmatically created OidcClients in custom OIDC Client filters",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1479557456,
      "node_id": "MDU6TGFiZWwxNDc5NTU3NDU2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/oidc",
      "name": "area/oidc",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/299",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/299",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/299/labels",
    "id": 10429739,
    "node_id": "MI_kwDOCFbutM4AnyUr",
    "number": 299,
    "title": "3.9.0.CR1",
    "description": "",
    "creator": {
      "login": "quarkusbot",
      "id": 61254497,
      "node_id": "MDQ6VXNlcjYxMjU0NDk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/61254497?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quarkusbot",
      "html_url": "https://github.com/quarkusbot",
      "followers_url": "https://api.github.com/users/quarkusbot/followers",
      "following_url": "https://api.github.com/users/quarkusbot/following{/other_user}",
      "gists_url": "https://api.github.com/users/quarkusbot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quarkusbot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quarkusbot/subscriptions",
      "organizations_url": "https://api.github.com/users/quarkusbot/orgs",
      "repos_url": "https://api.github.com/users/quarkusbot/repos",
      "events_url": "https://api.github.com/users/quarkusbot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quarkusbot/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 298,
    "state": "closed",
    "created_at": "2024-01-17T09:57:21Z",
    "updated_at": "2024-07-18T12:19:14Z",
    "due_on": null,
    "closed_at": "2024-03-13T12:25:09Z"
  },
  "comments": 1,
  "created_at": "2024-03-07T15:08:45Z",
  "updated_at": "2024-03-08T09:56:06Z",
  "closed_at": "2024-03-08T09:56:04Z",
  "active_lock_reason": null,
  "body": "### Description\n\nLets say an OidcClient created like this:\r\n```\r\n@ApplicationScoped\r\npublic class OidcClientCreator {\r\n\r\n    @Inject\r\n    OidcClients oidcClients;\r\n    @ConfigProperty(name = \"quarkus.oidc.auth-server-url\")\r\n    String oidcProviderAddress;\r\n    @ConfigProperty(name = \"quarkus.oidc.client-id\")\r\n    String oidcClientId;\r\n    @ConfigProperty(name = \"quarkus.oidc.credentials.secret\")\r\n    String oidcClientSecret;\r\n\r\n    private volatile OidcClient oidcClient;\r\n\r\n    public void init(@Observes StartupEvent event) {\r\n        createOidcClient().subscribe().with(client -> {\r\n            oidcClient = client;\r\n        });\r\n    }\r\n\r\n    public OidcClient getOidcClient() {\r\n        return oidcClient;\r\n    }\r\n\r\n    private Uni<OidcClient> createOidcClient() {\r\n        OidcClientConfig cfg = new OidcClientConfig();\r\n        cfg.setId(\"mytestclient\");\r\n        cfg.setAuthServerUrl(oidcProviderAddress);\r\n        cfg.setClientId(oidcClientId);\r\n        cfg.getCredentials().setSecret(oidcClientSecret);\r\n        cfg.getGrant().setType(Type.PASSWORD);\r\n        cfg.setGrantOptions(Map.of(\"password\",\r\n                Map.of(\"username\", \"jdoe\", \"password\", \"jdoe\")));\r\n        return oidcClients.newClient(cfg);\r\n    }\r\n}\r\n```\r\n\r\nIt is currenty impossible to create a custom OidcClientFilter which extends the abstract filters provided by OIDC Client reactive and classic extensions and use this client, while it would be great to do something like:\r\n\r\n```\r\n@Priority(Priorities.AUTHENTICATION)\r\npublic class OidcClientRequestCustomFilter extends AbstractOidcClientRequestReactiveFilter {\r\n\r\n    @Inject\r\n    OidcClientCreator oidcClientCreator;\r\n\r\n    @Override\r\n    protected Optional<OidcClient> client() {\r\n        return Optional.of(oidcClientCreator.getOidcClient());\r\n    }\r\n}\r\n```\r\n\r\nand let the OIDC filter deal with the token acquisition and refresh. \n\n### Implementation ideas\n\nI've been thinking for a while if I should simply update `OidcClients` to record the newly created OidcClient and I've come to the conclusion it should be avoided, for now at least, as `OidcClients` would need to deal with the even if theoretical OOM if the number of dynamic clients grows, while trimming some of them would mean that sometimes the above filter code works and sometimes not.\r\n\r\nSo a short term, simple solution is let custom filter implementations provide an already initialized OidcClient if they have it ",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/39261/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39261/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
