{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/33314",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/33314/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/33314/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/33314/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/33314",
  "id": 1706060513,
  "node_id": "I_kwDOCFbutM5lsGrh",
  "number": 33314,
  "title": "FIPS compliant SmallRye Keystore creation using keytool",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1283619446,
      "node_id": "MDU6TGFiZWwxMjgzNjE5NDQ2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/smallrye",
      "name": "area/smallrye",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 3866841773,
      "node_id": "LA_kwDOCFbutM7me1Kt",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/securepipeline",
      "name": "area/securepipeline",
      "color": "0366d6",
      "default": false,
      "description": "issues related to ensure Quarkus can be used in a secure pipeline setups like FIPS or similar"
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 14,
  "created_at": "2023-05-11T15:32:45Z",
  "updated_at": "2023-05-18T08:19:32Z",
  "closed_at": "2023-05-18T08:19:31Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nWe plan to integrate the recent [SmallRye Keystore](https://github.com/smallrye/smallrye-config/pull/833) to Keycloak. This should allow to us to use a Java Keystore as a Quarkus config source. As far as we understand, the implementation relies on PBE (Password-based Encryption). So for example, a compatible keystore can be generated by the following keytool command:\r\n```\r\nkeytool -importpass -storetype pkcs12 -alias master_smtp__key -keystore myks -storepass keystorepass\r\n```\r\nand right after that you're prompted to **Enter the password to be stored**.\r\n\r\nThis results to a keystore with an Secret Key Entry. This SKE is encrypted with the keystore password (`-storepass` parameter) and the used algorithm is dependant on JDK's implementation. For OpenJDK17 it is `PEWithMD5AndDES`, which according to available resources isn't allowed to use in FIPS strict mode (see e.g. [this paper](https://csrc.nist.gov/CSRC/media/projects/cryptographic-module-validation-program/documents/security-policies/140sp3741.pdf), section 5.2).\r\n\r\n**Can we consider such keystore to be FIPS compliant?**\r\n___\r\n###### Additional info: what we already tried?\r\n\r\nAs per our investigation so far, there is no way to specify a stronger algorithm via keytool. The parameters `-keyalg` and `-keysize` don't have a desired effect. Moreover, as we inspected what Java keytool actually does, it seems that whenever you use PBE, the algorithm is given by a hardcoded value.\r\n\r\nWe also tried to generate such keystore on RHEL9 with FIPS mode enabled while using OpenJDK17. Such environment provides different Java security provider that should be in alignment with FIPS (in our case SunPKCS11-NSS). The generation was successful. What we didn't expect is that such keystore is readable even on non-FIPS machine and again the same `PEWithMD5AndDES` is used.\r\n\r\nElytron seems to overcome this by implementing their own toolset, where first a separate key is generated, which is then used for the encryption of a secret. This also results to a custom keystore and ideally we would like to avoid similar approach.\r\nAlso, we were successful, when it comes to programatically importing a SKE with a stronger algorithm, but again that would require a custom tool to be implemented.\r\n\r\nWe went through all of this just recently, while we were implementing [a new vault SPI in Keycloak](https://github.com/keycloak/keycloak/pull/19644) and we used a similar approach initially.\r\n\r\n### Expected behavior\r\n\r\n_No response_\r\n\r\n### Actual behavior\r\n\r\n_No response_\r\n\r\n### How to Reproduce?\r\n\r\n_No response_\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\n_No response_\r\n\r\n### Output of `java -version`\r\n\r\n_No response_\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n_No response_\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/33314/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/33314/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
