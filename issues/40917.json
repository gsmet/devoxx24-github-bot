{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40917",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40917/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40917/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40917/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/40917",
  "id": 2327532964,
  "node_id": "I_kwDOCFbutM6Ku1Wk",
  "number": 40917,
  "title": "3.11.0 causes carrier thread pinning regression (compared to 3.10.2) while loading classes",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 6031725549,
      "node_id": "LA_kwDOCFbutM8AAAABZ4TT7Q",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/virtual-threads",
      "name": "area/virtual-threads",
      "color": "0366d6",
      "default": false,
      "description": "Issue related to Java's Virtual Threads"
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 75,
  "created_at": "2024-05-31T10:46:30Z",
  "updated_at": "2024-06-26T09:30:34Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nreproducer below\r\n\r\nAfter upgrading my app to 3.11.0 from 3.10.2 and changing nothing else, suddenly I get deadlocks. I turned on virtual thread pinning logs and indeed my carrier threads got pinned. Interestingly enough, there is no `<- monitor` in the stack, so I think this is not caused by synchronization but maybe a native call? This might be related to the class loader changes in 3.11:\r\n\r\n```\r\nPinned thread trace log:\r\n\r\nThread[#67,ForkJoinPool-1-worker-1,5,CarrierThreads]\r\n    java.base/java.lang.VirtualThread$VThreadContinuation.onPinned(VirtualThread.java:185)\r\n    java.base/jdk.internal.vm.Continuation.onPinned0(Continuation.java:393)\r\n    java.base/java.lang.VirtualThread.park(VirtualThread.java:592)\r\n    java.base/java.lang.System$2.parkVirtualThread(System.java:2639)\r\n    java.base/jdk.internal.misc.VirtualThreads.park(VirtualThreads.java:54)\r\n    java.base/java.util.concurrent.locks.LockSupport.park(LockSupport.java:219)\r\n    java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:754)\r\n    java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(AbstractQueuedSynchronizer.java:1079)\r\n    java.base/java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock.lock(ReentrantReadWriteLock.java:738)\r\n    io.quarkus.bootstrap.runner.JarResource.readLockAcquireAndGetJarReference(JarResource.java:156)\r\n    io.quarkus.bootstrap.runner.JarResource.getResourceData(JarResource.java:72)\r\n    io.quarkus.bootstrap.runner.RunnerClassLoader.loadClass(RunnerClassLoader.java:105)\r\n    io.quarkus.bootstrap.runner.RunnerClassLoader.loadClass(RunnerClassLoader.java:71)\r\n    org.acme.GreetingResource.lambda$init$0(GreetingResource.java:32)\r\n    java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)\r\n    java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)\r\n    java.base/java.lang.VirtualThread.run(VirtualThread.java:311)\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nShould not pin carrier threads as before\r\n\r\n### Actual behavior\r\n\r\nPins carrier threads. This happens in parallel in the actual application, so it ends up pinning all threads and deadlocking the application.\r\n\r\n\r\n### How to Reproduce?\r\n\r\nMinimal reproducer:\r\n\r\n```\r\nvar cl = Thread.currentThread()\r\n                .getContextClassLoader();\r\n        System.out.println(cl.getClass());\r\n\r\n        try(var exec = Executors.newVirtualThreadPerTaskExecutor()) {\r\n            for(int i = 0; i < 2; i++) {\r\n                exec.submit(()->{\r\n                    try {\r\n                       cl.loadClass(\"an application class name here\");\r\n                    } catch (Exception e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n```\r\n- Build with maven, then run from target/quarkus-app with -Djdk.tracePinnedThreads=short\r\n- Observe thread pin warnings in the log\r\n- Another weirdness is that even though prinning trace is set to \"short\", it prints full stacks?\r\n\r\n\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nwin64\r\n\r\n### Output of `java -version`\r\n\r\nbuild 21+35-2513\r\n\r\n### Quarkus version or git rev\r\n\r\n3.11.0\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nmvn\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40917/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40917/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
