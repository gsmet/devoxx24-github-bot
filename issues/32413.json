{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/32413",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/32413/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/32413/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/32413/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/32413",
  "id": 1654474982,
  "node_id": "I_kwDOCFbutM5inUjm",
  "number": 32413,
  "title": "Feature Request: Quarkus Caching Hooks ",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1808747697,
      "node_id": "MDU6TGFiZWwxODA4NzQ3Njk3",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/cache",
      "name": "area/cache",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 3,
  "created_at": "2023-04-04T19:45:53Z",
  "updated_at": "2023-04-05T15:25:44Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nI'd like to watch for the expiration of data within a Quarkus Cache. When an entry expires and is ejected from cache, I'd like the key and value being ejected to be passed to a custom hook so that I may perform some action. \r\n\r\nUse case: I have an upstream database that provides data to my service. Its caching options are much more simplistic than my Quarkus application's caching options. Via my Quarkus service I can tell that upstream service to cache data for me and I can set an expiration time and that's it. Basically an expire after write. I can also tell this external database to drop cached results. Unfortunately there's no way for me to trigger this external service to drop results without a scheduled method. It would be cool if I could cache a reference to the stored results and when my reference cache expires after access, I could trigger the remote service to drop its cache as well.\r\n\r\n\r\n### Implementation ideas\r\n\r\nI'm not great at writing hooks and callbacks but here's a quick idea of how this could look based on what I know about Quarkus.\r\n\r\n```java\r\n@CacheExpirationHook(cacheName=\"my-cache\")\r\nvoid onMyCacheValueEjection(String key, SomeType value) {\r\n    // key and value are passed from the cache's triggered expiration event\r\n    // tell remote service to drop cache\r\n    // do some other things here\r\n}\r\n```\r\n\r\n```java\r\n@CacheHook(cacheName=\"my-cache\")\r\nvoid onMyCacheValueEjection(@Observes cacheEjectionEvent ejected) {\r\n    ejected.getKey();    // The key ejected from cache\r\n    ejected.getValue(); // The value ejected from cache\r\n    // tell remote service to drop cache\r\n    // do some other things here\r\n}\r\n```",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/32413/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/32413/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
