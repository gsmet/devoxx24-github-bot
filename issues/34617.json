{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/34617",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34617/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34617/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34617/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/34617",
  "id": 1794826344,
  "node_id": "I_kwDOCFbutM5q-uBo",
  "number": 34617,
  "title": "RR should have an easy way to overriding the response in case of UnauthorizedException",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1282139374,
      "node_id": "MDU6TGFiZWwxMjgyMTM5Mzc0",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/security",
      "name": "area/security",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 2552031458,
      "node_id": "MDU6TGFiZWwyNTUyMDMxNDU4",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/rest",
      "name": "area/rest",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 7,
  "created_at": "2023-07-08T07:36:08Z",
  "updated_at": "2023-10-11T13:29:02Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Description\n\nThis is a common behavior on web-apps.\r\n\r\nThis is my current workaround with Renarde (also supporting htmx). We could also deal with this in Renarde?\r\n```java\r\n@ApplicationScoped\r\npublic class MyUnauthorizedExceptionMapper {\r\n\r\n    @Inject\r\n    TenantResolver tenantResolver;\r\n\r\n    @Inject\r\n    protected HttpHeaders httpHeaders;\r\n\r\n    UnauthorizedExceptionMapper delegate = new UnauthorizedExceptionMapper();\r\n\r\n    @ServerExceptionMapper(value = UnauthorizedException.class, priority = 1)\r\n    public Uni<Response> handle(RoutingContext routingContext) {\r\n        var tenant = tenantResolver.resolve(routingContext);\r\n        if (tenant == null) {\r\n            final URI uri = Router.getURI(GameController::index);\r\n            if (Objects.equals(httpHeaders.getHeaderString(HX_REQUEST_HEADER), \"true\")) {\r\n              return Uni.createFrom().item(Response.status(Response.Status.UNAUTHORIZED).header(HxController.HxResponseHeader.LOCATION.key(), uri).build());\r\n            }\r\n            return Uni.createFrom().item(Response.seeOther(uri).build());\r\n        } else {\r\n            return delegate.handle(routingContext);\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n\r\nA few people looking for this:\r\n- https://stackoverflow.com/questions/69917699/quarkus-provide-redirect-url-if-not-authenticated\r\n- Similar issue https://github.com/quarkusio/quarkus/issues/30893\n\n### Implementation ideas\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/34617/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34617/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
