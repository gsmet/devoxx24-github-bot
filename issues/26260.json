{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/26260",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/26260/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/26260/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/26260/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/26260",
  "id": 1278467000,
  "node_id": "I_kwDOCFbutM5MM9u4",
  "number": 26260,
  "title": "ContextNotActiveException on Quarkus Amazon Lambda with Mutiny",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 985346625,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjU=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/triage/invalid",
      "name": "triage/invalid",
      "color": "e4e669",
      "default": false,
      "description": "This doesn't seem right"
    },
    {
      "id": 1283619446,
      "node_id": "MDU6TGFiZWwxMjgzNjE5NDQ2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/smallrye",
      "name": "area/smallrye",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 1326073020,
      "node_id": "MDU6TGFiZWwxMzI2MDczMDIw",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/amazon-lambda",
      "name": "area/amazon-lambda",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 2236476067,
      "node_id": "MDU6TGFiZWwyMjM2NDc2MDY3",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/mutiny",
      "name": "area/mutiny",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 12,
  "created_at": "2022-06-21T13:38:31Z",
  "updated_at": "2023-02-14T07:52:09Z",
  "closed_at": "2022-06-29T13:34:59Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nI implemented a Lambda Handler which starts two sub-processes in parallel as `Uni`. Each of them needs to access an Hibernate ORM repository during it's execution.\r\nIt works fine during unit testing with `@QuarkusTest`, but I got a ContextNotActive exception when running in native mode on Lambda Environment:\r\n```\r\njava.util.concurrent.CompletionException: javax.enterprise.context.ContextNotActiveException: RequestScoped context was not active when trying to obtain a bean instance for a client proxy of CLASS bean [class=io.quarkus.hibernate.orm.runtime.RequestScopedSessionHolder, id=2e78d4b7bda9238bd6c5d2c7f0174721de4db481]\\n\\t- you can activate the request context for a specific method using the @ActivateRequestContext interceptor binding\\n\\tat java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:331)\\n\\tat java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:346)\\n\\tat java.util.concurrent.CompletableFuture$BiRelay.tryFire(CompletableFuture.java:1423)\\n\\tat java.util.concurrent.CompletableFuture$CoCompletion.tryFire(CompletableFuture.java:1144)\\n\\tat java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)\\n\\tat java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2088)\\n\\tat io.smallrye.context.CompletableFutureWrapper.lambda$new$0(CompletableFutureWrapper.java:37)\\n\\tat java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:859)\\n\\tat java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:837)\\n\\tat java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)\\n\\tat java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:2088)\\n\\tat io.smallrye.context.impl.wrappers.SlowContextualConsumer.accept(SlowContextualConsumer.java:21)\\n\\tat io.smallrye.mutiny.helpers.UniCallbackSubscriber.onFailure(UniCallbackSubscriber.java:65)\\n\\tat io.smallrye.mutiny.operators.uni.UniOperatorProcessor.onFailure(UniOperatorProcessor.java:54)\\n\\tat io.smallrye.mutiny.operators.uni.UniOnItemConsume$UniOnItemComsumeProcessor.invokeEventHandler(UniOnItemConsume.java:82)\\n\\tat io.smallrye.mutiny.operators.uni.UniOnItemConsume$UniOnItemComsumeProcessor.onItem(UniOnItemConsume.java:42)\\n\\tat io.smallrye.mutiny.operators.uni.UniEmitOn$UniEmitOnProcessor.lambda$onItem$0(UniEmitOn.java:34)\\n\\tat io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:555)\\n\\tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2449)\\n\\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1478)\\n\\tat org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:29)\\n\\tat org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:29)\\n\\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\\n\\tat java.lang.Thread.run(Thread.java:829)\\n\\tat com.oracle.svm.core.thread.JavaThreads.threadStartRoutine(JavaThreads.java:597)\\n\\tat com.oracle.svm.core.posix.thread.PosixJavaThreads.pthreadStartRoutine(PosixJavaThreads.java:194)\\nCaused by: javax.enterprise.context.ContextNotActiveException: RequestScoped context was not active when trying to obtain a bean instance for a client proxy of CLASS bean [class=io.quarkus.hibernate.orm.runtime.RequestScopedSessionHolder, id=2e78d4b7bda9238bd6c5d2c7f0174721de4db481]\\n\\t- you can activate the request context for a specific method using the @ActivateRequestContext interceptor binding\\n\\tat io.quarkus.arc.impl.ClientProxies.getDelegate(ClientProxies.java:53)\\n\\tat io.quarkus.hibernate.orm.runtime.RequestScopedSessionHolder_ClientProxy.arc$delegate(Unknown Source)\\n\\tat io.quarkus.hibernate.orm.runtime.RequestScopedSessionHolder_ClientProxy.getOrCreateSession(Unknown Source)\\n\\tat io.quarkus.hibernate.orm.runtime.session.TransactionScopedSession.acquireSession(TransactionScopedSession.java:104)\\n\\tat io.quarkus.hibernate.orm.runtime.session.TransactionScopedSession.createQuery(TransactionScopedSession.java:344)\\n\\tat io.quarkus.hibernate.orm.runtime.session.ForwardingSession.createQuery(ForwardingSession.java:168)\\n\\tat io.quarkus.hibernate.orm.runtime.session.ForwardingSession.createQuery(ForwardingSession.java:47)\\n\\tat org.hibernate.Session_5b93bee577ae2f8d76647de04cfab36afbf52958_Synthetic_ClientProxy.createQuery(Unknown Source)\\n\\tat io.quarkus.hibernate.orm.panache.common.runtime.CommonPanacheQueryImpl.createBaseQuery(CommonPanacheQueryImpl.java:333)\\n\\tat io.quarkus.hibernate.orm.panache.common.runtime.CommonPanacheQueryImpl.createQuery(CommonPanacheQueryImpl.java:309)\\n\\tat io.quarkus.hibernate.orm.panache.common.runtime.CommonPanacheQueryImpl.firstResult(CommonPanacheQueryImpl.java:254)\\n\\tat io.quarkus.hibernate.orm.panache.common.runtime.CommonPanacheQueryImpl.firstResultOptional(CommonPanacheQueryImpl.java:263)\\n\\tat io.quarkus.hibernate.orm.panache.runtime.PanacheQueryImpl.firstResultOptional(PanacheQueryImpl.java:164)\\n\\tat it.friendshome.notification.job.repository.NotificationJobRepository.findByEntityType(NotificationJobRepository.java:14)\\n\\tat it.friendshome.notification.job.repository.NotificationJobRepository_ClientProxy.findByEntityType(Unknown Source)\\n\\tat it.friendshome.notification.job.handler.NotificationJobHandler.getNotificationJob(NotificationJobHandler.java:88)\\n\\tat it.friendshome.notification.job.handler.NotificationJobHandler.activeSearchJob(NotificationJobHandler.java:98)\\n\\tat it.friendshome.notification.job.handler.NotificationJobHandler.lambda$handleRequest$0(NotificationJobHandler.java:80)\\n\\tat io.smallrye.mutiny.groups.UniOnItem.lambda$invoke$0(UniOnItem.java:59)\\n\\tat io.smallrye.context.impl.wrappers.SlowContextualConsumer.accept(SlowContextualConsumer.java:21)\\n\\tat io.smallrye.mutiny.operators.uni.UniOnItemConsume$UniOnItemComsumeProcessor.invokeEventHandler(UniOnItemConsume.java:77)\\n\\tat io.smallrye.mutiny.operators.uni.UniOnItemConsume$UniOnItemComsumeProcessor.onItem(UniOnItemConsume.java:42)\\n\\tat io.smallrye.mutiny.operators.uni.UniEmitOn$UniEmitOnProcessor.lambda$onItem$0(UniEmitOn.java:34)\\n\\tat io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:555)\\n\\tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2449)\\n\\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1452)\\n\\t... 6 more\\n\",\r\n    \"errorType\": \"java.util.concurrent.CompletionException\",\r\n    \"errorMessage\": \"javax.enterprise.context.ContextNotActiveException: RequestScoped context was not active when trying to obtain a bean instance for a client proxy of CLASS bean [class=io.quarkus.hibernate.orm.runtime.RequestScopedSessionHolder, id=2e78d4b7bda9238bd6c5d2c7f0174721de4db481]\\n\\t- you can activate the request context for a specific method using the @ActivateRequestContext interceptor binding\r\n```\r\nThis is the handler implementation:\r\n\r\n```java\r\n@Named(\"notification-job\")\r\n@Slf4j\r\npublic class NotificationJobHandler implements RequestHandler {\r\n\r\n    private static final ICommunicationService NOTIFICATION_SERVICE =\r\n            CommunicationManagerFactory.build(CommunicationType.PUSH);\r\n    private final NotificationJobRepository notificationJobRepository;\r\n    private final InsertionRepository insertionRepository;\r\n    private final SearchRepository searchRepository;\r\n    private final ElasticsearchService elasticsearchService;\r\n\r\n    public NotificationJobHandler(NotificationJobRepository notificationJobRepository, InsertionRepository insertionRepository, SearchRepository searchRepository, ElasticsearchService elasticsearchService) {\r\n        this.notificationJobRepository = notificationJobRepository;\r\n        this.insertionRepository = insertionRepository;\r\n        this.searchRepository = searchRepository;\r\n        this.elasticsearchService = elasticsearchService;\r\n    }\r\n\r\n@Override\r\n    public Object handleRequest(Object input, Context context) {\r\n        var activeSearchUni = Uni.createFrom().voidItem().emitOn(Infrastructure.getDefaultExecutor()).invoke(() -> this.activeSearchJob()).runSubscriptionOn(Infrastructure.getDefaultExecutor()).subscribeAsCompletionStage();\r\n        var insertionUni = Uni.createFrom().voidItem().emitOn(Infrastructure.getDefaultExecutor()).invoke(() -> this.insertionJob()).runSubscriptionOn(Infrastructure.getDefaultExecutor()).subscribeAsCompletionStage();\r\n        CompletableFuture.allOf(activeSearchUni, insertionUni).join();\r\n        //Uni.join().all(this.activeSearchJob(), this.insertionJob()).andCollectFailures();\r\n        return null;\r\n    }\r\n\r\nprivate NotificationJob getNotificationJob(EntityType entityType) {\r\n        return this.notificationJobRepository.findByEntityType(EntityType.ACTIVE_SEARCH)\r\n                .orElse(new NotificationJob()\r\n                        .setEntityType(entityType)\r\n                        .setLastRunStart(LocalDateTime.of(1970, 01, 01, 00, 00))\r\n                );\r\n    }\r\n\r\n    @Transactional\r\n    private void activeSearchJob() {\r\n        log.info(\"START active search notification job\");\r\n\r\n        var notificationJob = this.getNotificationJob(EntityType.ACTIVE_SEARCH);\r\n        LocalDateTime now = LocalDateTime.now();\r\n        var newSearches = Multi.createFrom().items(this.searchRepository.findByCreatedBetween(notificationJob.getLastRunStart(), now));\r\n\r\n        newSearches.onItem().transformToMultiAndMerge(search -> {\r\n                            var currentInsertionList = new ArrayList<Insertion>();\r\n                            int currentPage = 1;\r\n                            SearchExecutionResponse response = null;\r\n                            do {\r\n                                response = this.elasticsearchService.executeSearchBySavedSearch(SearchExecutionRequest.builder()\r\n                                        .entityId(search.getId())\r\n                                        .searchType(SearchType.INSERTION)\r\n                                        .pageNumber(currentPage)\r\n                                        .rows(1000)\r\n                                        .build());\r\n\r\n                                currentInsertionList.addAll((Collection<? extends Insertion>) response.getItems());\r\n\r\n                            } while (response.getTotalPages() > currentPage++);\r\n\r\n                            return Multi.createFrom().items(currentInsertionList.stream());\r\n                        }\r\n                )\r\n                .select()\r\n                .distinct()\r\n                .subscribe().with(insertion ->\r\n                        NOTIFICATION_SERVICE.send(NotificationCommunication.builder()\r\n                                        .notificationType(NotificationType.EVENT)\r\n                                        .message(\"Great news! New compatible profiles for your listing!\") //TODO: message\r\n                                        .title(\"Newsletter\") //TODO: title\r\n                                        .data(Map.of(\"type\", \"missing_insertions\"))\r\n                                        .profileId(insertion.getProfileId())\r\n                                        .build()\r\n                                , CommunicationMode.SYNC));\r\n\r\n        notificationJob.setLastRunStart(now);\r\n        notificationJob.setLastRunEnd(LocalDateTime.now());\r\n\r\n        this.notificationJobRepository.persist(notificationJob);\r\n        log.info(\"END active search notification job\");\r\n    }\r\n\r\n    @Transactional\r\n    private void insertionJob() {\r\n        log.info(\"START insertion notification job\");\r\n\r\n        var notificationJob = this.getNotificationJob(EntityType.INSERTION);\r\n        LocalDateTime now = LocalDateTime.now();\r\n        var newInsertions = Multi.createFrom().items(this.insertionRepository.findByCreatedBetween(notificationJob.getLastRunStart(), now));\r\n\r\n        newInsertions.onItem().transformToMultiAndMerge(insertion -> {\r\n                    var currentItemsList = new ArrayList<Search>();\r\n                    int currentPage = 1;\r\n                    SearchExecutionResponse response = null;\r\n                    do {\r\n                        response = this.elasticsearchService.executeSearchByInsertion(SearchExecutionRequest.builder()\r\n                                .entityId(insertion.getId())\r\n                                .searchType(SearchType.SAVED_SEARCH)\r\n                                .pageNumber(currentPage)\r\n                                .rows(1000)\r\n                                .build());\r\n\r\n                        currentItemsList.addAll((Collection<? extends Search>) response.getItems());\r\n\r\n                    } while (response.getTotalPages() > currentPage++);\r\n\r\n                    return Multi.createFrom().items(currentItemsList.stream());\r\n                })\r\n                .select()\r\n                .distinct()\r\n                .subscribe().with(search -> {\r\n                    NOTIFICATION_SERVICE.send(NotificationCommunication.builder()\r\n                                    .notificationType(NotificationType.EVENT)\r\n                                    .message(\"Great news! New compatible listings in your area!\") //TODO: message\r\n                                    .title(\"Newsletter\") //TODO: title\r\n                                    .data(Map.of(\"type\", \"missing_searches\"))\r\n                                    .profileId(search.getProfileId())\r\n                                    .build()\r\n                            , CommunicationMode.SYNC);\r\n                });\r\n\r\n\r\n        notificationJob.setLastRunStart(now);\r\n        notificationJob.setLastRunEnd(LocalDateTime.now());\r\n\r\n        this.notificationJobRepository.persist(notificationJob);\r\n        log.info(\"END insertion notification job\");\r\n\r\n    }\r\n\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe handler should not throw an exeption\r\n\r\n### Actual behavior\r\n\r\n_No response_\r\n\r\n### How to Reproduce?\r\n\r\n_No response_\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nLinux CH-ADN-3DVB3F3 5.10.16.3-microsoft-standard-WSL2 #1 SMP Fri Apr 2 22:23:49 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n### Output of `java -version`\r\n\r\nopenjdk version \"17.0.2\" 2022-01-18 OpenJDK Runtime Environment Temurin-17.0.2+8 (build 17.0.2+8) OpenJDK 64-Bit Server VM Temurin-17.0.2+8 (build 17.0.2+8, mixed mode, sharing)\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n2.9.2.Final\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\nHere the dependencies from pom of the project:\r\n```xml\r\n<dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-mutiny</artifactId>\r\n        </dependency>\r\n\r\n        <!-- Context Propagation extension -->\r\n        <dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-smallrye-context-propagation</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <version>${lombok.version}</version>\r\n            <scope>provided</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-amazon-lambda</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.rest-assured</groupId>\r\n            <artifactId>rest-assured</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-junit5</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-junit5-mockito</artifactId>\r\n            <scope>test</scope>\r\n        </dependency>\r\n```",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/26260/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/26260/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
