{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/33309",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/33309/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/33309/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/33309/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/33309",
  "id": 1705890643,
  "node_id": "I_kwDOCFbutM5lrdNT",
  "number": 33309,
  "title": "Support @ObservesAsync run after event fire transactional committed",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1282102389,
      "node_id": "MDU6TGFiZWwxMjgyMTAyMzg5",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/arc",
      "name": "area/arc",
      "color": "0366d6",
      "default": false,
      "description": "Issue related to ARC (dependency injection)"
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 18,
  "created_at": "2023-05-11T14:07:44Z",
  "updated_at": "2023-08-31T14:13:41Z",
  "closed_at": "2023-08-31T14:13:41Z",
  "active_lock_reason": null,
  "body": "### Description\n\n```java\r\n@Transactional\r\npublic void update(UpdateStockCommand command) {\r\n     var entity = new AEntity(); \r\n     repository.persist(entity)\r\n    event.fireAsync(new AEvent(entity.getId()));    <----- fire event in here\r\n   //some business code\r\n}\r\n```\r\n\r\n```java\r\npublic void onEvent(@ObservesAsync AEvent event){\r\n   repository.findById(event.getId());      <----- here maybe can not found entity when fire transactional not committed\r\n}\r\n```\n\n### Implementation ideas\n\nAdd some annotation mark @ObservesAsync like @Observes but async, like flow code\r\n\r\n```java\r\npublic void onEvent(@ObservesAsync @TransactionPhase(during = AFTER_SUCCESS) AEvent event) {\r\n}\r\n```",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/33309/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/33309/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
