{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/32834",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/32834/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/32834/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/32834/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/32834",
  "id": 1679178980,
  "node_id": "I_kwDOCFbutM5kFjzk",
  "number": 32834,
  "title": "Provide default OIDC static tenant resolver",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1479557456,
      "node_id": "MDU6TGFiZWwxNDc5NTU3NDU2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/oidc",
      "name": "area/oidc",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/250",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/250",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/250/labels",
    "id": 9407630,
    "node_id": "MI_kwDOCFbutM4Aj4yO",
    "number": 250,
    "title": "3.2.0.CR1",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 244,
    "state": "closed",
    "created_at": "2023-05-17T07:29:12Z",
    "updated_at": "2023-11-15T13:59:38Z",
    "due_on": null,
    "closed_at": "2023-06-21T13:08:09Z"
  },
  "comments": 1,
  "created_at": "2023-04-21T22:33:10Z",
  "updated_at": "2023-05-19T12:28:50Z",
  "closed_at": "2023-05-19T12:28:45Z",
  "active_lock_reason": null,
  "body": "### Description\n\nA typical case, when more than one social provider is configured in `application.properties`, is to start a login process with the last path segment containing the tenant name, for example, given these 2 tenant declarations:\r\n```\r\nquarkus.oidc.google.provider=google\r\nquarkus.oidc.google.client-id=...\r\nquarkus.oidc.google.credentials.secret=..\r\n\r\nquarkus.oidc.github.provider=github\r\nquarkus.oidc.github.client-id=...\r\nquarkus.oidc.github.credentials.secret=..\r\n```\r\n\r\nThe UI will offer Google and GitHub login options with URLs like `/service/login/google`,  `/service/login/github`, etc, giving Quarkus a hint which social provider to use.\r\n\r\nHowever, right now, a user has to register a custom `TenantResolver` which will just get the last path segment from the request path, and use it as a value of the tenant id, and then when the authenticated user returns accessing some application URL, a tenant id property can be checked in `RequestContext` since the tenant id is encoded in the session cookie. It is a fairly typical, boilerplate code. \r\n\r\nIt would be useful to provide such a logic by default if no custom `TenantResolver` is available.\n\n### Implementation ideas\n\nIf non-default OIDC tenants are configured but no `TenantResolver` is registered, provide a default resolution logic which will 1) check `RoutingContext` `tenantId` attribute - if it exists - the user is already authenticated, return it 2) otherwise get the last path segment and offer it as a tenant id.\r\n ",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/32834/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/32834/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
