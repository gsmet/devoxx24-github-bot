{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40562",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40562/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40562/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40562/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/40562",
  "id": 2290262284,
  "node_id": "I_kwDOCFbutM6IgqEM",
  "number": 40562,
  "title": "Support OIDC Redirect filters",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1479557456,
      "node_id": "MDU6TGFiZWwxNDc5NTU3NDU2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/oidc",
      "name": "area/oidc",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/331",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/331",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/331/labels",
    "id": 11082251,
    "node_id": "MI_kwDOCFbutM4AqRoL",
    "number": 331,
    "title": "3.11.0",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 12,
    "state": "closed",
    "created_at": "2024-05-21T16:28:28Z",
    "updated_at": "2024-08-14T12:05:38Z",
    "due_on": null,
    "closed_at": "2024-05-22T13:25:44Z"
  },
  "comments": 1,
  "created_at": "2024-05-10T19:05:03Z",
  "updated_at": "2024-05-21T16:30:28Z",
  "closed_at": "2024-05-17T16:42:30Z",
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nQuarkus OIDC already has `OidcRequestFilter` which can be used to intercept direct requests to various OIDC endpoints.\r\n\r\nBut redirects to  OIDC authorization or logout endpoints, or local redirects to the error or session expired pages can not be intercepted.\r\n\r\nIn the latter case, when, for example, a user whose session has expired, is redirected to the session expired page, it is impossible to generate such a page correctly when multiple OIDC tenants are involved, for example, given Keycloak and Auth0, the session expired page handler does not know where to link the user to, for this user to initiate a provider specific re-authentication.\r\nThe custom redirect filter can help by creating a secure cookie capturing the tenant info and the session expired page handler can use it to create a correct re-authentication link.\r\n\r\nOr users may want to intercept redirects to the OIDC authorization endpoint itself, for example, to add some extra redirect parameters dynamically or set extra headers etc, as tried in #40547.\r\n\r\nNote, currently, we have `AuthenticationRedirectException` but I'm not sure we should look at mapping such exceptions at the JAX-RS level as a standard recommended solution, as the way to manage such redirects. It won't work anyway for the multi-tenant OIDC setup since  `AuthenticationRedirectException` can not be made aware of the OIDC tenant config. \r\n\r\nCC @pedroigor @gastaldi @calvernaz\r\n\r\n### Implementation ideas\r\n\r\nAdd `OidcRedirectFilter`, use `@TenantFeature` to bind it to specific tenants if needed",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40562/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 1,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40562/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
