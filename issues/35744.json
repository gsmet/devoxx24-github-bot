{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/35744",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/35744/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/35744/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/35744/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/35744",
  "id": 1882023871,
  "node_id": "I_kwDOCFbutM5wLWe_",
  "number": 35744,
  "title": "Revisit API for BeanContainer",
  "labels": [
    {
      "id": 1282102389,
      "node_id": "MDU6TGFiZWwxMjgyMTAyMzg5",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/arc",
      "name": "area/arc",
      "color": "0366d6",
      "default": false,
      "description": "Issue related to ARC (dependency injection)"
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/274",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/274",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/274/labels",
    "id": 9889574,
    "node_id": "MI_kwDOCFbutM4Alucm",
    "number": 274,
    "title": "3.5.0.CR1",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 229,
    "state": "closed",
    "created_at": "2023-09-06T06:54:19Z",
    "updated_at": "2023-11-01T08:32:25Z",
    "due_on": null,
    "closed_at": "2023-10-11T12:10:19Z"
  },
  "comments": 0,
  "created_at": "2023-09-05T13:48:18Z",
  "updated_at": "2023-09-12T06:53:33Z",
  "closed_at": "2023-09-12T06:53:29Z",
  "active_lock_reason": null,
  "body": "Currently, the `BeanContainer` methods for bean resolution are pretty confusing for users.\r\nThe way it works is that a bean resolution is attempted and if there is no bean found, a default fallback is executed. However, this fallback is pretty simplistic and tries to instantiate an object via no-arg constructor which may or may not exist.\r\n\r\nThe current javadoc also seems to be fumbled now that I read it again (which is something I might have butchered back then) - the deprecated version should be the one that doesn't throw ambig. dep. exception which isn't quite clear now.\r\n\r\nWe could do some (or more) of the following:\r\n* Deprecate all bean resolving methods in this API and eventually delete them\r\n  * The `beanInstance` and the `beanInstanceFactory` methods\r\n* Introduce a method providing access to Arc container\r\n  * Basically just returning `Arc.container()`; user can do the rest from there\r\n* Retain `beanInstance` but change it's behavior so that it either returns the bean or `null` leaving user to handle the fallback in whichever way they want to\r\n  * We could still deprecate/drop the `beanInstanceFactory` method in this case\r\n\r\nPersonally, I'd deprecate current methods and introduced two new ones:\r\n* One a convenient access method to `ArcContainer`\r\n* The other similar to `beanInstance` but well defined in that it performs a lookup, resolves ambiguity but in case no bean is found allows user to handle `null` whichever way they choose to\r\n\r\nWhile at it, we should also look into internal usage of `BeanContainerBuildItem` - this is still useful to detect a 'container-ready' state in `STATIC_INIT` but has no real value in `RUNTIME_INIT` as the container is always active at that point in time.\r\nFor instance `AmazonLambdaProcessor` depends on this item for no real reason.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/35744/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/35744/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
