{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/24008",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24008/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24008/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24008/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/24008",
  "id": 1154073857,
  "node_id": "I_kwDOCFbutM5EycUB",
  "number": 24008,
  "title": "Apicurio Registry DevService cannot be used by multiple Quarkus services ",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1658790125,
      "node_id": "MDU6TGFiZWwxNjU4NzkwMTI1",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/kafka",
      "name": "area/kafka",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/177",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/177",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/177/labels",
    "id": 7744225,
    "node_id": "MI_kwDOCFbutM4Adirh",
    "number": 177,
    "title": "2.7.4.Final",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 52,
    "state": "closed",
    "created_at": "2022-03-07T18:44:04Z",
    "updated_at": "2022-03-09T17:55:29Z",
    "due_on": null,
    "closed_at": "2022-03-09T17:55:29Z"
  },
  "comments": 4,
  "created_at": "2022-02-28T13:10:28Z",
  "updated_at": "2022-03-08T18:04:33Z",
  "closed_at": "2022-03-08T08:46:30Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\n\nCurrently I'm trying to connect two simple Quarkus services using the default DevServices as Kafka broker and schema registry.  According to the logs both services can successfully find the DevServices, which are automatically started by Quarkus. However, by trying to send a first message into the configured topic the following error occurs:\r\n\r\n```\r\nERROR [io.sma.rea.mes.kafka] (smallrye-kafka-producer-thread-0) SRMSG18260: Unable to recover from the serialization failure (topic: movies), configure a SerializationFailureHandler to recover from errors.: io.vertx.core.VertxException: Invalid url: localhost:64263/apis/registry/v2/groups/default/artifacts?ifExists=RETURN_OR_UPDATE&canonical=false\r\n        at io.vertx.core.http.RequestOptions.parseUrl(RequestOptions.java:357)\r\n        at io.vertx.core.http.RequestOptions.setAbsoluteURI(RequestOptions.java:370)\r\n        at io.apicurio.rest.client.VertxHttpClient.sendRequest(VertxHttpClient.java:74)\r\n        at io.apicurio.registry.rest.client.impl.RegistryClientImpl.createArtifact(RegistryClientImpl.java:236)\r\n        at io.apicurio.registry.rest.client.RegistryClient.createArtifact(RegistryClient.java:139)\r\n        at io.apicurio.registry.serde.DefaultSchemaResolver.lambda$handleAutoCreateArtifact$2(DefaultSchemaResolver.java:174)\r\n        at io.apicurio.registry.serde.ERCache.lambda$getValue$0(ERCache.java:132)\r\n        at io.apicurio.registry.serde.ERCache.retry(ERCache.java:171)\r\n        at io.apicurio.registry.serde.ERCache.getValue(ERCache.java:131)\r\n        at io.apicurio.registry.serde.ERCache.getByContent(ERCache.java:116)\r\n        at io.apicurio.registry.serde.DefaultSchemaResolver.handleAutoCreateArtifact(DefaultSchemaResolver.java:172)\r\n        at io.apicurio.registry.serde.DefaultSchemaResolver.resolveSchema(DefaultSchemaResolver.java:82)\r\n        at io.apicurio.registry.serde.AbstractKafkaSerializer.serialize(AbstractKafkaSerializer.java:92)\r\n        at io.smallrye.reactive.messaging.kafka.fault.SerializerWrapper.lambda$serialize$1(SerializerWrapper.java:56)\r\n        at io.smallrye.reactive.messaging.kafka.fault.SerializerWrapper.wrapSerialize(SerializerWrapper.java:81)\r\n        at io.smallrye.reactive.messaging.kafka.fault.SerializerWrapper.serialize(SerializerWrapper.java:56)\r\n        at org.apache.kafka.clients.producer.KafkaProducer.doSend(KafkaProducer.java:945)\r\n        at org.apache.kafka.clients.producer.KafkaProducer.send(KafkaProducer.java:905)\r\n        at io.smallrye.reactive.messaging.kafka.impl.ReactiveKafkaProducer.lambda$send$3(ReactiveKafkaProducer.java:111)\r\n        at io.smallrye.context.impl.wrappers.SlowContextualConsumer.accept(SlowContextualConsumer.java:21)\r\n        at io.smallrye.mutiny.operators.uni.builders.UniCreateWithEmitter.subscribe(UniCreateWithEmitter.java:22)\r\n        at io.smallrye.mutiny.operators.AbstractUni.subscribe(AbstractUni.java:36)\r\n        at io.smallrye.mutiny.operators.uni.UniRunSubscribeOn.lambda$subscribe$0(UniRunSubscribeOn.java:27)\r\n        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n        at java.base/java.lang.Thread.run(Thread.java:829)\r\nCaused by: java.net.MalformedURLException: unknown protocol: localhost\r\n        at java.base/java.net.URL.<init>(URL.java:652)\r\n        at java.base/java.net.URL.<init>(URL.java:541)\r\n        at java.base/java.net.URL.<init>(URL.java:488)\r\n        at io.vertx.core.http.RequestOptions.parseUrl(RequestOptions.java:355)\r\n        ... 25 more\r\n```\r\n\r\nThis error only occurs on the Quarkus service (consumer or producer), which connects to an already existing Apicurio Registry started as Devservice.  \r\n\n\n### Expected behavior\n\nMultiple Quarkus Services in Dev mode can connect to an existing Apicurio Registry DevService automatically started by one of them\n\n### Actual behavior\n\nThe configured URL to an Apicurio Registry DevService contains no protocol for those services, which try to connect an existing instance of the DevService\n\n### How to Reproduce?\n\nUsing following consumer and producer services:\r\n\r\nhttps://github.com/sombraglez/quarkus-kafka-avro-schema-consumer\r\nhttps://github.com/sombraglez/quarkus-kafka-avro-schema-producer\r\n\r\n1. Start consumer `quarkus-kafka-avro-schema-consumer` in Dev mode `mvn quarkus:dev`\r\n2. Start producer `quarkus-kafka-avro-schema-producer` in Dev mode `mvn quarkus:dev`\r\n3. Access consumer REST-EndPoint `http://localhost:8081/consumed-movies`\r\n4. Produce a message via POST at `http://localhost:8080/movies`\r\n\r\n\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\nopenjdk 11.0.14 2022-01-18 LTS\n\n### GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n2.7.2.Final\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.8.2\n\n### Additional information\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/24008/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24008/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
