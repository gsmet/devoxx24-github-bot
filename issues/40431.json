{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40431",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40431/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40431/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40431/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/40431",
  "id": 2277099536,
  "node_id": "I_kwDOCFbutM6HucgQ",
  "number": 40431,
  "title": "Better exception when accessing two non-XA datasources in a transaction",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1633508165,
      "node_id": "MDU6TGFiZWwxNjMzNTA4MTY1",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/narayana",
      "name": "area/narayana",
      "color": "0366d6",
      "default": false,
      "description": "Transactions / Narayana"
    },
    {
      "id": 2955097332,
      "node_id": "MDU6TGFiZWwyOTU1MDk3MzMy",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/agroal",
      "name": "area/agroal",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/334",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/334",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/334/labels",
    "id": 11163455,
    "node_id": "MI_kwDOCFbutM4Aqlc_",
    "number": 334,
    "title": "3.8.6",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 117,
    "state": "closed",
    "created_at": "2024-06-10T07:54:20Z",
    "updated_at": "2024-08-28T09:33:53Z",
    "due_on": null,
    "closed_at": "2024-08-28T09:33:53Z"
  },
  "comments": 32,
  "created_at": "2024-05-03T07:29:08Z",
  "updated_at": "2024-07-18T12:20:29Z",
  "closed_at": "2024-06-03T10:39:56Z",
  "active_lock_reason": null,
  "body": "### Description\n\n#39283 revealed that Agroal 2.3+ now makes it possible to detect that an application is accessing two non-XA datasources in a transaction, which is unsafe.\r\n\r\nWhen detected, we get an exception looking like this:\r\n\r\n```\r\n2024-05-02 11:55:18,201 WARN  [org.apa.cam.com.sch.SchedulerConsumer] (Camel (camel-1) thread #1 - scheduler://read-clean-write) Error processing exchange. Exchange[2388535E05D1BE3-0000000000000000]. Caused by: [org.springframework.jdbc.CannotGetJdbcConnectionException - Failed to obtain JDBC Connection]: org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection\r\n        at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:84)\r\n        at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:653)\r\n        at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:695)\r\n        at org.apache.camel.component.sql.SqlProducer.processInternal(SqlProducer.java:150)\r\n        at org.apache.camel.component.sql.SqlProducer.process(SqlProducer.java:137)\r\n        at org.apache.camel.support.AsyncProcessorConverterHelper$ProcessorToAsyncProcessorBridge.process(AsyncProcessorConverterHelper.java:65)\r\n        at org.apache.camel.processor.SendProcessor.process(SendProcessor.java:210)\r\n        at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.handleFirst(RedeliveryErrorHandler.java:462)\r\n        at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:438)\r\n        at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.executeFromQueue(DefaultReactiveExecutor.java:240)\r\n        at org.apache.camel.impl.engine.DefaultReactiveExecutor.executeFromQueue(DefaultReactiveExecutor.java:77)\r\n        at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.await(DefaultAsyncProcessorAwaitManager.java:95)\r\n        at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:84)\r\n        at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler.process(RedeliveryErrorHandler.java:200)\r\n        at org.apache.camel.impl.engine.CamelInternalProcessor.processTransacted(CamelInternalProcessor.java:397)\r\n        at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:327)\r\n        at org.apache.camel.processor.Pipeline$PipelineTask.run(Pipeline.java:102)\r\n        at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.executeFromQueue(DefaultReactiveExecutor.java:240)\r\n        at org.apache.camel.impl.engine.DefaultReactiveExecutor.executeFromQueue(DefaultReactiveExecutor.java:77)\r\n        at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.await(DefaultAsyncProcessorAwaitManager.java:95)\r\n        at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:84)\r\n        at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:32)\r\n        at org.apache.camel.impl.engine.CamelInternalProcessor.processTransacted(CamelInternalProcessor.java:397)\r\n        at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:327)\r\n        at org.apache.camel.processor.Pipeline$PipelineTask.run(Pipeline.java:102)\r\n        at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.executeFromQueue(DefaultReactiveExecutor.java:240)\r\n        at org.apache.camel.impl.engine.DefaultReactiveExecutor.executeFromQueue(DefaultReactiveExecutor.java:77)\r\n        at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.await(DefaultAsyncProcessorAwaitManager.java:95)\r\n        at org.apache.camel.impl.engine.DefaultAsyncProcessorAwaitManager.process(DefaultAsyncProcessorAwaitManager.java:84)\r\n        at org.apache.camel.support.AsyncProcessorSupport.process(AsyncProcessorSupport.java:32)\r\n        at org.apache.camel.jta.TransactionErrorHandler.processByErrorHandler(TransactionErrorHandler.java:234)\r\n        at org.apache.camel.jta.TransactionErrorHandler$1.run(TransactionErrorHandler.java:197)\r\n        at org.apache.camel.quarkus.component.jta.TransactionalJtaTransactionPolicy.runWithTransaction(TransactionalJtaTransactionPolicy.java:47)\r\n        at org.apache.camel.quarkus.component.jta.RequiredJtaTransactionPolicy.run(RequiredJtaTransactionPolicy.java:26)\r\n        at org.apache.camel.jta.TransactionErrorHandler.doInTransactionTemplate(TransactionErrorHandler.java:187)\r\n        at org.apache.camel.jta.TransactionErrorHandler.processInTransaction(TransactionErrorHandler.java:138)\r\n        at org.apache.camel.jta.TransactionErrorHandler.process(TransactionErrorHandler.java:102)\r\n        at org.apache.camel.jta.TransactionErrorHandler.process(TransactionErrorHandler.java:111)\r\n        at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.handleFirst(RedeliveryErrorHandler.java:462)\r\n        at org.apache.camel.processor.errorhandler.RedeliveryErrorHandler$SimpleTask.run(RedeliveryErrorHandler.java:438)\r\n        at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.doRun(DefaultReactiveExecutor.java:199)\r\n        at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.executeReactiveWork(DefaultReactiveExecutor.java:189)\r\n        at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.tryExecuteReactiveWork(DefaultReactiveExecutor.java:166)\r\n        at org.apache.camel.impl.engine.DefaultReactiveExecutor$Worker.schedule(DefaultReactiveExecutor.java:148)\r\n        at org.apache.camel.impl.engine.DefaultReactiveExecutor.scheduleMain(DefaultReactiveExecutor.java:59)\r\n        at org.apache.camel.processor.Pipeline.process(Pipeline.java:163)\r\n        at org.apache.camel.impl.engine.CamelInternalProcessor.processNonTransacted(CamelInternalProcessor.java:354)\r\n        at org.apache.camel.impl.engine.CamelInternalProcessor.process(CamelInternalProcessor.java:330)\r\n        at org.apache.camel.component.scheduler.SchedulerConsumer.sendTimerExchange(SchedulerConsumer.java:70)\r\n        at org.apache.camel.component.scheduler.SchedulerConsumer.poll(SchedulerConsumer.java:50)\r\n        at org.apache.camel.support.ScheduledPollConsumer.doRun(ScheduledPollConsumer.java:204)\r\n        at org.apache.camel.support.ScheduledPollConsumer.run(ScheduledPollConsumer.java:118)\r\n        at java.base@21.0.2/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:572)\r\n        at java.base@21.0.2/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:358)\r\n        at java.base@21.0.2/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)\r\n        at java.base@21.0.2/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)\r\n        at java.base@21.0.2/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)\r\n        at java.base@21.0.2/java.lang.Thread.runWith(Thread.java:1596)\r\n        at java.base@21.0.2/java.lang.Thread.run(Thread.java:1583)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.thread.PlatformThreads.threadStartRoutine(PlatformThreads.java:833)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.posix.thread.PosixPlatformThreads.pthreadStartRoutine(PosixPlatformThreads.java:211)\r\nCaused by: java.sql.SQLException: Exception in association of connection to existing transaction\r\n        at io.agroal.narayana.NarayanaTransactionIntegration.associate(NarayanaTransactionIntegration.java:130)\r\n        at io.agroal.pool.ConnectionPool.getConnection(ConnectionPool.java:257)\r\n        at io.agroal.pool.DataSource.getConnection(DataSource.java:86)\r\n        at io.agroal.api.AgroalDataSource_syYGL47zwCt2LQzSIsPp-v9wXhg_Synthetic_ClientProxy.getConnection(Unknown Source)\r\n        at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:160)\r\n        at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:118)\r\n        at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)\r\n        ... 60 more\r\nCaused by: java.sql.SQLException: Unable to enlist connection to existing transaction\r\n        at io.agroal.narayana.NarayanaTransactionIntegration.associate(NarayanaTransactionIntegration.java:121)\r\n        ... 66 more\r\n```\r\n\r\nThe root cause is really not helpful, because it doesn't specify *why* the connection couldn't be enlisted to the transaction. We should improve that message, and that means changes in Agroal.\r\n\r\n@barreiro I think you had plans in that area; could you please link the corresponding Agroal Jira?\n\n### Implementation ideas\n\nUnfortunately `Transaction.enlistResource` only returns a boolean to state whether enlistment worked or not.\r\n\r\nSo here are our only solutions:\r\n\r\n1. Rely on Narayana-specific interfaces that would expose an alternate version of `enlistResource` which throws an exception on failure, with details regarding what failed exactly (\"Can't add two non-XA resources\")\r\n2. Just adapt the message in Agroal to provide a few common reasons for the failure, without certainty.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40431/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40431/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
