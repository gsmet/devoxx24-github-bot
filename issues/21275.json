{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/21275",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/21275/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/21275/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/21275/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/21275",
  "id": 1047559710,
  "node_id": "I_kwDOCFbutM4-cH4e",
  "number": 21275,
  "title": "Java-based flyway migrations scripts are applied to all schemas",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1897325810,
      "node_id": "MDU6TGFiZWwxODk3MzI1ODEw",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/flyway",
      "name": "area/flyway",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 7,
  "created_at": "2021-11-08T15:04:41Z",
  "updated_at": "2023-10-19T09:05:54Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nIn [this blog post](https://flywaydb.org/blog/multipleschemas) the flyway team describes the patterns that you can use for schema-based multi-tenancy. We tried to use the pattern with a single database, multiple schema with multiple histories. The migration table for each schema is stored in the schema itself. According to Quarkus guides this case is supported (in [the quarkus-flyway guide](https://quarkus.io/guides/flyway#multiple-datasources))\r\n\r\nFor example, we have the following two schemas:\r\n1. \"base\" schema with its history defined from:\r\n- *.sql migration scripts in resources locations \"database/base\" (full project path \"src/main/resources/database/base\") \r\n- Java migration scripts in source package \"database/base\" (full project path \"src/main/java/database/base\")\r\n2. \"mycompany\" schema with its history defined from:\r\n- *.sql migration scripts in resources locations \"database/mycompany\" (full project path \"src/main/resources/database/mycompany\")\r\n- Java migration scripts in source package \"database/mycompany\" (full project path \"src/main/java/database/mycompany\")\r\n\r\nSo let's say that we have the following scripts in our project:\r\n1. For the \"base\" history:\r\n- database/base/V1__FirstBaseMigration.sql (located in resources of the project)\r\n- database/base/V2__SecondBaseMigration.java (located in java sources of the project)\r\n\r\n2. For the \"mycompany\" history:\r\n- database/mycompany/V1__FirstMycompanyMigration.sql (located in resources of the project)\r\n- database/mycompany/V2__SecondMycompanyMigration.sql\r\n\r\nThe above setup is almost the same as the quarkus-quickstarts project \"hibernate-orm-multi-tenancy-quickstart\" (if you enable \"database\" profile) but it just includes both sql and java migrations (the quickstart contains only *.sql) and also instead of using two different databases (and their default schema) we are using a single database with two different schemas (\"base\" and \"mycompany\") by pointing the two datasources to the same database and by setting the config options \"quarkus.flyway.TENANT_ID.schemas\" to the correct schema for each tenant id in `application.properties`:\r\n\r\n```properties\r\nquarkus.datasource.base.db-kind=postgresql\r\nquarkus.datasource.base.jdbc.url=jdbc:postgresql://localhost:5432/quarkus_test\r\nquarkus.flyway.base.schemas=base\r\nquarkus.flyway.base.locations=classpath:database/base\r\nquarkus.flyway.base.migrate-at-start=true\r\n\r\nquarkus.datasource.mycompany.db-kind=postgresql\r\nquarkus.datasource.mycompany.jdbc.url=jdbc:postgresql://localhost:5432/quarkus_test\r\nquarkus.flyway.mycompany.schemas=mycompany\r\nquarkus.flyway.mycompany.locations=classpath:database/mycompany\r\nquarkus.flyway.mycompany.migrate-at-start=true\r\n```\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\nI assume that the correct behavior is for the above two histories to applied correctly to their corresponding schema of the database (\"base\" history for \"base\" schema and the \"mycompany\" history for \"mycompany\" schema).\r\n\r\n### Actual behavior\r\n\r\nIf we restrict our two histories to use only .sql migration scripts then we get the expected behavior.\r\nBut if we include at least one Java migration script to any of the two histories then the quarkus-flyway will try to apply this Java migration to both schema. For example in the above example case the quarkus-flyway will try to apply the \"database/base/V2__SecondBaseMigration.java\" migration script to both schema \"base\" and \"mycompany\". Of-course because there is also a \"V2__SecondMycompanyMigration.sql\" migration script for the \"mycompany\" schema the quarkus-flyway will throw the following exception:\r\nFailed to start application: org.flywaydb.core.api.FlywayException: Found more than one migration with version 2\r\nOffenders:\r\n-> ~/quarkus-quickstarts/hibernate-orm-multi-tenancy-quickstart/target/classes/ (JDBC)\r\n-> ~/quarkus-quickstarts/hibernate-orm-multi-tenancy-quickstart/target/classes/database/mycompany/V2__SecondMycompanyMigration.sql (SQL)\r\n\r\nIn the above case quarkus-flyway throws exception because there is also an sql migration with the same version for \"mycompany\" history but there are cases in which there is no conflict between versions and the Java migration of the \"base\" history could be wrongly applied to all schemas.\r\nI think that quarkus-flyway-deployment scans all classes that implement JavaMigration interface in the project and it does not filter the classes based on the package prefix for each tenant schema (it will include all JavaMigrations for each schema migration).\r\n\r\n### How to Reproduce?\r\n\r\n\r\nSteps to reproduce:\r\n1. Go to quarkus-quickstarts project \"hibernate-orm-multi-tenancy-quickstart\" (the \"database\" profile)\r\n2. Set the two datasources to point to the same database and use different schemas by setting  \"quarkus.flyway.base.schemas=base\" and \"quarkus.flyway.mycompany.schemas=mycompany\" in application.properties. Or you can also use the two databases setup with the default schema.\r\n3. Set the locations for flyway \"quarkus.flyway.base.locations=classpath:database/base\" and \"quarkus.flyway.mycompany.locations=classpath:database/mycompany\" in application.properties\r\n4. Create a Java migration script in the \"database/base\" java package and an sql script with the same version number in the \"database/mycompany\" resources.\r\n5. Run in dev mode\r\n\r\nI have attached a patch file [quarkus-schema-multi-tenancy.txt](https://github.com/quarkusio/quarkus/files/7497812/quarkus-schema-multi-tenancy.txt) with the above steps for quarkus-quickstarts project \"hibernate-orm-multi-tenancy-quickstart\"  (I removed \"database\" profile in the patch)\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nLinux 5.11.0-38-generic 20.04 Ubuntu x86_64\r\n\r\n### Output of `java -version`\r\n\r\nOpenJDK Runtime Environment Temurin-17+35 (build 17+35)\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n\"2.3.1.Final\" or \"2.4.1.Final\"\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nApache Maven 3.8.1 \r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/21275/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/21275/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
