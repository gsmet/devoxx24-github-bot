{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/34169",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34169/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34169/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34169/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/34169",
  "id": 1765941383,
  "node_id": "I_kwDOCFbutM5pQiCH",
  "number": 34169,
  "title": "OIDC: should provide configuration to suppress or allow challenges based on resource path",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1479557456,
      "node_id": "MDU6TGFiZWwxNDc5NTU3NDU2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/oidc",
      "name": "area/oidc",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 7,
  "created_at": "2023-06-20T18:37:03Z",
  "updated_at": "2023-06-21T12:46:24Z",
  "closed_at": "2023-06-20T20:46:17Z",
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nWhen accessing an authenticated endpoint, if the OAuth tokens are present in the session cookie but have expired, the OIDC implementation will redirect to the authorization server. \r\n\r\nThis can present a problem for single-page applications (using `ApplicationType.WEB_APP`) because this condition is most likely to happen when the application accesses a REST endpoint, and the redirect will be \"eaten\" by the XHR invocation, but not before setting the `q_auth` cookie, which will cause state validation failures when the user is redirected to the application's entry point.\r\n\r\n(The workaround for this is to redirect via an unauthenticated endpoint that clears any `q_auth` cookies.)\r\n\r\nWhat would be helpful here is a way to control the behaviour upon authentication failure dependent on the path being accessed - similar to the existing `quarkus.http.auth.permission` mechanism, but with the option to either deny (by returning 401) or challenge (by redirect to the auth server.)\r\n\r\n### Implementation ideas\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/34169/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34169/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
