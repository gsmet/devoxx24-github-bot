{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40882",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40882/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40882/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40882/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/40882",
  "id": 2323520031,
  "node_id": "I_kwDOCFbutM6Kfhof",
  "number": 40882,
  "title": "Transaction-Scoped observer on transaction end sometimes fails if the transaction is aborted",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1633508165,
      "node_id": "MDU6TGFiZWwxNjMzNTA4MTY1",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/narayana",
      "name": "area/narayana",
      "color": "0366d6",
      "default": false,
      "description": "Transactions / Narayana"
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 0,
  "created_at": "2024-05-29T14:45:54Z",
  "updated_at": "2024-06-03T08:17:36Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\n[The guide on transactions](https://quarkus.io/guides/transaction#transaction-scope) states:\r\n\r\n> ```java\r\n> void onBeforeEndTransaction(@Observes @BeforeDestroyed(TransactionScoped.class) Object event) {\r\n>     // This gets invoked before a transaction ends (commit or rollback).\r\n> }\r\n> ```\r\n\r\nThis works as expected in most cases, except under these circumstances:\r\n\r\n- The bean containing the `onBeforeEndTransaction` is itself `@TransactionScoped`\r\n- The bean containing the `onBeforeEndTransaction` is not interacted with before the `@Observes @BeforeDestroyed(TransactionScoped.class)` event\r\n- The transaction gets aborted\r\n\r\n> [!NOTE]\r\n> While not visible in the below reproducer code, my use-case requires the observer to hold state.\r\n> For holding transaction-specific state during the transaction and executing code right _before_ commit or rollback, the documentation suggests using `@TransactionScoped` in conjunction with `@PreDestroy`, but due to https://github.com/quarkusio/quarkus/issues/36880 this currently does not work. This is why I opted for a combination of `@TransactionScoped` and `@Observes @BeforeDestroyed(TransactionScoped.class)`\r\n\r\nUnder those circumstances, at the end of the transaction this error gets logged:\r\n```\r\n2024-05-29 16:25:08,766 ERROR [io.qua.nar.jta.run.NotifyingTransactionManager] (executor-thread-1) Failed to fire @BeforeDestroyed(TransactionScoped.class): java.lang.RuntimeException: Cannot register synchronization\r\n\tat io.quarkus.narayana.jta.runtime.context.TransactionContext$TransactionContextState.<init>(TransactionContext.java:209)\r\n\tat io.quarkus.narayana.jta.runtime.context.TransactionContext.get(TransactionContext.java:125)\r\n\tat io.quarkus.narayana.jta.runtime.context.TransactionContext.get(TransactionContext.java:160)\r\n\tat org.acme.GreetingResource_TxEndObserver_Observer_onBeforeEndTransaction_-qkHMozTFpNQ78h2RU2G2LHEEgk.notify(Unknown Source)\r\n\tat io.quarkus.arc.impl.EventImpl$Notifier.notifyObservers(EventImpl.java:351)\r\n\tat io.quarkus.arc.impl.EventImpl$Notifier.notify(EventImpl.java:329)\r\n\tat io.quarkus.arc.impl.EventImpl.fire(EventImpl.java:80)\r\n\tat io.quarkus.narayana.jta.runtime.TransactionScopedNotifier.beforeDestroyed(TransactionScopedNotifier.java:35)\r\n\tat io.quarkus.narayana.jta.runtime.NotifyingTransactionManager.rollback(NotifyingTransactionManager.java:89)\r\n\tat io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.endTransaction(TransactionalInterceptorBase.java:404)\r\n\tat io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.invokeInOurTx(TransactionalInterceptorBase.java:175)\r\n\tat io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.invokeInOurTx(TransactionalInterceptorBase.java:107)\r\n\tat io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired.doIntercept(TransactionalInterceptorRequired.java:38)\r\n\tat io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorBase.intercept(TransactionalInterceptorBase.java:61)\r\n\tat io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired.intercept(TransactionalInterceptorRequired.java:32)\r\n\tat io.quarkus.narayana.jta.runtime.interceptor.TransactionalInterceptorRequired_Bean.intercept(Unknown Source)\r\n\tat io.quarkus.arc.impl.InterceptorInvocation.invoke(InterceptorInvocation.java:42)\r\n\tat io.quarkus.arc.impl.AroundInvokeInvocationContext.perform(AroundInvokeInvocationContext.java:30)\r\n\tat io.quarkus.arc.impl.InvocationContexts.performAroundInvoke(InvocationContexts.java:27)\r\n\tat org.acme.GreetingResource_Subclass.failure(Unknown Source)\r\n\tat org.acme.GreetingResource_ClientProxy.failure(Unknown Source)\r\n\tat org.acme.GreetingResource$quarkusrestinvoker$failure_96554a4e8df099fb4eb8581c89f3f9663b0027d8.invoke(Unknown Source)\r\n\tat org.jboss.resteasy.reactive.server.handlers.InvocationHandler.handle(InvocationHandler.java:29)\r\n\tat io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:141)\r\n\tat org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:147)\r\n\tat io.quarkus.vertx.core.runtime.VertxCoreRecorder$14.runWith(VertxCoreRecorder.java:599)\r\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2516)\r\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2495)\r\n\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1521)\r\n\tat org.jboss.threads.DelegatingRunnable.run(DelegatingRunnable.java:11)\r\n\tat org.jboss.threads.ThreadLocalResettingRunnable.run(ThreadLocalResettingRunnable.java:11)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\r\nCaused by: jakarta.transaction.RollbackException: ARJUNA016083: Cannot register synchronization because the transaction is in aborted state\r\n\tat com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple.registerSynchronizationImple(TransactionImple.java:371)\r\n\tat com.arjuna.ats.internal.jta.transaction.arjunacore.TransactionImple.registerSynchronization(TransactionImple.java:352)\r\n\tat io.quarkus.narayana.jta.runtime.context.TransactionContext$TransactionContextState.<init>(TransactionContext.java:207)\r\n\t... 32 more\r\n```\r\n\r\nThe behaviour can be demonstrated with this REST-Controller:\r\n```java\r\n@Path(\"/hello\")\r\n@ApplicationScoped\r\n@Transactional\r\n@Produces(MediaType.TEXT_PLAIN)\r\npublic class GreetingResource {\r\n    @Inject\r\n    TxEndObserver txEndObserver;\r\n\r\n    @Path(\"/success\")\r\n    @GET\r\n    public String success() {\r\n        return \"that worked!\";\r\n    }\r\n\r\n    @Path(\"/failure-without-error\")\r\n    @GET\r\n    public String success2() {\r\n        txEndObserver.interactWithMe(); // initializes bean\r\n        throw new BadRequestException(\"that failed as expected!\");\r\n    }\r\n\r\n    @Path(\"/failure-with-error\")\r\n    @GET\r\n    public String failure() {\r\n        throw new BadRequestException(\"this causes an ugly ERROR log message\");\r\n    }\r\n\r\n    @TransactionScoped\r\n    public static class TxEndObserver {\r\n        public void interactWithMe() {}\r\n        void onBeforeEndTransaction(@Observes @BeforeDestroyed(TransactionScoped.class) Object event) {\r\n            Log.info(\"Transaction is ending\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe endpoints `/success` and `/failure-without-error` both log `Transaction is ending`, but the endpoint `/failure-with-error` does not, and instead logs the above error.\r\n\r\nAn easy workaround is to also add a `@Observes @Initialized(TransactionScoped.class)` observer method to the same bean, to ensure it always gets initialized at transaction start:\r\n```java\r\nvoid onInitializedTransaction(@Observes @Initialized(TransactionScoped.class) Object event) {\r\n    // We don't do anything here, but we need the bean to be initialized before the shutdown event even if it wasn't used during the whole transaction.\r\n    // Otherwise, the @BeforeDestroyed event would try to initialize the bean, which fails with this warning if the transaction was already aborted:\r\n    //     Failed to fire @BeforeDestroyed(TransactionScoped.class): java.lang.RuntimeException: Cannot register synchronization\r\n    //     Caused by: jakarta.transaction.RollbackException: ARJUNA016083: Cannot register synchronization because the transaction is in aborted state\r\n    // The warning is harmless since it's okay that we don't execute anything for aborted transactions, but it's irritating and spams logs.\r\n    Log.tracef(\"Transaction started: %s\", event);\r\n}\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nI expect one of two options:\r\n- The above use-case to work without an error\r\n- documentation and/or code safeguards to indicate the use-case as forbidden or to require extra care, e.g. a transaction observer that itself is transaction-scoped having some limitations.\r\n\r\n### How to Reproduce?\r\n\r\nWith the above controller, run these tests to trigger the error:\r\n\r\n```java\r\n@QuarkusTest\r\nclass GreetingResourceTest {\r\n    @Test\r\n    void testSuccess() {\r\n        given()\r\n                .when().get(\"/hello/success\")\r\n                .then()\r\n                .statusCode(200);\r\n    }\r\n\r\n    @Test\r\n    void testFailureWithoutError() {\r\n        given()\r\n                .when().get(\"/hello/failure-without-error\")\r\n                .then()\r\n                .statusCode(400);\r\n    }\r\n\r\n    @Test\r\n    void testFailureWithError() {\r\n        given()\r\n                .when().get(\"/hello/failure-with-error\")\r\n                .then()\r\n                .statusCode(400);\r\n    }\r\n}\r\n```\r\n\r\nI also attached a reproducer project: \r\n[cannot-register-synchronization.zip](https://github.com/quarkusio/quarkus/files/15486104/cannot-register-synchronization.zip)\r\n\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\n```\r\nMicrosoft Windows [Version 10.0.19045.4412]\r\n```\r\n\r\n### Output of `java -version`\r\n\r\n```\r\nopenjdk version \"21\" 2023-09-19\r\nOpenJDK Runtime Environment (build 21+35-2513)\r\nOpenJDK 64-Bit Server VM (build 21+35-2513, mixed mode, sharing)\r\n```\r\n\r\n### Quarkus version or git rev\r\n\r\n3.11.0\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\n```\r\nMaven home: C:\\Program Files\\maven\\apache-maven-3.9.6\r\nJava version: 21, vendor: Oracle Corporation, runtime: C:\\Program Files\\OpenJDK\\jdk-21\r\nDefault locale: de_DE, platform encoding: UTF-8\r\nOS name: \"windows 10\", version: \"10.0\", arch: \"amd64\", family: \"windows\"\r\n```",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40882/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40882/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
