{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/20045",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20045/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20045/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20045/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/20045",
  "id": 992747221,
  "node_id": "MDU6SXNzdWU5OTI3NDcyMjE=",
  "number": 20045,
  "title": "quarkus-oidc doesn't work if jwks endpoint has a different domain (like it's done in AWS Cognito) ",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1479557456,
      "node_id": "MDU6TGFiZWwxNDc5NTU3NDU2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/oidc",
      "name": "area/oidc",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 2,
  "created_at": "2021-09-09T23:44:52Z",
  "updated_at": "2021-09-26T11:11:34Z",
  "closed_at": "2021-09-09T23:55:00Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nI tried to use quarkus-oidc with AWS Cognito and It doesn't work 'cause quarkus-oidc assumes that JWKS endpoint ALWAYS should have  the same domain as the authorization server has. It's not always true. For instance, AWS Cognito has different domains for authorization servers and JWKS. In our case We have the following OIDC Configuration in Cognito:\r\n```JSON\r\n{\r\n  \"authorization_endpoint\": \"https://my-test.auth.eu-central-1.amazoncognito.com/oauth2/authorize\",\r\n  \"id_token_signing_alg_values_supported\": [\r\n    \"RS256\"\r\n  ],\r\n  \"issuer\": \"https://cognito-idp.eu-central-1.amazonaws.com/eu-central-1_t12NbxXXX\",\r\n  \"jwks_uri\": \"https://cognito-idp.eu-central-1.amazonaws.com/eu-central-1_t12NbxXXX/.well-known/jwks.json\",\r\n  \"response_types_supported\": [\r\n    \"code\",\r\n    \"token\"\r\n  ],\r\n  \"scopes_supported\": [\r\n    \"openid\",\r\n    \"email\",\r\n    \"phone\",\r\n    \"profile\"\r\n  ],\r\n  \"subject_types_supported\": [\r\n    \"public\"\r\n  ],\r\n  \"token_endpoint\": \"https://my-test.auth.eu-central-1.amazoncognito.com/oauth2/token\",\r\n  \"token_endpoint_auth_methods_supported\": [\r\n    \"client_secret_basic\",\r\n    \"client_secret_post\"\r\n  ],\r\n  \"userinfo_endpoint\": \"https://my-test.auth.eu-central-1.amazoncognito.com/oauth2/userInfo\" \r\n}\r\n```   \r\nWe have `https://cognito-idp.eu-central-1.amazonaws.com` domain for JWKS and `https://my-test.auth.eu-central-1.amazoncognito.com` as auth-server.\r\n\r\nWe can only specify `quarkus.oidc.auth-server-url` and `quarkus.oidc.jwks-path`. JWKS uri is a result of concatenation of `auth-server-url` and `jwks-path`.\r\n\r\nIt happens in `io.quarkus.oidc.runtime.OidcRecorder#createOidcClientUni(OidcTenantConfig, TlsConfig, Vertx)` line 271.\r\n```java\r\n  if (!oidcConfig.discoveryEnabled) {\r\n            String tokenUri = OidcCommonUtils.getOidcEndpointUrl(authServerUriString, oidcConfig.tokenPath);\r\n            String introspectionUri = OidcCommonUtils.getOidcEndpointUrl(authServerUriString,\r\n                    oidcConfig.introspectionPath);\r\n            String authorizationUri = OidcCommonUtils.getOidcEndpointUrl(authServerUriString,\r\n                    oidcConfig.authorizationPath);\r\n            String jwksUri = OidcCommonUtils.getOidcEndpointUrl(authServerUriString, oidcConfig.jwksPath);\r\n            String userInfoUri = OidcCommonUtils.getOidcEndpointUrl(authServerUriString, oidcConfig.userInfoPath);\r\n            String endSessionUri = OidcCommonUtils.getOidcEndpointUrl(authServerUriString, oidcConfig.endSessionPath);\r\n            metadataUni = Uni.createFrom().item(new OidcConfigurationMetadata(tokenUri,\r\n                    introspectionUri, authorizationUri, jwksUri, userInfoUri, endSessionUri,\r\n                    oidcConfig.token.issuer.orElse(null)));\r\n  }\r\n  \r\n  public static String getOidcEndpointUrl(String authServerUrl, Optional<String> endpointPath) {\r\n        return endpointPath.isPresent() ? authServerUrl + prependSlash((String)endpointPath.get()) : null;\r\n  } \r\n        \r\n```\r\n\r\n### Expected behavior\r\n\r\nShould be an ability to specify a full URI to JWKS including domain name in properties. \r\n\r\n### Actual behavior\r\n\r\nNo way to use any domains other then domain of `auth-server-url`\r\n\r\n### How to Reproduce?\r\n\r\n_No response_\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\n_No response_\r\n\r\n### Output of `java -version`\r\n\r\n_No response_\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n_No response_\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/20045/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20045/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
