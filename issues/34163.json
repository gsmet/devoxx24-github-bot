{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/34163",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34163/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34163/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34163/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/34163",
  "id": 1765478991,
  "node_id": "I_kwDOCFbutM5pOxJP",
  "number": 34163,
  "title": "Qute section helper type check is not complete",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1714005220,
      "node_id": "MDU6TGFiZWwxNzE0MDA1MjIw",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/qute",
      "name": "area/qute",
      "color": "0366d6",
      "default": false,
      "description": "The template engine"
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/256",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/256",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/256/labels",
    "id": 9570547,
    "node_id": "MI_kwDOCFbutM4Akgjz",
    "number": 256,
    "title": "3.2.0.Final",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 50,
    "state": "closed",
    "created_at": "2023-06-22T09:15:20Z",
    "updated_at": "2023-11-15T14:04:02Z",
    "due_on": null,
    "closed_at": "2023-06-28T19:23:32Z"
  },
  "comments": 3,
  "created_at": "2023-06-20T14:01:09Z",
  "updated_at": "2023-06-27T13:59:42Z",
  "closed_at": "2023-06-22T12:48:47Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\n\nI'm writing the following Qute section helpers:\r\n\r\n```java\r\n@EngineConfiguration\r\npublic class QuteCode128Code extends QuteBarCode {\r\n\r\n    public QuteCode128Code() {\r\n        super(\"code128\", Barcode::code128Img);\r\n    }\r\n}\r\n\r\npublic abstract class QuteBarCode implements SectionHelperFactory<QuteBarCode.CustomSectionHelper> {\r\n\r\n    @FunctionalInterface\r\n    public static interface BarCodeEncoder {\r\n        String encode(String value, int width, int height);\r\n    }\r\n\r\n    private String name;\r\n    private BarCodeEncoder encoder;\r\n\r\n    public QuteBarCode(String name, BarCodeEncoder encoder) {\r\n        this.name = name;\r\n        this.encoder = encoder;\r\n    }\r\n\r\n    @Override\r\n    public List<String> getDefaultAliases() {\r\n        return List.of(name);\r\n    }\r\n\r\n    @Override\r\n    public ParametersInfo getParameters() {\r\n        return ParametersInfo.builder()\r\n                .addParameter(Parameter.builder(\"value\"))\r\n                .addParameter(Parameter.builder(\"size\").optional())\r\n                .addParameter(Parameter.builder(\"width\").optional())\r\n                .addParameter(Parameter.builder(\"height\").optional())\r\n                .build();\r\n    }\r\n\r\n    @Override\r\n    public Scope initializeBlock(Scope outerScope, BlockInfo block) {\r\n        Util.declareBlock(block, \"value\", \"size\", \"width\", \"height\");\r\n        return SectionHelperFactory.super.initializeBlock(outerScope, block);\r\n    }\r\n\r\n    @Override\r\n    public CustomSectionHelper initialize(SectionInitContext context) {\r\n        Util.requireParameter(context, \"value\");\r\n        // FIXME: support compile-time type-checking when Qute supports it\r\n        Map<String, Expression> params = Util.collectExpressions(context, \"value\", \"size\", \"width\", \"height\");\r\n        if (context.hasParameter(\"size\")) {\r\n            if (params.containsKey(\"width\") || params.containsKey(\"height\")) {\r\n                throw new TemplateException(\"Cannot set both size and (width or height): choose one the others\");\r\n            }\r\n        }\r\n        return new CustomSectionHelper(params, encoder);\r\n    }\r\n\r\n    static class CustomSectionHelper implements SectionHelper {\r\n\r\n        private Map<String, Expression> params;\r\n        private BarCodeEncoder encoder;\r\n\r\n        public CustomSectionHelper(Map<String, Expression> params, BarCodeEncoder encoder) {\r\n            this.params = params;\r\n            this.encoder = encoder;\r\n        }\r\n\r\n        @Override\r\n        public CompletionStage<ResultNode> resolve(SectionResolutionContext context) {\r\n            return Futures.evaluateParams(params, context.resolutionContext())\r\n                    .thenApply(values -> {\r\n                        String value = Util.typecheckValue(values, \"value\", String.class);\r\n                        Integer size = Util.typecheckValue(values, \"size\", Integer.class, 200);\r\n                        Integer width = Util.typecheckValue(values, \"width\", Integer.class, size);\r\n                        Integer height = Util.typecheckValue(values, \"height\", Integer.class, size);\r\n\r\n                        return new SingleResultNode(encoder.encode(value, width, height));\r\n                    });\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd I get exceptions at runtime:\r\n\r\n```\r\n\tSuppressed: io.quarkus.qute.TemplateException: A class annotated with @EngineConfiguration must implement one of the [io.quarkus.qute.SectionHelperFactory, io.quarkus.qute.ValueResolver, io.quarkus.qute.NamespaceResolver]: io.quarkiverse.renarde.barcode.runtime.QuteCode39Code\r\n\t\tat io.quarkus.qute.deployment.QuteProcessor.collectEngineConfigurations(QuteProcessor.java:2121)\r\n```\r\n\r\nThis is because the code in `QuteProcessor` only checks direct super interfaces, and mine comes from the superclass:\r\n\r\n```java\r\n    private static boolean isImplementorOf(ClassInfo target, DotName interfaceName) {\r\n        for (DotName name : target.asClass().interfaceNames()) {\r\n            if (name.equals(interfaceName)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n```\r\n\r\nI think we should have some better subtyping rules here, no?\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/34163/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34163/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
