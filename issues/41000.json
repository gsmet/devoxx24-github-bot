{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/41000",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41000/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41000/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41000/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/41000",
  "id": 2337455650,
  "node_id": "I_kwDOCFbutM6LUr4i",
  "number": 41000,
  "title": "Add support for the TLS registry to the Redis client extension",
  "labels": [
    {
      "id": 2184343143,
      "node_id": "MDU6TGFiZWwyMTg0MzQzMTQz",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/redis",
      "name": "area/redis",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/329",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/329",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/329/labels",
    "id": 11056804,
    "node_id": "MI_kwDOCFbutM4AqLak",
    "number": 329,
    "title": "3.12.0.CR1",
    "description": "",
    "creator": {
      "login": "quarkusbot",
      "id": 61254497,
      "node_id": "MDQ6VXNlcjYxMjU0NDk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/61254497?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quarkusbot",
      "html_url": "https://github.com/quarkusbot",
      "followers_url": "https://api.github.com/users/quarkusbot/followers",
      "following_url": "https://api.github.com/users/quarkusbot/following{/other_user}",
      "gists_url": "https://api.github.com/users/quarkusbot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quarkusbot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quarkusbot/subscriptions",
      "organizations_url": "https://api.github.com/users/quarkusbot/orgs",
      "repos_url": "https://api.github.com/users/quarkusbot/repos",
      "events_url": "https://api.github.com/users/quarkusbot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quarkusbot/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 195,
    "state": "closed",
    "created_at": "2024-05-15T09:27:54Z",
    "updated_at": "2024-07-04T18:19:16Z",
    "due_on": null,
    "closed_at": "2024-06-12T11:16:44Z"
  },
  "comments": 1,
  "created_at": "2024-06-06T06:44:01Z",
  "updated_at": "2024-06-07T10:52:39Z",
  "closed_at": "2024-06-07T10:52:35Z",
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nWith the integrated TLS registry, it should be possible to configure Redis TLS using the TLS registry instead of the specific Redis configuration.\r\n\r\n### Implementation ideas\r\n\r\nThis is the code used for the mailer:\r\n\r\n```java\r\n private void configureTLS(String name, MailerRuntimeConfig config, TlsConfigurationRegistry tlsRegistry, MailConfig cfg,\r\n            boolean globalTrustAll) {\r\n        TlsConfiguration configuration = null;\r\n\r\n        // Check if we have a named TLS configuration or a default configuration:\r\n        if (config.tlsConfigurationName.isPresent()) {\r\n            Optional<TlsConfiguration> maybeConfiguration = tlsRegistry.get(config.tlsConfigurationName.get());\r\n            if (!maybeConfiguration.isPresent()) {\r\n                throw new IllegalStateException(\"Unable to find the TLS configuration \"\r\n                        + config.tlsConfigurationName.get() + \" for the mailer \" + name + \".\");\r\n            }\r\n            configuration = maybeConfiguration.get();\r\n        } else if (tlsRegistry.getDefault().isPresent() && tlsRegistry.getDefault().get().isTlsEnabled()) {\r\n            configuration = tlsRegistry.getDefault().get();\r\n        }\r\n\r\n       // Apply the configuration\r\n        if (configuration != null) {\r\n            // This part is often the same (or close) for every Vert.x client:\r\n            cfg.setSsl(true);\r\n\r\n            if (configuration.getTrustStoreOptions() != null) {\r\n                cfg.setTrustOptions(configuration.getTrustStoreOptions());\r\n            }\r\n\r\n           // For mTLS:\r\n            if (configuration.getKeyStoreOptions() != null) {\r\n                cfg.setKeyCertOptions(configuration.getKeyStoreOptions());\r\n            }\r\n\r\n            if (configuration.isTrustAll()) {\r\n                cfg.setTrustAll(true);\r\n            }\r\n            if (configuration.getHostnameVerificationAlgorithm().isPresent()) {\r\n               // ACHTUNG HERE - this is protocol specific. The HTTP-based protocols should use HTTPS by default. \r\n                cfg.setHostnameVerificationAlgorithm(configuration.getHostnameVerificationAlgorithm().get());\r\n            }\r\n\r\n            SSLOptions sslOptions = configuration.getSSLOptions();\r\n            if (sslOptions != null) {\r\n                cfg.setSslHandshakeTimeout(sslOptions.getSslHandshakeTimeout());\r\n                cfg.setSslHandshakeTimeoutUnit(sslOptions.getSslHandshakeTimeoutUnit());\r\n                for (String suite : sslOptions.getEnabledCipherSuites()) {\r\n                    cfg.addEnabledCipherSuite(suite);\r\n                }\r\n                for (Buffer buffer : sslOptions.getCrlValues()) {\r\n                    cfg.addCrlValue(buffer);\r\n                }\r\n                cfg.setEnabledSecureTransportProtocols(sslOptions.getEnabledSecureTransportProtocols());\r\n\r\n            }\r\n\r\n        } else {\r\n           // Mailer specific configuration (very incomplete as you can see:\r\n            boolean trustAll = config.trustAll.isPresent() ? config.trustAll.get() : globalTrustAll;\r\n            cfg.setSsl(config.ssl);\r\n            cfg.setTrustAll(trustAll);\r\n            applyTruststore(config, cfg);\r\n        }\r\n    }\r\n```",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/41000/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41000/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
