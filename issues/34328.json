{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/34328",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34328/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34328/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34328/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/34328",
  "id": 1776253551,
  "node_id": "I_kwDOCFbutM5p33pv",
  "number": 34328,
  "title": "Handling views with Panache",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1273026134,
      "node_id": "MDU6TGFiZWwxMjczMDI2MTM0",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/panache",
      "name": "area/panache",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 1,
  "created_at": "2023-06-27T07:16:22Z",
  "updated_at": "2024-08-14T15:11:10Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Description\n\nUsing views with Quarkus / panache is today a bit tricky. \r\nWith version 3 this aint working anymore. \r\nI used to \r\n- create an entity bound to a table that in reality is a view\r\n- create a migration script that delete the table and create my view\r\n\r\nWith Quarkus 3 this aint working anymore. \r\n\r\nSo now I found another solution with using ```@SubSelect```.  \n\n### Implementation ideas\n\nMaybe we could have something similar as Spring boot \r\n\r\n```java\r\n@Entity\r\n@Immutable\r\n@Table(name= \"myview\")\r\npublic class ChessGameView {\r\n \r\n    @Id\r\n    private Long id;\r\n \r\n    private int gameRound;\r\n \r\n    private String tournamentName;\r\n \r\n    public Long getId() {\r\n        return id;\r\n    }\r\n \r\n    public int getGameRound() {\r\n        return gameRound;\r\n    }\r\n \r\n    public String getTournamentName() {\r\n        return tournamentName;\r\n    }\r\n}\r\n```\r\n\r\nOr something way easyer\r\n\r\n```java\r\n@EntityView(name= \"my_view\")\r\npublic class ChessGameView {\r\n \r\n    @Id\r\n    private Long id;\r\n \r\n    private int gameRound;\r\n \r\n    private String tournamentName;\r\n \r\n    public Long getId() {\r\n        return id;\r\n    }\r\n \r\n    public int getGameRound() {\r\n        return gameRound;\r\n    }\r\n \r\n    public String getTournamentName() {\r\n        return tournamentName;\r\n    }\r\n}\r\n```\r\n\r\nMaybe there's some other better choice of handling this with quarkus but there is nothing about it. \r\nCould be helpful to add something about this in the panache wiki. \r\n\r\n(Good job about this Quarkus 3 release, really loving all that new stuff)",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/34328/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34328/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
