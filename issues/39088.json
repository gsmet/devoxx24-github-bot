{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/39088",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39088/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39088/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39088/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/39088",
  "id": 2161254235,
  "node_id": "I_kwDOCFbutM6A0h9b",
  "number": 39088,
  "title": "Solve POM formatting issues when creating project/adding extension/removing extension",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1800003265,
      "node_id": "MDU6TGFiZWwxODAwMDAzMjY1",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/devtools",
      "name": "area/devtools",
      "color": "0366d6",
      "default": false,
      "description": "Issues/PR related to maven, gradle, platform and cli tooling/plugins"
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/328",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/328",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/328/labels",
    "id": 11051630,
    "node_id": "MI_kwDOCFbutM4AqKJu",
    "number": 328,
    "title": "3.8.5",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 112,
    "state": "closed",
    "created_at": "2024-05-14T13:22:35Z",
    "updated_at": "2024-06-05T11:10:12Z",
    "due_on": null,
    "closed_at": "2024-06-05T11:10:12Z"
  },
  "comments": 2,
  "created_at": "2024-02-29T13:25:30Z",
  "updated_at": "2024-05-15T15:18:55Z",
  "closed_at": "2024-03-19T22:46:56Z",
  "active_lock_reason": null,
  "body": "I create one unified issue to solve these problems globally as they are highly intertwined.\r\n\r\nOriginal issues: https://github.com/quarkusio/quarkus/issues/6137, https://github.com/quarkusio/quarkus/issues/39048\r\n\r\n# Problem to solve\r\n\r\n## POM format when creating project\r\n\r\nOur initial POM file created by the project generator is poorly formatted.\r\n\r\nI'm not sure how to solve this problem, if it's a matter of updating codestarts or if we need adjustments to https://github.com/fabric8-launcher/maven-model-helper/ . \r\n\r\nNote that we can't really count on all codestarts to have consistent formatting.\r\n\r\nIdeally, I would like our generated POM to:\r\n\r\n- be indented with 4 spaces as it's the convention used by the Quarkus project - that should probably be handled by the library\r\n- insert a blank line between major sections  (`<properties>`, `<dependencies>`...) - this was requested by a user and it makes a lot of sense given we do exactly that when we create a POM file manually - if not easy to add to the library, a regexp to replace `^    <[^/]` and add a new line should do the trick\r\n\r\n## Adding extensions\r\n\r\nCurrently, when adding an extension, the whole POM is rewritten, comments are lost... At some point it also reordered the properties and the dependencies. Not sure if it's still the case but we don't want that either.\r\n\r\nWhen adding an extension, no other changes than the added dependency should be made to the POM file.\r\n\r\nAlso, ideally, we should add the extension before the first test scoped dependency.\r\n\r\n## Removing extensions\r\n\r\nCurrently, when removing an extension, the whole POM is rewritten, comments are lost...\r\n\r\nRemoving an extension shouldn't make any change to the POM file.\r\n\r\n# Implementation ideas\r\n\r\n## Creating project\r\n\r\nAll this should either be handled in https://github.com/fabric8-launcher/maven-model-helper/ or by postprocessing the output to beautify it.\r\n\r\n## Adding/Removing extensions\r\n\r\nEither this is implemented in https://github.com/fabric8-launcher/maven-model-helper/ but we need to make sure it doesn't apply any unwanted change to the POM.\r\nNot sure how realistic that is.\r\n\r\nOr we could use the decentxml library (https://central.sonatype.com/artifact/de.pdark/decentxml). This library is used in some of our components, for instance Camel and I think I have seen it used elsewhere too.\r\n\r\nThis library seems to keep the formatting (it basically considers everything as `Node` including whitespace).\r\n\r\nVarious projects can be used for testing such as:\r\n- https://github.com/quarkusio/quarkus-github-bot/\r\n- https://github.com/quarkusio/search.quarkus.io\r\n\r\nA quick POC adding an extension (but some additional corner cases need to be handled) is as follows:\r\n\r\n```java\r\npackage io.quarkus.bot.release;\r\n\r\nimport java.io.IOException;\r\nimport java.io.Writer;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\n\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport de.pdark.decentxml.Document;\r\nimport de.pdark.decentxml.Element;\r\nimport de.pdark.decentxml.Node;\r\nimport de.pdark.decentxml.XMLIOSource;\r\nimport de.pdark.decentxml.XMLParser;\r\nimport de.pdark.decentxml.XMLSource;\r\nimport de.pdark.decentxml.XMLWriter;\r\n\r\npublic class XmlTest {\r\n\r\n    @Test\r\n    public void testXml() throws IOException {\r\n        XMLSource xmlSource = new XMLIOSource(Path.of(\"pom.xml\").toAbsolutePath().toFile());\r\n        XMLParser xmlParser = new XMLParser();\r\n        Document document = xmlParser.parse(xmlSource);\r\n\r\n        // TODO handle non-existent or empty dependencies node\r\n        Element dependenciesNode = document.getChild(\"/project/dependencies\");\r\n\r\n        int index = 0;\r\n        Element dependencyToCopy = null;\r\n        for (Node dependenciesChildNode : dependenciesNode.getNodes()) {\r\n            if (!(dependenciesChildNode instanceof Element)) {\r\n                index++;\r\n                continue;\r\n            }\r\n\r\n            Element dependencyNode = (Element) dependenciesChildNode;\r\n\r\n            if (dependencyNode.getChild(\"scope\") != null && \"test\".equals(dependencyNode.getChild(\"scope\").getTrimmedText())) {\r\n                break;\r\n            }\r\n            index++;\r\n            dependencyToCopy = dependencyNode;\r\n        }\r\n\r\n        Node blankLineNode = dependenciesNode.getNode(index - 1);\r\n        dependenciesNode.addNodes(index, createExtensionElement(dependencyToCopy, \"io.quarkiverse.githubaction\", \"quarkus-github-action\", \"2.2.0\"), blankLineNode);\r\n\r\n        try (Writer writer = Files.newBufferedWriter(Path.of(\"new-pom.xml\"), StandardCharsets.UTF_8)) {\r\n            document.toXML(new XMLWriter(writer));\r\n        }\r\n    }\r\n\r\n    private Element createExtensionElement(Element dependencyToCopy,String groupId, String artifactId, String version) {\r\n        if (dependencyToCopy != null) {\r\n            Element dependency = dependencyToCopy.copy();\r\n            dependency.getChild(\"groupId\").setText(groupId);\r\n            dependency.getChild(\"artifactId\").setText(artifactId);\r\n            dependency.getChild(\"version\").setText(version);\r\n\r\n            Element scope = dependency.getChild(\"scope\");\r\n            if (scope != null) {\r\n                dependency.removeNode(scope);\r\n            }\r\n\r\n            // TODO clean up other nodes\r\n\r\n            return dependency;\r\n        }\r\n\r\n        // TODO better handle spacing in this case\r\n        Element dependency = new Element(\"dependency\");\r\n        dependency.addNode(new Element(\"groupId\").setText(groupId));\r\n        dependency.addNode(new Element(\"artifactId\").setText(artifactId));\r\n        dependency.addNode(new Element(\"version\").setText(version));\r\n        return dependency;\r\n    }\r\n}\r\n```",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/39088/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39088/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
