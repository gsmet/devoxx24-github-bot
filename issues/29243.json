{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/29243",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29243/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29243/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29243/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/29243",
  "id": 1447140411,
  "node_id": "I_kwDOCFbutM5WQZw7",
  "number": 29243,
  "title": "AWS APIGatewayManagementAPI - Native image build failure Random/SplittableRandom GraalVM",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1326073020,
      "node_id": "MDU6TGFiZWwxMzI2MDczMDIw",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/amazon-lambda",
      "name": "area/amazon-lambda",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 2497075451,
      "node_id": "MDU6TGFiZWwyNDk3MDc1NDUx",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/native-image",
      "name": "area/native-image",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 1,
  "created_at": "2022-11-13T23:18:01Z",
  "updated_at": "2024-08-28T09:16:44Z",
  "closed_at": "2024-08-28T09:16:44Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\n\nI'm trying to bridge a couple of AWS services together and having some trouble. I'm using API Gateway WebSockets and would like to \"use\" or \"access\" my WebSocket [connections](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-how-to-call-websocket-api-connections.html) in my Quarkus Funky Lambda using [APIGatewayManagementAPI](https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/apigatewaymanagementapi/AmazonApiGatewayManagementApiClient.html). I don't know if there is support for this AWS functionality or if I'm missing something .. API Gateway is pretty commonly used. \r\n\r\nI'd like to be able to [send data](https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/apigatewaymanagementapi/model/PostToConnectionRequest.html) to any WebSocket connection (or [DeleteConnectionRequest](https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/apigatewaymanagementapi/model/DeleteConnectionRequest.html)), using the aws-lambda-java APIGatewayV2WebSocketEvent [connectionId](https://github.com/aws/aws-lambda-java-libs/blob/master/aws-lambda-java-events/src/main/java/com/amazonaws/services/lambda/runtime/events/APIGatewayV2WebSocketEvent.java#L229). To achieve this in Java I was able to locate the aws-java-sdk-apigatewaymanagementapi dependency .. and unfortunately I've run into build-native.\r\n\r\n**Code I'd like to use**\r\n```\r\n@Funq\r\npublic APIGatewayProxyResponseEvent handle(APIGatewayV2WebSocketEvent input) {\r\n\t// Grab the connectionId from the WebSocket event\r\n\tSystem.out.println(\"ConnectionID: \" + input.getRequestContext().getConnectionId()); // Working\r\n\r\n\t// Try accessing the WebSocket Connection via AmazonAPIGatewayAPI \r\n\t// and try to post data to this particular Connection\r\n\t// in the future, there may be other Connections that need to be \"managed\" here \r\n\t// with connectionIds maintained in  DynamoDB \r\n\tAmazonApiGatewayManagementApi api = AmazonApiGatewayManagementApiClientBuilder.standard().withEndpointConfiguration( new EndpointConfiguration(\"{api-id}.execute-api.{region}.amazonaws.com/{stage}\", \"{region}\") ).build();\r\n\tPostToConnectionRequest post = new PostToConnectionRequest(); \r\n\tpost.setConnectionId(input.getRequestContext().getConnectionId()); \r\n\tpost.setData(ByteBuffer.wrap(\"the message\".getBytes())); \r\n\tapi.postToConnection(post); // Calling this method crashes causes build-natives fails\r\n}\r\n```\r\n\r\n**The AWS dependency I'd like to use**\r\n```\r\n<dependency>\r\n    \t<groupId>com.amazonaws</groupId>\r\n    \t<artifactId>aws-java-sdk-apigatewaymanagementapi</artifactId>\r\n    \t<version>1.12.341</version>\r\n</dependency>\r\n```\r\n\r\n**Nasty errors!**\r\n```\r\nError: Unsupported features in 3 methods\r\nDetailed message:\r\nError: Detected an instance of Random/SplittableRandom class in the image heap. Instances created during image generation have cached seed values and don't behave as expected.  Object has been initialized by the com.amazonaws.ClientConfiguration class initializer with a trace:\r\n        at java.util.Random.<init>(Random.java:109)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy.<init>(PredefinedBackoffStrategies.java:101)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy.<init>(PredefinedBackoffStrategies.java:150)\r\n        at com.amazonaws.retry.PredefinedRetryPolicies.<clinit>(PredefinedRetryPolicies.java:82)\r\n        at com.amazonaws.ClientConfiguration.<clinit>(ClientConfiguration.java:89)\r\n. Try avoiding to initialize the class that caused initialization of the object. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\r\nTrace: Object was reached by\r\n  reading field com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy.random of constant\r\n    com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy@154a1d7a: com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy@154a1...\r\n  reading field com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy.equalJitterBackoffStrategy of constant\r\n    com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c719c: com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c71...\r\n  scanning root com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c719c: com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c71... embedded in\r\n    com.amazonaws.retry.PredefinedRetryPolicies.getDefaultBackoffStrategy(PredefinedRetryPolicies.java:110)\r\nError: Detected an instance of Random/SplittableRandom class in the image heap. Instances created during image generation have cached seed values and don't behave as expected.  Object has been initialized by the com.amazonaws.ClientConfiguration class initializer with a trace:\r\n        at java.util.Random.<init>(Random.java:109)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy.<init>(PredefinedBackoffStrategies.java:75)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy.<init>(PredefinedBackoffStrategies.java:148)\r\n        at com.amazonaws.retry.PredefinedRetryPolicies.<clinit>(PredefinedRetryPolicies.java:82)\r\n        at com.amazonaws.ClientConfiguration.<clinit>(ClientConfiguration.java:89)\r\n. Try avoiding to initialize the class that caused initialization of the object. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\r\nTrace: Object was reached by\r\n  reading field com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy.random of constant\r\n    com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@2cb3cd33: com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@2cb3cd...\r\n  reading field com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy.fullJitterBackoffStrategy of constant\r\n    com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c719c: com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c71...\r\n  scanning root com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c719c: com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c71... embedded in\r\n    com.amazonaws.retry.PredefinedRetryPolicies.getDefaultBackoffStrategy(PredefinedRetryPolicies.java:110)\r\nError: Detected an instance of Random/SplittableRandom class in the image heap. Instances created during image generation have cached seed values and don't behave as expected.  Object has been initialized by the com.amazonaws.retry.PredefinedBackoffStrategies class initializer with a trace:\r\n        at java.util.Random.<init>(Random.java:109)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy.<init>(PredefinedBackoffStrategies.java:75)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies.<clinit>(PredefinedBackoffStrategies.java:64)\r\n. Try avoiding to initialize the class that caused initialization of the object. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\r\nTrace: Object was reached by\r\n  reading field com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy.random of constant\r\n    com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@3abb2f68: com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@3abb2f...\r\n  scanning root com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@3abb2f68: com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@3abb2f... embedded in\r\n    com.amazonaws.retry.PredefinedRetryPolicies.getDefaultBackoffStrategy(PredefinedRetryPolicies.java:113)\r\n\r\ncom.oracle.svm.core.util.UserError$UserException: Unsupported features in 3 methods\r\nDetailed message:\r\nError: Detected an instance of Random/SplittableRandom class in the image heap. Instances created during image generation have cached seed values and don't behave as expected.  Object has been initialized by the com.amazonaws.ClientConfiguration class initializer with a trace:\r\n        at java.util.Random.<init>(Random.java:109)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy.<init>(PredefinedBackoffStrategies.java:101)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy.<init>(PredefinedBackoffStrategies.java:150)\r\n        at com.amazonaws.retry.PredefinedRetryPolicies.<clinit>(PredefinedRetryPolicies.java:82)\r\n        at com.amazonaws.ClientConfiguration.<clinit>(ClientConfiguration.java:89)\r\n. Try avoiding to initialize the class that caused initialization of the object. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\r\nTrace: Object was reached by\r\n  reading field com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy.random of constant\r\n    com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy@154a1d7a: com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy@154a1...\r\n  reading field com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy.equalJitterBackoffStrategy of constant\r\n    com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c719c: com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c71...\r\n  scanning root com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c719c: com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c71... embedded in\r\n    com.amazonaws.retry.PredefinedRetryPolicies.getDefaultBackoffStrategy(PredefinedRetryPolicies.java:110)\r\nError: Detected an instance of Random/SplittableRandom class in the image heap. Instances created during image generation have cached seed values and don't behave as expected.  Object has been initialized by the com.amazonaws.ClientConfiguration class initializer with a trace:\r\n        at java.util.Random.<init>(Random.java:109)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy.<init>(PredefinedBackoffStrategies.java:75)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy.<init>(PredefinedBackoffStrategies.java:148)\r\n        at com.amazonaws.retry.PredefinedRetryPolicies.<clinit>(PredefinedRetryPolicies.java:82)\r\n        at com.amazonaws.ClientConfiguration.<clinit>(ClientConfiguration.java:89)\r\n. Try avoiding to initialize the class that caused initialization of the object. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\r\nTrace: Object was reached by\r\n  reading field com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy.random of constant\r\n    com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@2cb3cd33: com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@2cb3cd...\r\n  reading field com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy.fullJitterBackoffStrategy of constant\r\n    com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c719c: com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c71...\r\n  scanning root com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c719c: com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c71... embedded in\r\n    com.amazonaws.retry.PredefinedRetryPolicies.getDefaultBackoffStrategy(PredefinedRetryPolicies.java:110)\r\nError: Detected an instance of Random/SplittableRandom class in the image heap. Instances created during image generation have cached seed values and don't behave as expected.  Object has been initialized by the com.amazonaws.retry.PredefinedBackoffStrategies class initializer with a trace:\r\n        at java.util.Random.<init>(Random.java:109)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy.<init>(PredefinedBackoffStrategies.java:75)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies.<clinit>(PredefinedBackoffStrategies.java:64)\r\n. Try avoiding to initialize the class that caused initialization of the object. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\r\nTrace: Object was reached by\r\n  reading field com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy.random of constant\r\n    com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@3abb2f68: com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@3abb2f...\r\n  scanning root com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@3abb2f68: com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@3abb2f... embedded in\r\n    com.amazonaws.retry.PredefinedRetryPolicies.getDefaultBackoffStrategy(PredefinedRetryPolicies.java:113)\r\n\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.util.UserError.abort(UserError.java:85)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.FallbackFeature.reportAsFallback(FallbackFeature.java:248)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.runPointsToAnalysis(NativeImageGenerator.java:776)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:578)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.run(NativeImageGenerator.java:535)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.buildImage(NativeImageGeneratorRunner.java:403)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.build(NativeImageGeneratorRunner.java:580)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.main(NativeImageGeneratorRunner.java:128)\r\nCaused by: com.oracle.graal.pointsto.constraints.UnsupportedFeatureException: Unsupported features in 3 methods\r\nDetailed message:\r\nError: Detected an instance of Random/SplittableRandom class in the image heap. Instances created during image generation have cached seed values and don't behave as expected.  Object has been initialized by the com.amazonaws.ClientConfiguration class initializer with a trace:\r\n        at java.util.Random.<init>(Random.java:109)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy.<init>(PredefinedBackoffStrategies.java:101)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy.<init>(PredefinedBackoffStrategies.java:150)\r\n        at com.amazonaws.retry.PredefinedRetryPolicies.<clinit>(PredefinedRetryPolicies.java:82)\r\n        at com.amazonaws.ClientConfiguration.<clinit>(ClientConfiguration.java:89)\r\n. Try avoiding to initialize the class that caused initialization of the object. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\r\nTrace: Object was reached by\r\n  reading field com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy.random of constant\r\n    com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy@154a1d7a: com.amazonaws.retry.PredefinedBackoffStrategies$EqualJitterBackoffStrategy@154a1...\r\n  reading field com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy.equalJitterBackoffStrategy of constant\r\n    com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c719c: com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c71...\r\n  scanning root com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c719c: com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c71... embedded in\r\n    com.amazonaws.retry.PredefinedRetryPolicies.getDefaultBackoffStrategy(PredefinedRetryPolicies.java:110)\r\nError: Detected an instance of Random/SplittableRandom class in the image heap. Instances created during image generation have cached seed values and don't behave as expected.  Object has been initialized by the com.amazonaws.ClientConfiguration class initializer with a trace:\r\n        at java.util.Random.<init>(Random.java:109)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy.<init>(PredefinedBackoffStrategies.java:75)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy.<init>(PredefinedBackoffStrategies.java:148)\r\n        at com.amazonaws.retry.PredefinedRetryPolicies.<clinit>(PredefinedRetryPolicies.java:82)\r\n        at com.amazonaws.ClientConfiguration.<clinit>(ClientConfiguration.java:89)\r\n. Try avoiding to initialize the class that caused initialization of the object. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\r\nTrace: Object was reached by\r\n  reading field com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy.random of constant\r\n    com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@2cb3cd33: com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@2cb3cd...\r\n  reading field com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy.fullJitterBackoffStrategy of constant\r\n    com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c719c: com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c71...\r\n  scanning root com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c719c: com.amazonaws.retry.PredefinedBackoffStrategies$SDKDefaultBackoffStrategy@328c71... embedded in\r\n    com.amazonaws.retry.PredefinedRetryPolicies.getDefaultBackoffStrategy(PredefinedRetryPolicies.java:110)\r\nError: Detected an instance of Random/SplittableRandom class in the image heap. Instances created during image generation have cached seed values and don't behave as expected.  Object has been initialized by the com.amazonaws.retry.PredefinedBackoffStrategies class initializer with a trace:\r\n        at java.util.Random.<init>(Random.java:109)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy.<init>(PredefinedBackoffStrategies.java:75)\r\n        at com.amazonaws.retry.PredefinedBackoffStrategies.<clinit>(PredefinedBackoffStrategies.java:64)\r\n. Try avoiding to initialize the class that caused initialization of the object. The object was probably created by a class initializer and is reachable from a static field. You can request class initialization at image runtime by using the option --initialize-at-run-time=<class-name>. Or you can write your own initialization methods and call them explicitly from your main entry point.\r\nTrace: Object was reached by\r\n  reading field com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy.random of constant\r\n    com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@3abb2f68: com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@3abb2f...\r\n  scanning root com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@3abb2f68: com.amazonaws.retry.PredefinedBackoffStrategies$FullJitterBackoffStrategy@3abb2f... embedded in\r\n    com.amazonaws.retry.PredefinedRetryPolicies.getDefaultBackoffStrategy(PredefinedRetryPolicies.java:113)\r\n\r\n        at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.constraints.UnsupportedFeatures.report(UnsupportedFeatures.java:129)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.runPointsToAnalysis(NativeImageGenerator.java:771)\r\n        ... 5 more\r\n```\r\n\r\nI've been trying to debug this and have messed around with some additional args: \r\n`quarkus.native.additional-build-args=--initialize-at-run-time=org.apache.http.impl.auth.NTLMEngineImpl, --trace-object-instantiation=java.util.Random\r\n`\r\n\r\nI also inspected the `aws-java-sdk-apigatewaymanagementapi` artifact and detected potential problems with the `joda-time` artifact, and have excluded it from my pom.xml in an attempt to get this compiled.\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\nMicrosoft Windows [Version 10.0.19044.2251]\n\n### Output of `java -version`\n\nopenjdk version \"17.0.5\" 2022-10-18 OpenJDK Runtime Environment GraalVM CE 22.3.0 (build 17.0.5+8-jvmci-22.3-b08) OpenJDK 64-Bit Server VM GraalVM CE 22.3.0 (build 17.0.5+8-jvmci-22.3-b08, mixed mode, sharing)\n\n### GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n<quarkus.platform.version>2.14.0.Final</quarkus.platform.version>\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\nApache Maven 3.8.6 (84538c9988a25aec085021c365c560670ad80f63) Maven home: C:\\Users\\Bry\\.m2\\wrapper\\dists\\apache-maven-3.8.6-bin\\67568434\\apache-maven-3.8.6 Java version: 17.0.5, vendor: GraalVM Community, runtime: C:\\Program Files (x86)\\Java\\jdks\\graalvm-ce-java17-22.3.0 Default locale: en_US, platform encoding: Cp1252 OS name: \"windows 10\", version: \"10.0\", arch: \"amd64\", family: \"windows\"\n\n### Additional information\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/29243/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29243/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
