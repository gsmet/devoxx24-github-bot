{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/29496",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29496/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29496/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29496/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/29496",
  "id": 1464733861,
  "node_id": "I_kwDOCFbutM5XThCl",
  "number": 29496,
  "title": "Class 'Contact' is not registered for polymorphic serialization in the scope of 'IContact'",
  "labels": [
    {
      "id": 1287515315,
      "node_id": "MDU6TGFiZWwxMjg3NTE1MzE1",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/kotlin",
      "name": "area/kotlin",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 2744442223,
      "node_id": "MDU6TGFiZWwyNzQ0NDQyMjIz",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/triage/needs-reproducer",
      "name": "triage/needs-reproducer",
      "color": "FDE078",
      "default": false,
      "description": "We are waiting for a reproducer."
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 6,
  "created_at": "2022-11-25T16:16:43Z",
  "updated_at": "2023-01-05T18:18:42Z",
  "closed_at": "2023-01-05T18:18:42Z",
  "active_lock_reason": null,
  "body": "I opened an issue at the `kotlinx.serialization` repository, but after validating that the serialization works in my main-method, but not in Quarkus, and after seeing issues like #28996, I thought this would probably be a better location. \r\n\r\nC&P from the original ticket:\r\n\r\n\r\n**Describe the bug**\r\nI am unable to serialize my objects successfully using polymorphic.\r\n\r\n```kotlin\r\nkotlinx.serialization.SerializationException: Class 'Contact' is not registered for polymorphic serialization in the scope of 'IContact'.\r\nMark the base class as 'sealed' or register the serializer explicitly.\r\n\tat kotlinx.serialization.internal.AbstractPolymorphicSerializerKt.throwSubtypeNotRegistered(AbstractPolymorphicSerializer.kt:102)\r\n\tat kotlinx.serialization.internal.AbstractPolymorphicSerializerKt.throwSubtypeNotRegistered(AbstractPolymorphicSerializer.kt:113)\r\n\tat kotlinx.serialization.PolymorphicSerializerKt.findPolymorphicSerializer(PolymorphicSerializer.kt:109)\r\n\tat kotlinx.serialization.json.internal.StreamingJsonEncoder.encodeSerializableValue(StreamingJsonEncoder.kt:229)\r\n\tat kotlinx.serialization.encoding.Encoder$DefaultImpls.encodeNullableSerializableValue(Encoding.kt:299)\r\n\tat kotlinx.serialization.encoding.AbstractEncoder.encodeNullableSerializableValue(AbstractEncoder.kt:18)\r\n\tat kotlinx.serialization.encoding.AbstractEncoder.encodeNullableSerializableElement(AbstractEncoder.kt:90)\r\n\tat kotlinx.serialization.json.internal.StreamingJsonEncoder.encodeNullableSerializableElement(StreamingJsonEncoder.kt:154)\r\n\tat de.app.model.user.User.write$Self(User.kt:21)\r\n\tat de.app.model.user.User$$serializer.serialize(User.kt:21)\r\n\tat de.app.model.user.User$$serializer.serialize(User.kt:21)\r\n\tat kotlinx.serialization.json.internal.StreamingJsonEncoder.encodeSerializableValue(StreamingJsonEncoder.kt:224)\r\n\tat kotlinx.serialization.json.internal.JsonStreamsKt.encodeByWriter(JsonStreams.kt:28)\r\n\tat kotlinx.serialization.json.JvmStreamsKt.encodeToStream(JvmStreams.kt:25)\r\n\tat io.quarkus.resteasy.reactive.kotlin.serialization.runtime.KotlinSerializationMessageBodyWriter.writeResponse(KotlinSerializationMessageBodyWriter.kt:44)\r\n\tat org.jboss.resteasy.reactive.server.core.ServerSerialisers.invokeWriter(ServerSerialisers.java:220)\r\n\tat org.jboss.resteasy.reactive.server.core.serialization.DynamicEntityWriter.write(DynamicEntityWriter.java:106)\r\n\tat org.jboss.resteasy.reactive.server.handlers.ResponseWriterHandler.handle(ResponseWriterHandler.java:32)\r\n\tat io.quarkus.resteasy.reactive.server.runtime.QuarkusResteasyReactiveRequestContext.invokeHandler(QuarkusResteasyReactiveRequestContext.java:120)\r\n\tat org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext.run(AbstractResteasyReactiveContext.java:145)\r\n\tat org.jboss.resteasy.reactive.server.vertx.VertxResteasyReactiveRequestContext$1$1.handle(VertxResteasyReactiveRequestContext.java:78)\r\n\tat org.jboss.resteasy.reactive.server.vertx.VertxResteasyReactiveRequestContext$1$1.handle(VertxResteasyReactiveRequestContext.java:75)\r\n\tat io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:264)\r\n\tat io.vertx.core.impl.ContextInternal.dispatch(ContextInternal.java:246)\r\n\tat io.vertx.core.impl.EventLoopContext.lambda$runOnContext$0(EventLoopContext.java:43)\r\n\tat io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:174)\r\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:167)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:470)\r\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:569)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\r\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.base/java.lang.Thread.run(Thread.java:833)\r\n```\r\n\r\n\r\n**To Reproduce**\r\n\r\n```kotlin\r\n@Serializable\r\nopen class User (\r\n    override var firstname: String,\r\n    override var lastname: String,\r\n\r\n) : BaseModel(), IUser {\r\n    override var contact: IContact? = null\r\n}\r\n```\r\n\r\n```kotlin\r\n@Serializable\r\nclass Contact(\r\n    override var telephone: String,\r\n    override var email: String,\r\n    \r\n) : BaseModel(), IContact { }\r\n```\r\n\r\n```kotlin\r\n@Serializable\r\n@MappedSuperclass\r\nabstract class BaseModel(\r\n    override var id: Long = 0\r\n) :  PanacheEntity(), IBaseModel\r\n```\r\n\r\nI've tried setting op polymorphism using different combinations of the following code in my main method, which did not help:\r\n```kotlin\r\nval module = SerializersModule {\r\n\r\n    polymorphic(IUser::class) {\r\n        subclass(User::class, User.serializer())\r\n    }\r\n\r\n    polymorphic(IContactInfo::class) {\r\n        subclass(ContactInfo::class, ContactInfo.serializer())\r\n    }\r\n}\r\nval format = Json { serializersModule = module }\r\n```\r\n\r\n**More info:**\r\nSerialization in my main method like the following does work:\r\n```kotlin\r\nval user: IUser = User(\"A\", \"B\")\r\nval data: IContact = Contact(\"9\", \"8\")\r\nuser.contact = data\r\nprintln(format.encodeToString(user))\r\n```\r\n\r\nSerializing a `Contact`, or an `User` with `Contact` set to `null` on my endpoint also seems to work. Only when the user has an initialized `Contact`, then I receive the error above. And only on my endpoint. The same setup in my main-method seems to work just fine.\r\n\r\n\r\n**Environment**\r\n - Kotlin version: 1.7.21\r\n - Library version: 1.4.0\r\n - Kotlin platforms: JVM (Quarkus)\r\n - Gradle version: 7.5.1\r\n",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/29496/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29496/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
