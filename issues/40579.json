{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40579",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40579/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40579/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40579/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/40579",
  "id": 2291301685,
  "node_id": "I_kwDOCFbutM6Ikn01",
  "number": 40579,
  "title": "`@TenantFeature` is used instead of `@Tenant` with OIDC `TenantIdentityProvider`",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1479557456,
      "node_id": "MDU6TGFiZWwxNDc5NTU3NDU2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/oidc",
      "name": "area/oidc",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/329",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/329",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/329/labels",
    "id": 11056804,
    "node_id": "MI_kwDOCFbutM4AqLak",
    "number": 329,
    "title": "3.12.0.CR1",
    "description": "",
    "creator": {
      "login": "quarkusbot",
      "id": 61254497,
      "node_id": "MDQ6VXNlcjYxMjU0NDk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/61254497?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/quarkusbot",
      "html_url": "https://github.com/quarkusbot",
      "followers_url": "https://api.github.com/users/quarkusbot/followers",
      "following_url": "https://api.github.com/users/quarkusbot/following{/other_user}",
      "gists_url": "https://api.github.com/users/quarkusbot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/quarkusbot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/quarkusbot/subscriptions",
      "organizations_url": "https://api.github.com/users/quarkusbot/orgs",
      "repos_url": "https://api.github.com/users/quarkusbot/repos",
      "events_url": "https://api.github.com/users/quarkusbot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/quarkusbot/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 195,
    "state": "closed",
    "created_at": "2024-05-15T09:27:54Z",
    "updated_at": "2024-07-04T18:19:16Z",
    "due_on": null,
    "closed_at": "2024-06-12T11:16:44Z"
  },
  "comments": 4,
  "created_at": "2024-05-12T12:00:24Z",
  "updated_at": "2024-06-26T07:06:44Z",
  "closed_at": "2024-05-26T11:07:01Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nWhen `quarkus-oidc` is used, bearer access tokens are usually verified as part of the HTTP request processing, for example:\r\n\r\n```\r\n@Authenticated\r\npublic class Service {\r\n   @GET \r\n   String get() {}\r\n}\r\n``` \r\n\r\nThe `get` method is called only when the token available in `Authorization: Bearer <token>` is verified.\r\n\r\nOr, we can also support an out of band token verification, when the request has already completed, see https://quarkus.io/guides/security-oidc-bearer-token-authentication#authentication-after-an-http-request-has-completed, for example:\r\n\r\n```\r\npublic class EventService {\r\n   @Inject\r\n   TenantIdentityProvider provider;\r\n\r\n   void onMessage(String jsonMessage) {\r\n       provider.authenticate(extractTokenFromJson(jsonMessage));\r\n    }\r\n}\r\n``` \r\n\r\nIn both cases, the same default OIDC tenant configuration is used to verify the token, the only difference is the timing of this token verification.\r\n\r\nNow, if we have, lets say 4 OIDC providers, one can choose which tenant should be used to verify the token. \r\n\r\nThe annotation which is used to choose a specific OIDC tenant for a token verification is `@Tenant`, for example, when the token is processed during the request we have:\r\n\r\n```\r\n@Authenticated\r\n@Tenant(\"github\")\r\npublic class Service {\r\n   @GET \r\n   String get() {}\r\n}\r\n``` \r\n\r\nbut with the out of band verification, another annotation, `@TenantFeature` is used to select OIDC tenant which will be used to verify the token:\r\n\r\n```\r\npublic class EventService {\r\n   \r\n   @TenantFeature(\"github\")\r\n   @Inject\r\n   TenantIdentityProvider provider;\r\n\r\n   void onMessage(String jsonMessage) {\r\n       provider.authenticate(extractTokenFromJson(jsonMessage));\r\n    }\r\n}\r\n``` \r\n\r\n`@TenantFeature`'s role is to mark which features a given OIDC tenant can use during the token verification, for example, one tenant can choose to use a custom `Jose4jValidator`, another one a custom cert chain validator, etc. So in the last example it should be:\r\n\r\n```\r\npublic class EventService {\r\n   \r\n   @Tenant(\"github\")\r\n   @Inject\r\n   TenantIdentityProvider provider;\r\n\r\n   void onMessage(String jsonMessage) {\r\n       provider.authenticate(extractTokenFromJson(jsonMessage));\r\n    }\r\n}\r\n``` \r\n\r\nRecall, from the first 2 examples, the only difference between the during-the-request and after-the-request token processing is timing of the token verification.\r\n\r\nDoes it really matter, if `TenantIdentityProvider` is used with `@Tenant` as opposed to `@TenantFeature` ? \r\nProbably noone would have noticed a difference for a while, partly because it is an advanced case, where the token is chosen to be verified out of band in the presence of multiple OIDC providers.\r\n\r\nBut surprisingly, and may be, unexpectedly, this enhancement request, #40358, and the follow up discussion at  #40525, identified that using `@TenantFeature` with `@TenantIdentityProvider` is a problem if #40358 to be supported.\r\n\r\nThe enhancement #40358 is about updating `@TenantFeature` to bind a given feature to more than one tenant configuration. For example, if we have Keycloak, Auth0 and Okta, and a custom `Jose4jValidator`, a user may want to bind it only to Auth0 and Okta tenants for them to use this validator during the token verification.\r\n\r\nTherefore saying something like\r\n```\r\n@TenantFeature(\"auth0\", \"okta\")\r\n@Inject\r\nTenantIdentityProvider provider;\r\n```\r\n\r\nIntroduces an illegal state situation since for a given token, only a single OIDC tenant can be used to verify it. We can of course fail the build in such cases but then we'd need to explain to the users why users can have\r\n```\r\n@TenantFearture(\"auth0\", \"okta\")\r\nclass MyJose4jValidator implements Jose4jValidator {\r\n} \r\n```\r\n\r\nbut not\r\n```\r\n@TenantFeature(\"auth0\", \"okta\")\r\n@Inject\r\nTenantIdentityProvider provider;\r\n```\r\n\r\nI believe we have 2 options to deal with it:\r\n\r\n1. Leave things as they are, let users use `@TenantFeature` with `TenantIdentityProvider` - but then #40358 would have to be rejected in order to avoid having a workaround the fact `@TenantFeature` is not about selecting tenant configurations for the token verification\r\n2. Use `@Tenant` with `TokenIdentityProvider` - IMHO it is the correct fix but a breaking one. However a chance of users being impacted by it would be low due the advanced nature of this combination. \r\n\r\nif someone has other ideas then let me know please \r\n\r\n\r\n### Expected behavior\r\n\r\n_No response_\r\n\r\n### Actual behavior\r\n\r\n_No response_\r\n\r\n### How to Reproduce?\r\n\r\n_No response_\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\n_No response_\r\n\r\n### Output of `java -version`\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n_No response_\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\n_No response_\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40579/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40579/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
