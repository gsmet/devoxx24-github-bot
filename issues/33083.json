{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/33083",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/33083/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/33083/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/33083/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/33083",
  "id": 1693642178,
  "node_id": "I_kwDOCFbutM5k8u3C",
  "number": 33083,
  "title": "Error trying to make an optimistic transaction to ElastiCache using quarkus",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1808747697,
      "node_id": "MDU6TGFiZWwxODA4NzQ3Njk3",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/cache",
      "name": "area/cache",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 2184343143,
      "node_id": "MDU6TGFiZWwyMTg0MzQzMTQz",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/redis",
      "name": "area/redis",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 1,
  "created_at": "2023-05-03T08:45:46Z",
  "updated_at": "2024-08-24T12:17:34Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Describe the bug\n\nI trying to make an optimistic transaction using quarkus, quarkus-redis-client. sometimes the transaction failed. it is unclear what is the reason the transaction failed.\n\n### Expected behavior\n\nwhen it is failed the WithTransaction function throw this error:\r\n\r\njava.util.concurrent.CompletionException: ERR EXEC without MULTI\\n\\tat io.smallrye.mutiny.operators.uni.UniBlockingAwait.await(UniBlockingAwait.java:79)\\n\\tat io.smallrye.mutiny.groups.UniAwait.atMost(UniAwait.java:65)\\n\\tat com.deliveries.sanity.SanityCheckLambda.handleRequest(SanityCheckLambda.java:59)\\n\\tat com.deliveries.sanity.SanityCheckLambda.handleRequest(SanityCheckLambda.java:24)\\n\\tat io.quarkus.amazon.lambda.runtime.AmazonLambdaRecorder$1.processRequest(AmazonLambdaRecorder.java:167)\\n\\tat io.quarkus.amazon.lambda.runtime.AbstractLambdaPollLoop$1.run(AbstractLambdaPollLoop.java:137)\\n\\tat java.base@17.0.6/java.lang.Thread.run(Thread.java:833)\\n\\tat org.graalvm.nativeimage.builder/com.oracle.svm.core.thread.PlatformThreads.threadStartRoutine(PlatformThreads.java:775)\\n\\tat org.graalvm.nativeimage.builder/com.oracle.svm.core.posix.thread.PosixPlatformThreads.pthreadStartRoutine(PosixPlatformThreads.java:203)\\nCaused by: ERR EXEC without MULTI\\n\r\n\r\n\r\n\r\njava.lang.UnsupportedOperationException: This type doesn't hold a Bulk type\r\n    at io.vertx.redis.client.Response.toBuffer(Response.java:211)\r\n    at io.vertx.mutiny.redis.client.Response.toBuffer(Response.java:180)\r\n    at io.quarkus.redis.runtime.datasource.ReactiveJsonCommandsImpl.lambda$jsonGet$3(ReactiveJsonCommandsImpl.java:95)\r\n    at io.smallrye.context.impl.wrappers.SlowContextualFunction.apply(SlowContextualFunction.java:21)\r\n    at io.smallrye.mutiny.operators.uni.UniOnItemTransform$UniOnItemTransformProcessor.onItem(UniOnItemTransform.java:36)\r\n    at io.smallrye.mutiny.vertx.AsyncResultUni.lambda$subscribe$1(AsyncResultUni.java:35)\r\n    at io.smallrye.mutiny.vertx.DelegatingHandler.handle(DelegatingHandler.java:25)\r\n    at io.quarkus.redis.runtime.client.ObservableRedis.lambda$send$1(ObservableRedis.java:54)\r\n    at io.vertx.core.impl.future.FutureImpl$3.onSuccess(FutureImpl.java:141)\r\n    at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:60)\r\n    at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:211)\r\n    at io.vertx.core.impl.future.Composition$1.onSuccess(Composition.java:62)\r\n    at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:60)\r\n    at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:211)\r\n    at io.vertx.core.impl.future.Eventually$1.onSuccess(Eventually.java:44)\r\n    at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:60)\r\n    at io.vertx.core.impl.future.FutureImpl.addListener(FutureImpl.java:196)\r\n    at io.vertx.core.impl.future.Eventually.onSuccess(Eventually.java:41)\r\n    at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:60)\r\n    at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:211)\r\n    at io.vertx.core.impl.future.PromiseImpl.tryComplete(PromiseImpl.java:23)\r\n    at io.vertx.core.impl.future.PromiseImpl.onSuccess(PromiseImpl.java:49)\r\n    at io.vertx.core.impl.future.PromiseImpl.handle(PromiseImpl.java:41)\r\n    at io.vertx.core.impl.future.PromiseImpl.handle(PromiseImpl.java:23)\r\n    at io.vertx.redis.client.impl.RedisClusterConnection.lambda$send$7(RedisClusterConnection.java:330)\r\n    at io.vertx.core.impl.future.FutureImpl$3.onSuccess(FutureImpl.java:141)\r\n    at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:60)\r\n    at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:211)\r\n    at io.vertx.core.impl.future.PromiseImpl.tryComplete(PromiseImpl.java:23)\r\n    at io.vertx.redis.client.impl.RedisStandaloneConnection.handle(RedisStandaloneConnection.java:409)\r\n    at io.vertx.redis.client.impl.RESPParser.handleResponse(RESPParser.java:316)\r\n    at io.vertx.redis.client.impl.RESPParser.handleSimpleString(RESPParser.java:231)\r\n    at io.vertx.redis.client.impl.RESPParser.handle(RESPParser.java:82)\r\n    at io.vertx.redis.client.impl.RESPParser.handle(RESPParser.java:24)\r\n    at io.vertx.core.net.impl.NetSocketImpl.lambda$new$1(NetSocketImpl.java:100)\r\n    at io.vertx.core.streams.impl.InboundBuffer.handleEvent(InboundBuffer.java:239)\r\n    at io.vertx.core.streams.impl.InboundBuffer.write(InboundBuffer.java:129)\r\n    at io.vertx.core.net.impl.NetSocketImpl$DataMessageHandler.handle(NetSocketImpl.java:414)\r\n    at io.vertx.core.impl.EventLoopContext.emit(EventLoopContext.java:55)\r\n    at io.vertx.core.impl.ContextBase.emit(ContextBase.java:239)\r\n    at io.vertx.core.net.impl.NetSocketImpl.handleMessage(NetSocketImpl.java:390)\r\n    at io.vertx.core.net.impl.ConnectionBase.read(ConnectionBase.java:157)\r\n    at io.vertx.core.net.impl.VertxHandler.channelRead(VertxHandler.java:153)\r\n    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\r\n    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\r\n    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\r\n    at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\r\n    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\r\n    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\r\n    at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\r\n    at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\r\n    at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\r\n    at io.netty.channel.nio.NioEventLoop.processSelectedKeysPlain(NioEventLoop.java:689)\r\n    at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:652)\r\n    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\r\n    at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\r\n    at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n    at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n    at java.base@17.0.6/java.lang.Thread.run(Thread.java:833)\r\n    at org.graalvm.nativeimage.builder/com.oracle.svm.core.thread.PlatformThreads.threadStartRoutine(PlatformThreads.java:775)\r\n    at org.graalvm.nativeimage.builder/com.oracle.svm.core.posix.thread.PosixPlatformThreads.pthreadStartRoutine(PosixPlatformThreads.java:203)\r\n\n\n### Actual behavior\n\nthis is the function i use to make the optimistic locking sometimes it is failed and sometimes succeed.\r\n\r\n` public Uni<OptimisticLockingTransactionResult<Boolean>> setWithTransactions(String id, FullDelivery fullDelivery, long ttl) throws ExecutionException, InterruptedException {\r\n    Function<ReactiveRedisDataSource, Uni<Boolean>> conditionFunction = (ds ->\r\n            ds.json().jsonGetObject(this.fullDeliveryKeyName(id))\r\n                    .onItemOrFailure().transform((result,error) -> {\r\n                        if (Objects.nonNull(error)) {\r\n                            return false;\r\n                        }\r\n                        if (result == null) {\r\n                            return true;\r\n                        }\r\n                        return fullDelivery.getTimes().getEntryTime() >=\r\n                                result.mapTo(FullDelivery.class)\r\n                                        .getTimes()\r\n                                        .getEntryTime();\r\n                    })\r\n    );\r\n\r\n    BiFunction<Boolean, ReactiveTransactionalRedisDataSource, Uni<Void>> setFunction = ((greaterEntryTime, tx) -> {\r\n        ReactiveTransactionalJsonCommands<String> json = tx.json(String.class);\r\n        ReactiveTransactionalKeyCommands<String> key = tx.key(String.class);\r\n\r\n        if (Boolean.TRUE.equals(greaterEntryTime)) {\r\n            return Uni.join().all(\r\n                            json.jsonSet(this.fullDeliveryKeyName(id), \"$\", fullDelivery),\r\n                            key.expire(this.fullDeliveryKeyName(id), ttl)\r\n                    )\r\n                    .andCollectFailures()\r\n                    .replaceWithVoid();\r\n        } else {\r\n            logger.warn(\"a more recent update was found in cache for full delivery #\" + id);\r\n            return tx.discard();\r\n        }\r\n    });\r\n\r\n    return this.redisDataSource\r\n            .withTransaction(conditionFunction, setFunction, this.fullDeliveryKeyName(id));\r\n}                     \r\n`\r\n\r\ni would expect the function to return a Void uni\r\n\r\n\r\n             \n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/33083/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/33083/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
