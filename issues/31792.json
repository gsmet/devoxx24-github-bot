{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/31792",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31792/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31792/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31792/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/31792",
  "id": 1620507957,
  "node_id": "I_kwDOCFbutM5glv01",
  "number": 31792,
  "title": "Panache: Incorporate features from EBean ORM for Panache or join development effort? ",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1273026134,
      "node_id": "MDU6TGFiZWwxMjczMDI2MTM0",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/panache",
      "name": "area/panache",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 3,
  "created_at": "2023-03-12T20:53:56Z",
  "updated_at": "2023-03-15T21:41:55Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Description\n\nOne of the legacy projects I'm working on converting from a Play/Scala/EBean ORM application to run on Quarkus uses EBean ORM instead of JPA/Hibernate. It was written 10+ years ago.\r\n\r\nI want to be 100% quarkus eco-system so I can work with the DEV mode.\r\n\r\nAnd unfortunately, EBean doesn't work with quarkus DEV mode, and the developer is only one person.\r\n\r\nDuring the conversion of the data layer I find EBean has a lot of nice syntax for building queries that Panache I think could benefit from if you want to make it a \"simplified\" Hibernate alternative.\r\n\r\nI'm not affiliated with EBean in anyway, just was introduced through my current conversion.\r\n\r\nI think it might be worth while for the developers of Panache to reach out to the creator of EBean (if you haven't already) and maybe work together to join forces on JPA persistence.\r\n\r\nThe author claims he does a lot of things \"correctly\" that Hibernate gets wrong, and he does other \"optimizations\", etc.\r\n\r\nI can't validate those, I just really like the syntax of building queries. I find myself having to manually rewrite the old legacy code into raw JPA/HQL when I have to search on more than one field/criteria in Panache.\r\n\r\nFor example, here is how I have to rewrite queries, not terrible for this example, but gets pretty involved when the criteria because larger with more fields and things like `iLike`, `ne`, `gt`, etc.\r\n```\r\n// EBean\r\nList<CrumbModel> allModels = CrumbModel.find.query().where().ne(\"modelName\", \"ALL\").order().asc(\"modelName\").findList();\r\n\r\n// Panache\r\nList<CrumbModel> allModels = CrumbModel.list(\"modelName != :name\", Sort.ascending(\"modelName\"), Parameters.with(\"name\", \"ALL\"));\r\n```\r\n\r\nHere is another example of doing `FETCHES` in EBean:\r\n```\r\nif (currUser.isPrivleged()) {\r\n            expOrg = OrgUser.find.query().fetch(\"user\").where().like(\"user.email\", term);\r\n        } else {\r\n            expOrg = OrgUser.find.query().fetch(\"user\").where().eq(\"org.orgId\", currUser.getOrg().getOrgId()).like(\"user.email\", term);\r\n        }\r\n```\r\nJust a thought... \r\n\r\nhttps://ebean.io\r\n\n\n### Implementation ideas\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/31792/reactions",
    "total_count": 3,
    "+1": 2,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31792/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
