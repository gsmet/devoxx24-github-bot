{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/39374",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39374/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39374/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39374/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/39374",
  "id": 2182262442,
  "node_id": "I_kwDOCFbutM6CEq6q",
  "number": 39374,
  "title": "IllegalArgumentException exception is thrown when logging rest client request / response body which has GUID",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1326067509,
      "node_id": "MDU6TGFiZWwxMzI2MDY3NTA5",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/rest-client",
      "name": "area/rest-client",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 2744442223,
      "node_id": "MDU6TGFiZWwyNzQ0NDQyMjIz",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/triage/needs-reproducer",
      "name": "triage/needs-reproducer",
      "color": "FDE078",
      "default": false,
      "description": "We are waiting for a reproducer."
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 3,
  "created_at": "2024-03-12T17:23:55Z",
  "updated_at": "2024-04-10T11:31:50Z",
  "closed_at": "2024-04-10T11:31:49Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nI want to enable the rest client logging to log req / res and I have added the following configuration to achieve that, \r\n\r\n ```yaml\r\nrest-client:\r\n    logging:\r\n      scope: request-response\r\n      body-limit: 10000\r\n```\r\nBut I get an error when the response body contains GUID in it,\r\n\r\n**Sample Response:**\r\n\r\n```json\r\n[\r\n    {\r\n        \"id\": {\r\n            \"guid\": \"2341DE42-2D89-48E1-B2BD-D48539A5E11F\",\r\n            \"version\": 1\r\n        },\r\n        \"title\": \"sample json with guid\"\r\n    }\r\n]\r\n```\r\n**Exception Stack trace:**\r\n\r\n```posh\r\nLogManager error of type FORMAT_FAILURE: Formatting error\r\n\r\njava.lang.IllegalArgumentException: can't parse argument number: \"id\":{\"guid\":\"2341DE42-2D89-48E1-B2BD-D48539A5E11F\"\r\n        at java.base/java.text.MessageFormat.makeFormat(MessageFormat.java:1454)\r\n        at java.base/java.text.MessageFormat.applyPattern(MessageFormat.java:492)\r\n        at java.base/java.text.MessageFormat.<init>(MessageFormat.java:371)\r\n        at java.base/java.text.MessageFormat.format(MessageFormat.java:860)\r\n        at org.jboss.logmanager.ExtFormatter.formatMessageLegacy(ExtFormatter.java:107)\r\n        at org.jboss.logmanager.ExtFormatter.formatMessage(ExtFormatter.java:70)\r\n        at org.jboss.logmanager.formatters.Formatters$15.renderRaw(Formatters.java:736)\r\n        at org.jboss.logmanager.formatters.Formatters$JustifyingFormatStep.render(Formatters.java:221)\r\n        at org.jboss.logmanager.formatters.MultistepFormatter.format(MultistepFormatter.java:86)\r\n        at io.quarkus.runtime.logging.BannerFormatter.format(BannerFormatter.java:56)\r\n        at org.jboss.logmanager.ExtFormatter.format(ExtFormatter.java:32)\r\n        at org.jboss.logmanager.handlers.WriterHandler.doPublish(WriterHandler.java:43)\r\n        at org.jboss.logmanager.ExtHandler.publish(ExtHandler.java:66)\r\n        at org.jboss.logmanager.ExtHandler.publishToNestedHandlers(ExtHandler.java:97)\r\n        at io.quarkus.bootstrap.logging.QuarkusDelayedHandler.doPublish(QuarkusDelayedHandler.java:81)\r\n        at org.jboss.logmanager.ExtHandler.publish(ExtHandler.java:66)\r\n        at org.jboss.logmanager.LoggerNode.publish(LoggerNode.java:327)\r\n        at org.jboss.logmanager.LoggerNode.publish(LoggerNode.java:334)\r\n        at org.jboss.logmanager.LoggerNode.publish(LoggerNode.java:334)\r\n        at org.jboss.logmanager.LoggerNode.publish(LoggerNode.java:334)\r\n        at org.jboss.logmanager.LoggerNode.publish(LoggerNode.java:334)\r\n        at org.jboss.logmanager.LoggerNode.publish(LoggerNode.java:334)\r\n        at org.jboss.logmanager.LoggerNode.publish(LoggerNode.java:334)\r\n        at org.jboss.logmanager.LoggerNode.publish(LoggerNode.java:334)\r\n        at org.jboss.logmanager.Logger.logRaw(Logger.java:750)\r\n        at org.jboss.logmanager.Logger.log(Logger.java:708)\r\n        at org.jboss.logging.JBossLogManagerLogger.doLogf(JBossLogManagerLogger.java:56)\r\n        at org.jboss.logging.Logger.debugf(Logger.java:701)\r\n        at org.jboss.resteasy.reactive.client.logging.DefaultClientLogger$1.handle(DefaultClientLogger.java:32)\r\n        at org.jboss.resteasy.reactive.client.logging.DefaultClientLogger$1.handle(DefaultClientLogger.java:29)\r\n        at io.vertx.core.impl.future.FutureImpl$1.onSuccess(FutureImpl.java:91)\r\n        at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:60)\r\n        at io.vertx.core.impl.future.FutureImpl.addListener(FutureImpl.java:196)\r\n        at io.vertx.core.impl.future.PromiseImpl.addListener(PromiseImpl.java:23)\r\n        at io.vertx.core.impl.future.FutureImpl.onSuccess(FutureImpl.java:87)\r\n        at io.vertx.core.impl.future.PromiseImpl.onSuccess(PromiseImpl.java:23)\r\n        at io.vertx.core.http.HttpClientResponse.bodyHandler(HttpClientResponse.java:132)\r\n        at org.jboss.resteasy.reactive.client.logging.DefaultClientLogger.logResponse(DefaultClientLogger.java:29)\r\n        at org.jboss.resteasy.reactive.client.handlers.ClientSendRequestHandler$3$3.handle(ClientSendRequestHandler.java:327)\r\n        at org.jboss.resteasy.reactive.client.handlers.ClientSendRequestHandler$3$3.handle(ClientSendRequestHandler.java:323)\r\n        at io.vertx.core.impl.future.FutureImpl$1.onSuccess(FutureImpl.java:91)\r\n        at io.vertx.core.impl.future.FutureBase.lambda$emitSuccess$0(FutureBase.java:54)\r\n        at io.vertx.core.impl.EventLoopContext.execute(EventLoopContext.java:86)\r\n        at io.vertx.core.impl.DuplicatedContext.execute(DuplicatedContext.java:163)\r\n        at io.vertx.core.impl.future.FutureBase.emitSuccess(FutureBase.java:51)\r\n        at io.vertx.core.impl.future.FutureImpl.tryComplete(FutureImpl.java:211)\r\n        at io.vertx.core.impl.future.PromiseImpl.tryComplete(PromiseImpl.java:23)\r\n        at io.vertx.core.http.impl.HttpEventHandler.handleEnd(HttpEventHandler.java:79)\r\n        at io.vertx.core.http.impl.HttpClientResponseImpl.handleEnd(HttpClientResponseImpl.java:250)\r\n        at io.vertx.core.http.impl.Http1xClientConnection$StreamImpl.lambda$new$0(Http1xClientConnection.java:444)\r\n        at io.vertx.core.streams.impl.InboundBuffer.handleEvent(InboundBuffer.java:255)\r\n        at io.vertx.core.streams.impl.InboundBuffer.write(InboundBuffer.java:134)\r\n        at io.vertx.core.http.impl.Http1xClientConnection$StreamImpl.handleEnd(Http1xClientConnection.java:708)\r\n        at io.vertx.core.impl.EventLoopContext.execute(EventLoopContext.java:76)\r\n        at io.vertx.core.impl.DuplicatedContext.execute(DuplicatedContext.java:153)\r\n        at io.vertx.core.http.impl.Http1xClientConnection.handleResponseEnd(Http1xClientConnection.java:945)\r\n        at io.vertx.core.http.impl.Http1xClientConnection.handleHttpMessage(Http1xClientConnection.java:814)\r\n        at io.vertx.core.http.impl.Http1xClientConnection.handleMessage(Http1xClientConnection.java:778)\r\n        at io.vertx.core.net.impl.ConnectionBase.read(ConnectionBase.java:158)\r\n        at io.vertx.core.net.impl.VertxHandler.channelRead(VertxHandler.java:153)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\r\n        at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\r\n        at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346)\r\n        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318)\r\n        at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\r\n        at io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:1383)\r\n        at io.netty.handler.ssl.SslHandler.decodeJdkCompatible(SslHandler.java:1246)\r\n        at io.netty.handler.ssl.SslHandler.decode(SslHandler.java:1295)\r\n        at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:529)\r\n        at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:468)\r\n        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\r\n        at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\r\n        at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\r\n        at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\r\n        at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\r\n        at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\r\n        at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\r\n        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\r\n        at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n        at java.base/java.lang.Thread.run(Thread.java:833)\r\nCaused by: java.lang.NumberFormatException: For input string: \"\"id\":{\"guid\":\"2341DE42-2D89-48E1-B2BD-D48539A5E11F\"\"\r\n        at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\r\n        at java.base/java.lang.Integer.parseInt(Integer.java:654)\r\n        at java.base/java.lang.Integer.parseInt(Integer.java:786)\r\n        at java.base/java.text.MessageFormat.makeFormat(MessageFormat.java:1452)\r\n```\r\n\r\n### Expected behavior\r\n\r\nI would expect the logs print the req / res body without any error.\r\n\r\n### Actual behavior\r\n\r\nI suspect the error is due to the fact, DefaultClientLogger tries to format the req / res body since it considers it to be string always.\r\n\r\nhttps://github.com/quarkusio/quarkus/blob/main/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/logging/DefaultClientLogger.java#L32\r\n\r\nhttps://github.com/quarkusio/quarkus/blob/main/independent-projects/resteasy-reactive/client/runtime/src/main/java/org/jboss/resteasy/reactive/client/logging/DefaultClientLogger.java#L52\r\n\r\n\r\n\r\n### How to Reproduce?\r\n\r\n_No response_\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\n_No response_\r\n\r\n### Output of `java -version`\r\n\r\n17.0.6\r\n\r\n### Quarkus version or git rev\r\n\r\n3.5.3\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nApache Maven 3.8.7\r\n\r\n### Additional information\r\n\r\nI propose the following solution:\r\n\r\nModify the printf-style substitutions to MessageFormat-style substitutions in the log statement aka, change from `%s` to `{}`.\r\n\r\n**Sample**:\r\n\r\n**Current statement,**\r\n\r\n```\r\nlog.debugf(\"%s: %s %s, Status[%d %s], Headers[%s], Body:\\n%s\",\r\n                        redirect ? \"Redirect\" : \"Response\",\r\n                        response.request().getMethod(), response.request().absoluteURI(), response.statusCode(),\r\n                        response.statusMessage(), asString(response.headers()), bodyToString(body));\r\n```\r\n\r\n**Proposed statement,**\r\n\r\n```\r\nlog.debugf(\"%s: %s %s, Status[%d %s], Headers[%s], Body:\\n{6}\",  --> Modified statement\r\n                        redirect ? \"Redirect\" : \"Response\",\r\n                        response.request().getMethod(), response.request().absoluteURI(), response.statusCode(),\r\n                        response.statusMessage(), asString(response.headers()), bodyToString(body));\r\n```\r\n\r\n**Reasoning**:\r\n\r\nThe {} notation is much more efficient than the` %s` String format notation in this case. The `{}` notation accepts any Object or primitive value, where the` %s %d ...` String format requires that the type of the parameter matches the format or an exception is thrown. So generally, `{}` is more convenient.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/39374/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39374/timeline",
  "performed_via_github_app": null,
  "state_reason": "not_planned"
}
