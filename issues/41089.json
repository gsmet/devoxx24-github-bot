{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/41089",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41089/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41089/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41089/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/41089",
  "id": 2343569794,
  "node_id": "I_kwDOCFbutM6LsAmC",
  "number": 41089,
  "title": "Mutiny retry with backoff net resetting counter",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 985346625,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjU=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/triage/invalid",
      "name": "triage/invalid",
      "color": "e4e669",
      "default": false,
      "description": "This doesn't seem right"
    },
    {
      "id": 1283619446,
      "node_id": "MDU6TGFiZWwxMjgzNjE5NDQ2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/smallrye",
      "name": "area/smallrye",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 1676631606,
      "node_id": "MDU6TGFiZWwxNjc2NjMxNjA2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/env/windows",
      "name": "env/windows",
      "color": "edea47",
      "default": false,
      "description": "Impacts Windows machines"
    },
    {
      "id": 2236476067,
      "node_id": "MDU6TGFiZWwyMjM2NDc2MDY3",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/mutiny",
      "name": "area/mutiny",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": null,
  "comments": 2,
  "created_at": "2024-06-10T10:44:05Z",
  "updated_at": "2024-06-10T12:14:10Z",
  "closed_at": "2024-06-10T10:57:00Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nI am using a smallrye mutiny Uni with subsequent retries. If the first retry has a backoff configured, then the retry counter is not reset properly. This results in a wrong (unexpected) number of retries.\r\n\r\nPlease see the attached unit test as demo.\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\nsee unit test\r\n\r\n### Actual behavior\r\n\r\nsee unit test\r\n\r\n### How to Reproduce?\r\n\r\n````\r\nimport io.smallrye.mutiny.Multi;\r\nimport io.smallrye.mutiny.Uni;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.time.Duration;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\n\r\n...\r\n\r\n    @Test\r\n    public void uniWithMultipleRetryAndBackoff() {\r\n        Duration d = Duration.ofMillis(10);\r\n        AtomicInteger invokeCounter = new AtomicInteger(0);\r\n        final int retryInner = 2;\r\n        final int retryOuter = 1;\r\n\r\n        // Example 1: No backoff configured\r\n        invokeCounter.set(0);\r\n        Uni.createFrom().voidItem()\r\n                .onItem().invoke(invokeCounter::incrementAndGet)\r\n                .onItem().invoke(() -> {\r\n                    throw new RuntimeException(\"Test Exception\");\r\n                })\r\n                .onFailure().retry().atMost(retryInner)\r\n                .onItem().transform(s -> \"Just do some transformation\")\r\n                .onFailure().retry().atMost(retryOuter)\r\n                .onFailure().recoverWithNull()\r\n                .await().indefinitely();\r\n\r\n        // works as expected\r\n        assertEquals((retryInner+1) * (retryOuter + 1), invokeCounter.get(), \"Example 1: Number of invokes wrong\");\r\n\r\n        // Example 2: Backoff configured for inner retry\r\n        // (Only difference to example 1 is the backoff)\r\n        invokeCounter.set(0);\r\n        Uni.createFrom().voidItem()\r\n                .onItem().invoke(invokeCounter::incrementAndGet)\r\n                .onItem().invoke(() -> {\r\n                    throw new RuntimeException(\"Test Exception\");\r\n                })\r\n                .onFailure().retry().withBackOff(d).atMost(retryInner)    // Note the \"withBackoff(...) here!\r\n                .onItem().transform(s -> \"Just do some transformation\")\r\n                .onFailure().retry().atMost(retryOuter)\r\n                .onFailure().recoverWithNull()\r\n                .await().indefinitely();\r\n\r\n        // Fails currently (works not as expected)\r\n        assertEquals((retryInner+1) * (retryOuter + 1), invokeCounter.get(), \"Example 2: Number of invokes wrong\");\r\n    }\r\n````\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nwindows\r\n\r\n### Output of `java -version`\r\n\r\n21\r\n\r\n### Quarkus version or git rev\r\n\r\n3.11.1\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nGradle 8.6\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/41089/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41089/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
