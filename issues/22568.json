{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/22568",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22568/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22568/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22568/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/22568",
  "id": 1091358327,
  "node_id": "I_kwDOCFbutM5BDM53",
  "number": 22568,
  "title": "OpenTelemetry not working with RESTEasy reactive mode",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1287515315,
      "node_id": "MDU6TGFiZWwxMjg3NTE1MzE1",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/kotlin",
      "name": "area/kotlin",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 2236031412,
      "node_id": "MDU6TGFiZWwyMjM2MDMxNDEy",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/tracing",
      "name": "area/tracing",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 2552031458,
      "node_id": "MDU6TGFiZWwyNTUyMDMxNDU4",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/rest",
      "name": "area/rest",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/161",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/161",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/161/labels",
    "id": 7468359,
    "node_id": "MI_kwDOCFbutM4AcfVH",
    "number": 161,
    "title": "2.7.0.CR1",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 334,
    "state": "closed",
    "created_at": "2021-12-08T07:48:18Z",
    "updated_at": "2022-02-03T19:52:11Z",
    "due_on": null,
    "closed_at": "2022-01-19T12:42:36Z"
  },
  "comments": 8,
  "created_at": "2021-12-31T00:38:16Z",
  "updated_at": "2022-01-07T11:48:59Z",
  "closed_at": "2022-01-07T11:48:56Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nI am trying to setup OpenTelementry on two on Kotlin 1.6.10 and Quarkus 2.6.1. I have a trivial application that takes an input and then makes an HTTP call to another endpoint (on the same application).\r\n\r\nIf I use RESTEasy Reactive with a synchronous function it works fine. I get a full trace from the HTTP end.\r\n\r\nHere is my server:\r\n\r\n```properties\r\nquarkus.opentelemetry.enabled=true \r\nquarkus.opentelemetry.propagators=b3,b3multi,tracecontext\r\nquarkus.opentelemetry.tracer.sampler=on\r\nquarkus.opentelemetry.tracer.sampler.parent-based=true\r\n```\r\n\r\n```kotlin\r\n@Path(\"/hello\")\r\nclass GreetingController(\r\n    private val tracer: Tracer,\r\n\r\n    @RestClient\r\n    private val repeaterClient: RepeaterClient\r\n) {\r\n    @Path(\"sync\")\r\n    @POST\r\n    @Produces(MediaType.TEXT_PLAIN)\r\n    fun sync(name: String): String {\r\n        val span = tracer.spanBuilder(\"inside sync\").startSpan()\r\n\r\n        try {\r\n            val repeat = repeaterClient.sync(name)\r\n            return \"Hello $name $repeat - sync\"\r\n        } finally {\r\n            span.end()\r\n        }\r\n    }\r\n\r\n    @Path(\"async\")\r\n    @POST\r\n    @Produces(MediaType.TEXT_PLAIN)\r\n    fun async(name: String): Uni<String> {\r\n        val span = tracer.spanBuilder(\"inside async\").startSpan()\r\n\r\n        try {\r\n            return repeaterClient.async(name).onItem()\r\n                .transform { repeat -> \"Hello $name $repeat - async\" } //.await().indefinitely()\r\n        } finally {\r\n            span.end()\r\n        }\r\n    }\r\n\r\n    @Path(\"coroutine\")\r\n    @POST\r\n    @Produces(MediaType.TEXT_PLAIN)\r\n    suspend fun coroutine(name: String): String {\r\n        val span = tracer.spanBuilder(\"inside coroutine\").startSpan()\r\n\r\n        try {\r\n            val repeat = repeaterClient.coroutine(name)\r\n\r\n            return \"Hello $name $repeat - coroutine\"\r\n        } finally {\r\n            span.end()\r\n        }\r\n    }\r\n}\r\n\r\n@Path(\"/repeat\")\r\n@RegisterRestClient(configKey = \"repeater-api\")\r\ninterface RepeaterClient {\r\n    @Path(\"repeat\")\r\n    @POST\r\n    fun sync(repeat: String): String\r\n\r\n    @Path(\"repeat\")\r\n    @POST\r\n    fun async(repeat: String): Uni<String>\r\n\r\n    @Path(\"repeat\")\r\n    @POST\r\n    suspend fun coroutine(repeat: String): String\r\n}\r\n\r\n@Path(\"repeat\")\r\nclass RepeaterController(\r\n    private val tracer: Tracer\r\n) {\r\n    @Path(\"repeat\")\r\n    @POST\r\n    @Produces(MediaType.TEXT_PLAIN)\r\n    fun repeat(repeat: String): String {\r\n        val span = tracer.spanBuilder(\"inside repeat\").startSpan()\r\n\r\n        try {\r\n            return repeat\r\n        } finally {\r\n            span.end()\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIf I call `/hello/sync` I get a single trace that includes the original HTTP POST, `inside sync`, the HTTP repeat client, the HTTP repeat POST server, and `inside repeat`.\r\n\r\nIf I call `/hello/async`, I get three traces. The first trace is a single space of the HTTP POST (`hello/async`). The second trace is `inside async`. And the third trace includes 3 spans the HTTP repeat client, the HTTP repeat POST server, and `inside repeat`\r\n\r\nUsing `/hello/coroutine` gave me the exact same results.\r\n\r\nI previously tried Quarkus 2.5.x and it gave slightly different results. Instead of three traces, I got two traces. The first two traces were a single trace.\r\n\r\n### Expected behavior\r\n\r\nI expect a single trace.\r\n\r\n### Actual behavior\r\n\r\nMy request is split into three different traces.\r\n\r\n### How to Reproduce?\r\n\r\n_No response_\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nDarwin MacBook-Pro 21.2.0 Darwin Kernel Version 21.2.0: Sun Nov 28 20:28:54 PST 2021; root:xnu-8019.61.5~1/RELEASE_X86_64 x86_64\r\n\r\n### Output of `java -version`\r\n\r\nopenjdk version \"17.0.1\" 2021-10-19\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n2.1.1-final\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nGradle 7.3\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/22568/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22568/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
