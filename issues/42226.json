{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/42226",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/42226/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/42226/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/42226/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/42226",
  "id": 2438078984,
  "node_id": "I_kwDOCFbutM6RUiII",
  "number": 42226,
  "title": "[Resteasy] rely also on AnnotationStore when processing BeanParam",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 2552031458,
      "node_id": "MDU6TGFiZWwyNTUyMDMxNDU4",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/rest",
      "name": "area/rest",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 5,
  "created_at": "2024-07-30T15:09:52Z",
  "updated_at": "2024-08-05T10:38:57Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Description\n\nI would like to generate dynamically my endpoints from CommandHandler. One CommandHandler need to produce an Endpoint.\r\n\r\nHere is a sample:\r\n\r\n```java\r\npublic interface AdminCommandHandler<C extends Command> {\r\n    void execute(C command) throws ExecutionException;\r\n}\r\n```\r\n\r\n```java\r\npublic interface Command {\r\n}\r\n```\r\n\r\nAnd an implementation likes this one\r\n\r\n```java\r\n@ApplicationScoped\r\npublic class ClearCacheAdminCommandHandlerWithCommandToEnhance implements AdminCommandHandler<ClearCacheCommandToEnhance> {\r\n    private final ClearCacheExecutor clearCacheExecutor;\r\n\r\n    public ClearCacheAdminCommandHandlerWithCommandToEnhance(final ClearCacheExecutor clearCacheExecutor) {\r\n        this.clearCacheExecutor = Objects.requireNonNull(clearCacheExecutor);\r\n    }\r\n\r\n    @Override\r\n    public void execute(final ClearCacheCommandToEnhance command) throws ExecutionException {\r\n        clearCacheExecutor.clear(command.cacheName);\r\n    }\r\n}\r\n```\r\n\r\n```java\r\npublic class ClearCacheCommandToEnhance implements Command {\r\n    @FormParam(\"cacheName\")\r\n    public String cacheName;\r\n}\r\n```\r\n\r\n```java\r\n@Path(\"/admin\")\r\npublic class ClearCacheAdminCommandHandlerEndpointToGenerate {\r\n    private final ClearCacheAdminCommandHandlerWithCommandToEnhance adminCommandHandler;\r\n\r\n    public ClearCacheAdminCommandHandlerEndpointToGenerate(\r\n            final ClearCacheAdminCommandHandlerWithCommandToEnhance clearCacheAdminCommandHandlerWithCommandToEnhance) {\r\n        this.adminCommandHandler = clearCacheAdminCommandHandlerWithCommandToEnhance;\r\n    }\r\n\r\n    @POST\r\n    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)\r\n    @Path(\"/clearCacheAdminCommandHandler\")\r\n    public void execute(@BeanParam final ClearCacheCommandToEnhance command) {\r\n        adminCommandHandler.execute(command);\r\n    }\r\n}\r\n```\r\n\r\nThe generated part must be done following a convention. Each endpoint should be generated following each CommandHandler implementation and the Command must be enhanced by adding a **@FormParam** on each fields.\r\n\r\nSo everything should be generated from theses classes:\r\n\r\n```java\r\n@ApplicationScoped\r\npublic class ClearCacheAdminCommandHandler implements AdminCommandHandler<ClearCacheCommand> {\r\n    private final ClearCacheExecutor clearCacheExecutor;\r\n\r\n    public ClearCacheAdminCommandHandlerWithCommand(final ClearCacheExecutor clearCacheExecutor) {\r\n        this.clearCacheExecutor = Objects.requireNonNull(clearCacheExecutor);\r\n    }\r\n\r\n    @Override\r\n    public void execute(final ClearCacheCommand command) throws ExecutionException {\r\n        clearCacheExecutor.clear(command.cacheName);\r\n    }\r\n}\r\n```\r\n\r\n```java\r\npublic class ClearCacheCommandToEnhance implements Command {\r\n    public String cacheName;\r\n}\r\n```\r\n\r\nTo do it I've done it this way:\r\n\r\n```java\r\n@BuildStep\r\n    List<CommandHandlerDiscoveredBuildItem> discoverCommandHandlers(final ApplicationIndexBuildItem applicationIndexBuildItem) {\r\n        final Class<?> adminCommandHandlerClazz = AdminCommandHandler.class;\r\n        final Index index = applicationIndexBuildItem.getIndex();\r\n        return index\r\n                .getAllKnownImplementors(adminCommandHandlerClazz)\r\n                .stream()\r\n                .map(implementor -> {\r\n                    final List<DotName> interfaceDotNames = implementor.interfaceNames();\r\n                    final int position = IntStream.range(0, interfaceDotNames.size())\r\n                            .filter(idx -> adminCommandHandlerClazz.getName().equals(interfaceDotNames.get(idx).toString()))\r\n                            .findFirst()\r\n                            .orElseThrow(() -> new IllegalStateException(\"Should not be here\"));\r\n                    final ParameterizedType adminCommandHandlerType = implementor.interfaceTypes().get(position)\r\n                            .asParameterizedType();\r\n                    final Type first = adminCommandHandlerType.arguments().getFirst();\r\n                    final ClassInfo command = index.getClassByName(first.name());\r\n                    return new CommandHandlerDiscoveredBuildItem(implementor, command);\r\n                })\r\n                .toList();\r\n    }\r\n\r\n    @BuildStep\r\n    void generateAdminEndpoints(final List<CommandHandlerDiscoveredBuildItem> commandHandlerDiscoveredBuildItems,\r\n                                final BuildProducer<GeneratedJaxRsResourceBuildItem> generatedJaxRsResourceBuildItemsProducer) {\r\n        commandHandlerDiscoveredBuildItems.forEach(commandHandlerDiscoveredBuildItem -> {\r\n            final String className = commandHandlerDiscoveredBuildItem.commandHandler().simpleName() + \"EndpointGenerated\";\r\n            try (final ClassCreator beanClassCreator = ClassCreator.builder()\r\n                    .classOutput(new GeneratedJaxRsResourceGizmoAdaptor(generatedJaxRsResourceBuildItemsProducer))\r\n                    .className(className)\r\n                    .setFinal(false)\r\n                    .build()) {\r\n                beanClassCreator.addAnnotation(Path.class).add(\"value\", \"/admin\");\r\n\r\n                final FieldCreator adminCommandHandlerField = beanClassCreator\r\n                        .getFieldCreator(\"adminCommandHandler\", AdminCommandHandler.class)\r\n                        .setModifiers(ACC_PRIVATE | ACC_FINAL);\r\n\r\n                final ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\r\n                final Class<?> commandHandlerClazz = contextClassLoader\r\n                        .loadClass(commandHandlerDiscoveredBuildItem.commandHandler().name().toString());\r\n                final Class<?> commandClazz = contextClassLoader\r\n                        .loadClass(commandHandlerDiscoveredBuildItem.command().name().toString());\r\n                // constructor\r\n                try (final MethodCreator constructorMethod = beanClassCreator.getMethodCreator(MethodDescriptor.INIT,\r\n                        void.class, commandHandlerClazz)) {\r\n                    constructorMethod.setModifiers(ACC_PUBLIC);\r\n                    constructorMethod.invokeSpecialMethod(MethodDescriptor.ofConstructor(Object.class),\r\n                            constructorMethod.getThis());\r\n                    constructorMethod.writeInstanceField(adminCommandHandlerField.getFieldDescriptor(),\r\n                            constructorMethod.getThis(), constructorMethod.getMethodParam(0));\r\n                    constructorMethod.returnVoid();\r\n                }\r\n\r\n                // execute method\r\n                try (final MethodCreator executeMethod = beanClassCreator.getMethodCreator(\"execute\", void.class,\r\n                        commandClazz)) {\r\n                    executeMethod.setModifiers(ACC_PUBLIC);\r\n\r\n                    executeMethod.addAnnotation(POST.class);\r\n                    executeMethod.addAnnotation(Consumes.class).add(\"value\",\r\n                            new String[]{MediaType.APPLICATION_FORM_URLENCODED});\r\n                    executeMethod.addAnnotation(Path.class).add(\"value\",\r\n                            endpointNaming(commandHandlerDiscoveredBuildItem.commandHandler().simpleName()));\r\n\r\n                    executeMethod.getParameterAnnotations(0).addAnnotation(BeanParam.class);\r\n\r\n                    final ResultHandle commandHandlerResult = executeMethod\r\n                            .readInstanceField(adminCommandHandlerField.getFieldDescriptor(), executeMethod.getThis());\r\n                    executeMethod\r\n                            .invokeVirtualMethod(\r\n                                    MethodDescriptor.ofMethod(commandHandlerClazz, \"execute\",\r\n                                            void.class, commandHandlerDiscoveredBuildItem.command().name().toString()),\r\n                                    commandHandlerResult, executeMethod.getMethodParam(0));\r\n\r\n                    executeMethod.returnVoid();\r\n                }\r\n                beanClassCreator.writeTo((name, bytes) -> {\r\n                    // for debugging purpose:  open the file with IntelliJ to see the class generated\r\n                    final File file = new File(String.format(\"target/%s.class\", name));\r\n                    try (FileOutputStream outputStream = new FileOutputStream(file)) {\r\n                        outputStream.write(bytes);\r\n                    } catch (IOException e) {\r\n                        throw new RuntimeException(e);\r\n                    }\r\n                });\r\n            } catch (ClassNotFoundException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    @BuildStep\r\n    AnnotationsTransformerBuildItem bindCommandFieldsWithJaxRSFormParam(final ApplicationIndexBuildItem applicationIndexBuildItem) {\r\n        final List<ClassInfo> commandImplementors = applicationIndexBuildItem.getIndex()\r\n                .getAllKnownImplementors(Command.class)\r\n                .stream().toList();\r\n        return new AnnotationsTransformerBuildItem(AnnotationTransformation.forFields()\r\n                .whenField(fieldInfo -> commandImplementors.contains(fieldInfo.declaringClass()))\r\n                .transform(transformationContext -> {\r\n                    transformationContext.add(AnnotationInstance.builder(FormParam.class)\r\n                            .add(\"value\", transformationContext.declaration().asField().name())\r\n                            .build());\r\n                })\r\n        );\r\n    }\r\n}\r\n```\r\n\r\n```java\r\npublic final class CommandHandlerDiscoveredBuildItem extends MultiBuildItem {\r\n    private final ClassInfo commandHandler;\r\n    private final ClassInfo command;\r\n\r\n    public CommandHandlerDiscoveredBuildItem(final ClassInfo commandHandler, ClassInfo command) {\r\n        this.commandHandler = Objects.requireNonNull(commandHandler);\r\n        this.command = Objects.requireNonNull(command);\r\n    }\r\n\r\n    public ClassInfo commandHandler() {\r\n        return commandHandler;\r\n    }\r\n\r\n    public ClassInfo command() {\r\n        return command;\r\n    }\r\n}\r\n```\r\n\r\n**@BeanParam** with **@FormParam** is an easy way to do the binding. \r\n\r\nHowever it is not working because the **AnnotationsTransformerBuildItem** will not change the index used by the **ServerEndpointIndexer** so the @FormParam is not present and it fails this way\r\n\r\n```\r\njava.lang.RuntimeException: java.lang.RuntimeException: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\r\n\t[error]: Build step io.quarkus.resteasy.reactive.server.deployment.ResteasyReactiveProcessor#setupEndpoints threw an exception: java.lang.RuntimeException: java.lang.RuntimeException: Failed to process method 'ClearCacheAdminCommandHandlerEndpointGenerated#execute'\r\n\tat org.jboss.resteasy.reactive.common.processor.EndpointIndexer.createEndpoints(EndpointIndexer.java:333)\r\n\tat io.quarkus.resteasy.reactive.server.deployment.ResteasyReactiveProcessor.setupEndpoints(ResteasyReactiveProcessor.java:665)\r\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580)\r\n\tat io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:849)\r\n\tat io.quarkus.builder.BuildContext.run(BuildContext.java:256)\r\n\tat org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\r\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.doRunWith(EnhancedQueueExecutor.java:2516)\r\n\tat org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2495)\r\n\tat org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1521)\r\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\r\n\tat org.jboss.threads.JBossThread.run(JBossThread.java:483)\r\nCaused by: java.lang.RuntimeException: Failed to process method 'ClearCacheAdminCommandHandlerEndpointGenerated#execute'\r\n\tat org.jboss.resteasy.reactive.common.processor.EndpointIndexer.createResourceMethod(EndpointIndexer.java:781)\r\n\tat org.jboss.resteasy.reactive.common.processor.EndpointIndexer.createEndpoints(EndpointIndexer.java:422)\r\n\tat org.jboss.resteasy.reactive.common.processor.EndpointIndexer.createEndpoints(EndpointIndexer.java:300)\r\n\t... 11 more\r\nCaused by: jakarta.enterprise.inject.spi.DeploymentException: No annotations found on fields at 'com.lodh.arte.quarkus.loadmin.deployment.bean.ClearCacheCommand'. Annotations like `@QueryParam` should be used in fields, not in methods.\r\n\tat org.jboss.resteasy.reactive.server.processor.ServerEndpointIndexer.handleBeanParam(ServerEndpointIndexer.java:198)\r\n\tat org.jboss.resteasy.reactive.common.processor.EndpointIndexer.createResourceMethod(EndpointIndexer.java:634)\r\n\t... 13 more\r\n```\r\n\r\n\r\n\n\n### Implementation ideas\n\nWhen using **AnnotationsTransformerBuildItem** we should rely on **AnnotationStore** to get changes.\r\n\r\n**ServerEndpointIndexer** is already relying on it.\r\n\r\nIs it possible to apply changes on this method\r\n\r\n```java\r\n@Override\r\n    protected boolean handleBeanParam(ClassInfo actualEndpointInfo, Type paramType, MethodParameter[] methodParameters, int i,\r\n            Set<String> fileFormNames) {\r\n        ClassInfo beanParamClassInfo = index.getClassByName(paramType.name());\r\n        InjectableBean injectableBean = scanInjectableBean(beanParamClassInfo,\r\n                actualEndpointInfo,\r\n                existingConverters, additionalReaders, injectableBeans, hasRuntimeConverters);\r\n        if ((injectableBean.getFieldExtractorsCount() == 0) && !injectableBean.isInjectionRequired()) {\r\n            throw new DeploymentException(String.format(\"No annotations found on fields at '%s'. \"\r\n                    + \"Annotations like `@QueryParam` should be used in fields, not in methods.\",\r\n                    beanParamClassInfo.name()));\r\n        }\r\n        fileFormNames.addAll(injectableBean.getFileFormNames());\r\n        return injectableBean.isFormParamRequired();\r\n    }\r\n```\r\n\r\nto use the AnnotationStore here instead of the immutable index.\r\n\r\n```java\r\nClassInfo beanParamClassInfo = index.getClassByName(paramType.name());\r\n```",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/42226/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/42226/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
