{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/34526",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34526/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34526/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34526/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/34526",
  "id": 1788247419,
  "node_id": "I_kwDOCFbutM5qln17",
  "number": 34526,
  "title": "OTEL - Automatic ENDUSER_ID and ENDUSER_ROLE filling",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 2236031412,
      "node_id": "MDU6TGFiZWwyMjM2MDMxNDEy",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/tracing",
      "name": "area/tracing",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/255",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/255",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/255/labels",
    "id": 9565017,
    "node_id": "MI_kwDOCFbutM4AkfNZ",
    "number": 255,
    "title": "3.3.0.CR1",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 310,
    "state": "closed",
    "created_at": "2023-06-21T07:35:19Z",
    "updated_at": "2024-05-17T05:53:43Z",
    "due_on": null,
    "closed_at": "2023-08-09T11:23:12Z"
  },
  "comments": 12,
  "created_at": "2023-07-04T17:07:33Z",
  "updated_at": "2024-05-17T05:53:43Z",
  "closed_at": "2024-05-17T05:53:43Z",
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nHi guys,\r\nas discussed here #33349 it would be nice for Quarkus OpenTelemetry Extension to automatically fill enduser.id and enduser.role when possible, maybe there could be a configuration to enable this behavior.\r\n\r\nI am doing this in my projects with a custom SpanProcessor, but maybe this could be of interest for others too (without reinventing the wheel).\r\n\r\nWhat do you think ?\r\n\r\n### Implementation ideas\r\n\r\n```java\r\npackage com.infolabtech.commons;\r\n\r\nimport jakarta.enterprise.inject.spi.CDI;\r\nimport java.security.Principal;\r\nimport java.util.Collection;\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\nimport java.util.stream.Collectors;\r\nimport org.apache.commons.collections4.CollectionUtils;\r\nimport org.apache.commons.collections4.IterableUtils;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.eclipse.microprofile.jwt.JsonWebToken;\r\n\r\npublic interface Authenticated {\r\n\r\n    default Collection<Principal> getPrincipals() {\r\n        return CollectionUtils.select(\r\n                IterableUtils.toList(\r\n                        CDI.current().select(\r\n                                Principal.class\r\n                        )\r\n                ),\r\n                principal -> StringUtils.isNotEmpty(\r\n                        principal.getName()\r\n                )\r\n        );\r\n    }\r\n\r\n    default Set<String> getUsernames() {\r\n        return getPrincipals().stream().map(\r\n                Principal::getName\r\n        ).collect(\r\n                Collectors.toSet()\r\n        );\r\n    }\r\n\r\n    default Optional<Principal> getPrincipal() {\r\n        return getPrincipals().stream().findFirst();\r\n    }\r\n\r\n    default Optional<String> getUsername() {\r\n        return getPrincipal().map(\r\n                Principal::getName\r\n        );\r\n    }\r\n\r\n    default Optional<Collection<String>> getGroups() {\r\n        return getPrincipal().filter(\r\n                JsonWebToken.class::isInstance\r\n        ).map(\r\n                JsonWebToken.class::cast\r\n        ).map(\r\n                JsonWebToken::getGroups\r\n        );\r\n    }\r\n\r\n}\r\n```\r\n\r\n```java\r\npackage com.infolabtech.commons.tracing;\r\n\r\nimport com.infolabtech.commons.Authenticated;\r\nimport io.opentelemetry.api.common.Attributes;\r\nimport io.opentelemetry.context.Context;\r\nimport io.opentelemetry.sdk.trace.ReadWriteSpan;\r\nimport io.opentelemetry.sdk.trace.ReadableSpan;\r\nimport io.opentelemetry.sdk.trace.SpanProcessor;\r\nimport io.opentelemetry.semconv.trace.attributes.SemanticAttributes;\r\nimport jakarta.enterprise.context.ApplicationScoped;\r\nimport jakarta.enterprise.context.control.ActivateRequestContext;\r\nimport jakarta.inject.Inject;\r\nimport org.apache.commons.collections4.CollectionUtils;\r\nimport org.eclipse.microprofile.context.ManagedExecutor;\r\n\r\n@ApplicationScoped\r\npublic class EndUserSpanProcessor implements SpanProcessor, Authenticated {\r\n\r\n    @Inject\r\n    protected ManagedExecutor managedExecutor;\r\n\r\n    @Override\r\n    @ActivateRequestContext\r\n    public void onStart(Context parentContext, ReadWriteSpan span) {\r\n        managedExecutor.execute(\r\n                () -> getPrincipal().ifPresent(\r\n                        principal -> span.setAllAttributes(\r\n                                Attributes.of(\r\n                                        SemanticAttributes.ENDUSER_ID,\r\n                                        principal.getName(),\r\n                                        SemanticAttributes.ENDUSER_ROLE,\r\n                                        CollectionUtils.emptyIfNull(\r\n                                                principal.getGroups()\r\n                                        ).toString()\r\n                                )\r\n                        )\r\n                )\r\n        );\r\n    }\r\n\r\n    @Override\r\n    public boolean isStartRequired() {\r\n        return Boolean.TRUE;\r\n    }\r\n\r\n    @Override\r\n    public void onEnd(ReadableSpan span) {\r\n    }\r\n\r\n    @Override\r\n    public boolean isEndRequired() {\r\n        return Boolean.FALSE;\r\n    }\r\n\r\n}\r\n```",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/34526/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34526/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
