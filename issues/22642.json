{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/22642",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22642/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22642/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22642/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/22642",
  "id": 1094154838,
  "node_id": "I_kwDOCFbutM5BN3pW",
  "number": 22642,
  "title": "[DevServices] TestContainers registry configuration",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 2955097667,
      "node_id": "MDU6TGFiZWwyOTU1MDk3NjY3",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/devservices",
      "name": "area/devservices",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 2,
  "created_at": "2022-01-05T09:34:58Z",
  "updated_at": "2023-04-15T10:49:48Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Description\n\nHello,\r\n\r\nI am currently working on putting in place a database in my project, and I am planning to leverage on DevServices great feature for having my local DB fired up upon a `quarkus:dev`/`quarkusDev` on my local Desktop.\r\nIt works fine for now, but I have a constraint: We have a private registry from which we need to pull the Docker images.\r\n\r\nSo I have 2 use cases to manage:\r\n\r\n1. The `mariadb` image\r\n2. the `testcontainers/ryuk` image\r\n\r\n---\r\n\r\nFor 1., going through the documentation I can simply override the image in my `application.yml` file:\r\n\r\n```yaml\r\nquarkus:\r\n  datasource:\r\n    db-kind: mariadb\r\n    devservices:\r\n      image-name: mycompany.com/my-registry/mariadb:10.5.9\r\n```\r\n\r\nPros: Nice & easy!\r\nCons: In case the MariaDB image version is updated internally by Quarkus, then I won't benefit from this ðŸ˜¢ \r\n\r\n---\r\n\r\nFor 2., going through the TestContainers documentation, the recommended way is to leverage on the [image name suibstitution](https://www.testcontainers.org/features/image_name_substitution/#automatically-modifying-docker-hub-image-names) to **automatically** prefix any image with the provided private registry\r\n\r\nI tried to use first the environment variable `TESTCONTAINERS_HUB_IMAGE_NAME_PREFIX` setup, but I was not able somehow to make it available to the Gradle `quarkusDev` task, I feel like this is not possible today. This is working though with the Maven plugin with the standard `confifuration/environmentVariables` element.\r\nSo I looked at the other way by creating a `testcontainers.properties` file. The file is usually put in the `src/test/resources`, but to make it work for DevServices I had to put it in the `src/main/resources` instead\r\n\r\nPros: I really like the idea of applying a prefix instead of overriding the whole image definition!\r\nCons: I end up having a configuration file used for development in my production jar\n\n### Implementation ideas\n\n1. On Quarkus side, what about putting in place the concept of image name substitution, as having a private registry is quite a common case?\r\n2. Adding the capability in the Gradle plugin to inject environment/system variables to the `quarkusDev` task\r\n3. Ideally, having a way to store configuration files dedicated to DevServices outside of `src/main/resources`?",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/22642/reactions",
    "total_count": 3,
    "+1": 3,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22642/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
