{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/37414",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/37414/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/37414/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/37414/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/37414",
  "id": 2018004285,
  "node_id": "I_kwDOCFbutM54SE09",
  "number": 37414,
  "title": "Enhancing Quarkus Security for ROOT Group Access",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1282139374,
      "node_id": "MDU6TGFiZWwxMjgyMTM5Mzc0",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/security",
      "name": "area/security",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/288",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/288",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/288/labels",
    "id": 10189838,
    "node_id": "MI_kwDOCFbutM4Am3wO",
    "number": 288,
    "title": "3.7.0.CR1",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 432,
    "state": "closed",
    "created_at": "2023-11-15T08:06:53Z",
    "updated_at": "2024-05-17T12:27:49Z",
    "due_on": null,
    "closed_at": "2024-01-17T13:52:08Z"
  },
  "comments": 19,
  "created_at": "2023-11-30T06:59:29Z",
  "updated_at": "2023-12-17T21:48:27Z",
  "closed_at": "2023-12-17T21:48:22Z",
  "active_lock_reason": null,
  "body": "### Description\n\nAssume you are using JWT for security which has a group called ROOT. The user with the group `ROOT` should be able to access all JAX-RS (all beans in general) despite what is defined in `@RolesAllowed`, `@PermissionsAllowed` or security config properties.\r\n\r\nFor example, the following configuration behavior does not allow that. The `root-policy` would work for all paths except the ones defined in `quarkus.http.auth.permission.*.paths` properties. In the following case the ROOT won't be able to access `/api/hello` due to the longest path wins principle `(/api/hello > /*)`.\r\n\r\n```properties\r\nquarkus.http.auth.policy.root-policy.roles-allowed=ROOT\r\nquarkus.http.auth.permission.root.paths=/*\r\nquarkus.http.auth.permission.root.policy=root-policy\r\nquarkus.http.auth.policy.customer-policy.roles-allowed=CUSTOMER\r\nquarkus.http.auth.permission.customer.paths=/api/hello\r\nquarkus.http.auth.permission.customer.policy=customer-policy\r\n```\r\n\r\nThe current behaviour does offer a solution which would mean that i will have to add the ROOT role to all `quarkus.http.auth.policy.*.roles-allowed` properties.\n\n### Implementation ideas\n\nA potential solution could involve incorporating a mechanism where, if a SecurityInterceptor is defined, it operates subsequent to the Quarkus Engine's determination of whether a call should be permitted or denied. In this proposed solution, the SecurityInterceptor would yield the conclusive result for the call after the Quarkus Engine has made its decision.\r\n\r\n```java\r\ninterface SecurityInterceptor {\r\n       Uni<CheckResult> isPermitted(CheckResult quarkusCheckResult);\r\n}\r\n\r\n@RequestScoped\r\nclass CustomSecurityInterceptor implements SecurityInterceptor {\r\n\r\n       @Inject\r\n       JsonWebToken jwt;\r\n\r\n       Uni<CheckResult> isPermitted(Uni<CheckResult> quarkusCheckResult) {\r\n\r\n           if(jwt.getGroups().contains(\"ROOT\")){\r\n               return Uni.createFrom().item(CheckResult.PERMIT);\r\n           }\r\n\r\n           return quarkusCheckResult;\r\n       }\r\n}\r\n```",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/37414/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/37414/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
