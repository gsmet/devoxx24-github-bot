{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/34001",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34001/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34001/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34001/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/34001",
  "id": 1753764417,
  "node_id": "I_kwDOCFbutM5oiFJB",
  "number": 34001,
  "title": "AroundInvoke Interceptors can only modify parameters if first in chain",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1282102389,
      "node_id": "MDU6TGFiZWwxMjgyMTAyMzg5",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/arc",
      "name": "area/arc",
      "color": "0366d6",
      "default": false,
      "description": "Issue related to ARC (dependency injection)"
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/254",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/254",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/254/labels",
    "id": 9511254,
    "node_id": "MI_kwDOCFbutM4AkSFW",
    "number": 254,
    "title": "3.1.2.Final",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 62,
    "state": "closed",
    "created_at": "2023-06-08T06:32:46Z",
    "updated_at": "2023-11-15T13:50:56Z",
    "due_on": null,
    "closed_at": "2023-06-15T12:51:10Z"
  },
  "comments": 5,
  "created_at": "2023-06-12T23:53:58Z",
  "updated_at": "2023-06-14T09:22:13Z",
  "closed_at": "2023-06-14T08:27:40Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nIf there is a chain of interceptors applied to a method call, only the first interceptor in the chain can modify the InvocationContext parameters using setParameters. Changes made by interceptors other than the first are ignored. This occurs because the 2nd and later interceptors are passed an instance of `AroundInvokeInvocationContext.NextAroundInvokeInvocationContext` whose parameters array reference is copied from the outer `AroundInvokeInvocationContext` - but if setParameters is called, the new array is not reflected back to the outer context.\r\n\r\nThis change appears to have been made in this commit https://github.com/quarkusio/quarkus/commit/0ed5b7b4a7b1102e90757b38e0f4b402173e26ed\r\n\r\nWhile the comments added to this commit do suggest some limitations to the use of setParameters, in fact the actual behaviour is far more limited than suggested. This change appears to break the standard contract of `jakarta.interceptor.InvocationContext` whose comments suggest no such limitations.\r\n\r\nThis behaviour makes it effectively impossible to write an Interceptor that will work with Kotlin continuations, because in order to perform operations before the caller's continuation is resumed, we need to pass a new continuation to the callee. This requires us to be able to modify the continuation parameter in the InvocationContext, and also - if such interceptors are to be chained successfully - for interceptors further along the chain to receive the continuation set by earlier interceptors.\r\n\r\n### Expected behavior\r\n\r\nChanges made by InvocationContext.setParameters are reflected in both the parameters passed to the callee and to callers of InvocationContext.getParameters further down the chain.\r\n\r\n### Actual behavior\r\n\r\nChanges made by Invocation.setParameters only take effect if the Interceptor is the first in the chain.\r\n\r\n### How to Reproduce?\r\n\r\nI created a sample app that demonstrates these problems here https://github.com/allertonm/quarkus-coroutine-interceptor-example\r\n\r\nInterceptors.kt defines three interceptors, one that does nothing, and two that perform logging actions on continuation resumption by chaining a new continuation.\r\nExampleResource.kt is a resource that demonstrates four different coroutine outcomes (of which `helloDeferred` is the most interesting) and by combining the interceptors on these methods (and modifying interceptor priorities.) you can see the effects of the setParameters behaviour. \r\n\r\nIn particular: if `DoNothing` is priority 1, and `Intercept1` is priority2, then Intercept1 will not log the continuation resumption. If you switch the priorities, it will.\r\n\r\nThe desired outcome is that if you combine both Intercept1 and Intercept2 (and any other interceptors) in any priority order, then both Intercept1 and Intercept2 will log their respective continuation resumptions.\r\n\r\nI've also provided a reflection-based workaround (commented out) which if you uncomment will show that the desired outcome can be achieved if `NextAroundInvocationContext.setParameters` writes changes back to the outer context. I would obviously much rather not have to do this.\r\n\r\nFor context, the specific use case for this code in real-life is to reproduce the behaviour of Panache's `@WithSession` and `@WithTransaction` for cases where coroutines are being used instead of `Mutiny.Uni.`\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nDarwin M-L10KJGH6 22.5.0 Darwin Kernel Version 22.5.0: Mon Apr 24 20:51:50 PDT 2023; root:xnu-8796.121.2~5/RELEASE_X86_64 x86_64\r\n\r\n### Output of `java -version`\r\n\r\nopenjdk version \"17.0.7\" 2023-04-18 LTS OpenJDK Runtime Environment Corretto-17.0.7.7.1 (build 17.0.7+7-LTS) OpenJDK 64-Bit Server VM Corretto-17.0.7.7.1 (build 17.0.7+7-LTS, mixed mode, sharing)\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n_No response_\r\n\r\n### Quarkus version or git rev\r\n\r\n3.1.1.Final (also reproducible on 3.0.3)\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\n------------------------------------------------------------ Gradle 8.1.1 ------------------------------------------------------------  Build time:   2023-04-21 12:31:26 UTC Revision:     1cf537a851c635c364a4214885f8b9798051175b  Kotlin:       1.8.10 Groovy:       3.0.15 Ant:          Apache Ant(TM) version 1.10.11 compiled on July 10 2021 JVM:          17.0.7 (Amazon.com Inc. 17.0.7+7-LTS) OS:           Mac OS X 13.4 x86_64\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/34001/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34001/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
