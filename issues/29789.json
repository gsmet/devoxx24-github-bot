{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/29789",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29789/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29789/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29789/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/29789",
  "id": 1490266913,
  "node_id": "I_kwDOCFbutM5Y06sh",
  "number": 29789,
  "title": "CDI: support for suspend Kotlin's functions",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1282102389,
      "node_id": "MDU6TGFiZWwxMjgyMTAyMzg5",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/arc",
      "name": "area/arc",
      "color": "0366d6",
      "default": false,
      "description": "Issue related to ARC (dependency injection)"
    },
    {
      "id": 1287515315,
      "node_id": "MDU6TGFiZWwxMjg3NTE1MzE1",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/kotlin",
      "name": "area/kotlin",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 34,
  "created_at": "2022-12-11T17:44:19Z",
  "updated_at": "2022-12-21T08:54:54Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nCurrently the only way to avoid AmbiguousResolutionException when injecting a function using generic type is to add `@Named` qualifier. That's an overhead. A CDI framework could do that for us.\r\n\r\nExample code:\r\n\r\n```kotlin\r\nimport arrow.core.Either\r\n\r\ntypealias AssignKeyboard = suspend (Computer) -> Either<KeyboardError, Unit>\r\ntypealias AssignMouse = suspend (Computer) -> Either<MouseError, Unit>\r\n\r\nclass ApiConfig {\r\n\r\n    @ApplicationScoped\r\n    @Named(\"AssignMouse\")\r\n    fun assignMouseBean(): AssignMouse = // ...\r\n\r\n    @ApplicationScoped\r\n    @Named(\"AssignKeyboard\")\r\n    fun assignKeyboardBean(): AssignKeyboard = // ...\r\n\r\n}\r\n\r\n@Path(\"/api\")\r\nclass AssignMouseRestApiAdapter(\r\n    @Named(\"AssignMouse\")\r\n    private val assignMouse: AssignMouse,\r\n) {\r\n\r\n    @Path(\"/assigment\")\r\n    @POST\r\n    suspend fun foo() {\r\n        // some code\r\n    }\r\n\r\n}\r\n```\r\n\r\n### Implementation ideas\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/29789/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/29789/timeline",
  "performed_via_github_app": null,
  "state_reason": "reopened"
}
