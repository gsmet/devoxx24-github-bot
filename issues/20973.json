{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/20973",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20973/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20973/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20973/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/20973",
  "id": 1034833365,
  "node_id": "I_kwDOCFbutM49rk3V",
  "number": 20973,
  "title": "Jackson fails to deserialize JsonSubTypes when re-running continuous tests",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1287515315,
      "node_id": "MDU6TGFiZWwxMjg3NTE1MzE1",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/kotlin",
      "name": "area/kotlin",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 3267721944,
      "node_id": "MDU6TGFiZWwzMjY3NzIxOTQ0",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/jackson",
      "name": "area/jackson",
      "color": "0366d6",
      "default": false,
      "description": "Issues related to Jackson (JSON library)"
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/156",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/156",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/156/labels",
    "id": 7270553,
    "node_id": "MI_kwDOCFbutM4AbvCZ",
    "number": 156,
    "title": "2.4.1.Final",
    "description": "",
    "creator": {
      "login": "aloubyansky",
      "id": 323379,
      "node_id": "MDQ6VXNlcjMyMzM3OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/323379?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aloubyansky",
      "html_url": "https://github.com/aloubyansky",
      "followers_url": "https://api.github.com/users/aloubyansky/followers",
      "following_url": "https://api.github.com/users/aloubyansky/following{/other_user}",
      "gists_url": "https://api.github.com/users/aloubyansky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aloubyansky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aloubyansky/subscriptions",
      "organizations_url": "https://api.github.com/users/aloubyansky/orgs",
      "repos_url": "https://api.github.com/users/aloubyansky/repos",
      "events_url": "https://api.github.com/users/aloubyansky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aloubyansky/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 87,
    "state": "closed",
    "created_at": "2021-10-20T06:35:24Z",
    "updated_at": "2021-11-11T13:31:49Z",
    "due_on": null,
    "closed_at": "2021-11-03T11:29:46Z"
  },
  "comments": 1,
  "created_at": "2021-10-25T08:28:14Z",
  "updated_at": "2021-11-02T10:37:50Z",
  "closed_at": "2021-10-26T09:01:56Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nI am playing around with Kotlin and Event Sourcing and for that I save different Events in a MongoDB collection. \r\n\r\nThe event document looks something like this\r\n```json\r\n{\r\n    \"_id\" : ObjectId(\"6176613d55215e20e614cf1f\"),\r\n    \"aggregateId\" : UUID(\"107791f8-8884-45ce-afca-ee648f745f30\"),\r\n    \"event\" : {\r\n        \"@class\" : \"org.acme.event_sourcing.TestEvent\",\r\n        \"someProperty\" : \"foo\"\r\n    }\r\n}\r\n```\r\nwhere `TestEvent` will be one of the many events in the application. The outer object holds meta information and the event property holds event specific data including the event class name. \r\nTo deserialize that I use a custom Codec where I just let jackson take care of deserializing the Mongo Document (by using the `JsonTypeInfo` feature)\r\n\r\n```kotlin\r\nclass EventCodec(\r\n    private val documentCodec: Codec<Document> = MongoClientSettings.getDefaultCodecRegistry().get(Document::class.java)\r\n) : Codec<Event> {\r\n    // .. rest of the class omitted ...\r\n\r\n    override fun decode(reader: BsonReader?, decoderContext: DecoderContext?): Event {\r\n        val document = documentCodec.decode(reader, decoderContext)\r\n        return objectMapper.readValue(document.toJson())\r\n    }\r\n}\r\n```\r\n\r\nThe event class is annoated with `JsonTypeInfo` and every event inherits this class\r\n```kotlin\r\n@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\r\nabstract class Event\r\n```\r\n\r\nThis works well in production and on first test runs, but when re-running the continuous tests (with `gradle quarkusTest` and pressing r after all tests ran) it fails with a jackson deserialization error saying that `TestEvent` is not a subtype of `Event`\r\n\r\n```\r\njava.util.concurrent.CompletionException: com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Could not resolve type id 'org.acme.event_sourcing.TestEvent' as a subtype of `org.acme.event_sourcing.Event`: Not a subtype\r\n at [Source: (String)\"{\"@class\": \"org.acme.event_sourcing.TestEvent\", \"someProperty\": \"foo\"}\"; line: 1, column: 12]\r\n```\r\n\r\n### Expected behavior\r\n\r\nRe-running continuous tests should not fail with a `InvalidTypeIdException` \r\n\r\n### Actual behavior\r\n\r\nTests failing with `InvalidTypeIdException`. \r\n\r\nThe weird thing is: If I make the test fail on purpose by throwing a random exception in the test code, and then removing that exception, all tests are passing again.\r\nUntil re-run :sweat_smile: \r\n\r\n### How to Reproduce?\r\n\r\nI created a small reproducer here: https://github.com/pschmidt88/quarkus-reproduce-jackson-subtype-error\r\n\r\n1. run continuous tests (I use gradle): `./gradlew quarkusTest`\r\n2. all tests are passing\r\n3. re-run tests by typing `r` in the console\r\n4. related tests failing\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nLinux rookian-XPS-13-9300 5.13.0-20-generic #20-Ubuntu SMP Fri Oct 15 14:21:35 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n### Output of `java -version`\r\n\r\nopenjdk version \"17.0.1\" 2021-10-19 OpenJDK Runtime Environment GraalVM CE 21.3.0 (build 17.0.1+12-jvmci-21.3-b05) OpenJDK 64-Bit Server VM GraalVM CE 21.3.0 (build 17.0.1+12-jvmci-21.3-b05, mixed mode, sharing)\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n21.3.0 with java 17 (but same issue with java 11)\r\n\r\n### Quarkus version or git rev\r\n\r\n2.3.0-Final\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\ngradle 7.2\r\n\r\n### Additional information\r\n\r\nkotlin version used: 1.5.21\r\n\r\nJust my first idea (but I'm not really familiar with the framework code so don't take it to serious): Could that be a test runner related issue? As far as I know quarkus runs things in different threads and class loaders - maybe jackson does not support that in some way?",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/20973/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/20973/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
