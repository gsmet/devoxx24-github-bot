{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/38703",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/38703/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/38703/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/38703/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/38703",
  "id": 2126878403,
  "node_id": "I_kwDOCFbutM5-xZbD",
  "number": 38703,
  "title": "RESTEasy Reactive Multipart struggles with non-file binary uploads",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 2552031458,
      "node_id": "MDU6TGFiZWwyNTUyMDMxNDU4",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/rest",
      "name": "area/rest",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/308",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/308",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/308/labels",
    "id": 10539028,
    "node_id": "MI_kwDOCFbutM4AoNAU",
    "number": 308,
    "title": "3.7.3",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 49,
    "state": "closed",
    "created_at": "2024-02-10T15:07:23Z",
    "updated_at": "2024-03-12T13:31:07Z",
    "due_on": null,
    "closed_at": "2024-02-14T11:48:14Z"
  },
  "comments": 8,
  "created_at": "2024-02-09T10:41:43Z",
  "updated_at": "2024-02-13T20:25:15Z",
  "closed_at": "2024-02-12T13:29:42Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nIn RESTEasy Reactive, multipart requests omitting file names are handled differently from Classic, apparently from parsing the contents from a ByteArrayOutputStream to a String where character sets apply: \r\n```java\r\n//MultiPartParserDefinition.java\r\n@Override\r\n        public void endPart() {\r\n            if (file != null) {\r\n                data.add(currentName, file, fileName, headers);\r\n                file = null;\r\n                contentBytes.reset();\r\n                try {\r\n                    fileChannel.close();\r\n                    fileChannel = null;\r\n                } catch (IOException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n            } else if (fileName != null) {\r\n                data.add(currentName, Arrays.copyOf(contentBytes.toByteArray(), contentBytes.size()), fileName, headers);\r\n                contentBytes.reset();\r\n            } else {\r\n\r\n                try {\r\n                    String charset = defaultEncoding;\r\n                    String contentType = headers.getFirst(HttpHeaders.CONTENT_TYPE);\r\n                    if (contentType != null) {\r\n                        String cs = HeaderUtil.extractQuotedValueFromHeader(contentType, \"charset\");\r\n                        if (cs != null) {\r\n                            charset = cs;\r\n                        }\r\n                    }\r\n\r\n                    data.add(currentName, contentBytes.toString(charset), charset, headers);\r\n                } catch (UnsupportedEncodingException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n                contentBytes.reset();\r\n            }\r\n        }\r\n```\r\n\r\nThis is problematic for some types of uploads, such as binary data, where the character encoding would yield a mangled representation on the server side.\r\n\r\nIn our case, we expose a multipart API where one part is a String (where this would be fine), and another is binary data in the form of a byte[]. In the latter case, our data goes through the following set of unfortunate changes:\r\n1. After reading the entire data stream, a ByteArrayOutputStream with data intact\r\n2. Into a String with UTF-8 (by default), data ruined\r\n3. Into a byte[], still with data ruined, for our API method to consume\r\n\r\nAre there any good reasons for storing the content as a String at this stage?\r\n\r\n### Expected behavior\r\n\r\nMultipart data should be handled identically between regular uploads and non-file uploads, ensuring the preservation of the data.\r\nFile uploads manage this by keeping the data stored as a byte array (I think) and avoiding any preemptive content conversions.\r\n\r\n### Actual behavior\r\n\r\nNon-file uploads have their data converted into a String, thus potentially ruining the data.\r\n\r\n### How to Reproduce?\r\n\r\n1. Define a multipart API method whose part is a byte[] or InputStream\r\n2. Have a file containing binary data ready (make sure it doesn't get encoded to UTF-8 or anything, Intellij will try to be \"helpful\" and convert the entire thing if one happens to make accidental changes - undoing won't fix it, at least not in my case)\r\n3. Pass the data using cURL in the following two ways to demonstrate the two different behaviors:\r\n\r\nUsing `@` with cURL enables a regular file upload where the name of the provided file is set as the part's filename. RER will treat this as a regular file upload in this case\r\n`curl -v  -H 'Content-Type: multipart/form-data' -F 'example=@./path/to/file' http://localhost:8080/test`\r\n\r\nUsing `<` instead buffers the file's contents as the part but without any provided filename, thus making RER treat it as a non-file upload. With nothing else provided or explicitly configured, RER will assume UTF-8 during String conversion. If the file provided was truly a binary file, one would be able to see differing lengths and contents on the server side as opposed to the client side.\r\n`curl -v  -H 'Content-Type: multipart/form-data' -F 'example=<./path/to/file' http://localhost:8080/test`\r\n\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nLinux ola-ThinkPad-P1-Gen-4i 5.19.0-50-generic #50-Ubuntu SMP PREEMPT_DYNAMIC Mon Jul 10 18:24:29 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux\r\n\r\n### Output of `java -version`\r\n\r\nopenjdk version \"21.0.2\" 2024-01-16 LTS OpenJDK Runtime Environment Temurin-21.0.2+13 (build 21.0.2+13-LTS) OpenJDK 64-Bit Server VM Temurin-21.0.2+13 (build 21.0.2+13-LTS, mixed mode, sharing)\r\n\r\n### Quarkus version or git rev\r\n\r\n3.7.1\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nApache Maven 3.9.1 (2e178502fcdbffc201671fb2537d0cb4b4cc58f8)\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/38703/reactions",
    "total_count": 1,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 1
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/38703/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
