{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/26152",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/26152/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/26152/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/26152/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/26152",
  "id": 1272022839,
  "node_id": "I_kwDOCFbutM5L0Yc3",
  "number": 26152,
  "title": "Resteasy Reactive: ContextResolver<ObjectMapper> not used",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1326067509,
      "node_id": "MDU6TGFiZWwxMzI2MDY3NTA5",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/rest-client",
      "name": "area/rest-client",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 2552031458,
      "node_id": "MDU6TGFiZWwyNTUyMDMxNDU4",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/rest",
      "name": "area/rest",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 3748075115,
      "node_id": "LA_kwDOCFbutM7fZxZr",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/triage/blocking-resteasy-reactive-move",
      "name": "triage/blocking-resteasy-reactive-move",
      "color": "f9d0c4",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/235",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/235",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/235/labels",
    "id": 9025446,
    "node_id": "MI_kwDOCFbutM4Aibem",
    "number": 235,
    "title": "3.0.0.Alpha5",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 253,
    "state": "closed",
    "created_at": "2023-02-09T14:26:03Z",
    "updated_at": "2023-11-12T17:44:08Z",
    "due_on": null,
    "closed_at": "2023-03-08T15:10:59Z"
  },
  "comments": 35,
  "created_at": "2022-06-15T10:31:04Z",
  "updated_at": "2023-06-13T07:54:10Z",
  "closed_at": "2022-08-26T10:21:25Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nWhen creating a RestClient with a `ContextResolver<ObjectMapper>` registered, this ContextResolver is never used and thus the wrong ObjectMapper (via CDI) is used. Other implementation approaches would be fine as well, but nothing seems to get this behaviour working. Multiple different ObjectMappers in the application do not seem to be supported.\r\n\r\n### Expected behavior\r\n\r\nThe ObjectMapper returned by a class that implements `ContextResolver<ObjectMapper>` used via `RestClientBuilder#register(Object)` is used in the given RestClient and only there.\r\nMultiple RestClients can use multiple different ObjectMappers.\r\n\r\n### Actual behavior\r\n\r\nThe ObjectMapper of the registered `ContextResolver` is not used at all. Instead an application scoped ObjectMapper bean is used in all RestClients.\r\n\r\n### How to Reproduce?\r\n\r\nRun the following test class. The test should pass if matching the expected behaviour.\r\n\r\n```java\r\n@QuarkusTest\r\nclass MyClientTest {\r\n\r\n    MyClient clientAllowsUnknown;\r\n    MyClient clientDisallowsUnknown;\r\n\r\n    WireMockServer wireMockServer = getWireMockServer();\r\n\r\n    @BeforeEach\r\n    void setUp() throws MalformedURLException {\r\n        wireMockServer.resetAll();\r\n\r\n        clientAllowsUnknown = RestClientBuilder.newBuilder()\r\n            .baseUrl(new URL(wireMockServer.baseUrl()))\r\n            .register(ClientObjectMapperUnknown.class)\r\n            .build(MyClient.class);\r\n\r\n        clientDisallowsUnknown = RestClientBuilder.newBuilder()\r\n            .baseUrl(new URL(wireMockServer.baseUrl()))\r\n            .register(ClientObjectMapperNoUnknown.class)\r\n            .build(MyClient.class);\r\n    }\r\n\r\n    @Test\r\n    void something_withAdditionalIgnoredProperties() {\r\n        var json = \"{ \\\"value\\\": \\\"someValue\\\", \\\"secondValue\\\": \\\"toBeIgnored\\\" }\";\r\n        wireMockServer.stubFor(\r\n            WireMock.get(WireMock.urlMatching(\"/something\"))\r\n                .willReturn(okJson(json)));\r\n\r\n        var result = clientAllowsUnknown.something().await().indefinitely();\r\n\r\n        // FAIL_ON_UNKNOWN_PROPERTIES disabled\r\n        assertThatCode(() -> new ClientObjectMapperUnknown().getContext(ObjectMapper.class).readValue(json, Something.class))\r\n            .doesNotThrowAnyException();\r\n        assertThat(result).isEqualTo(Something.builder().withValue(\"someValue\").build());\r\n\r\n        // FAIL_ON_UNKNOWN_PROPERTIES enabled\r\n        assertThatThrownBy(() -> new ClientObjectMapperNoUnknown().getContext(ObjectMapper.class).readValue(json, Something.class))\r\n            .isInstanceOf(JsonProcessingException.class);\r\n        assertThatThrownBy(() -> clientDisallowsUnknown.something().await().indefinitely())\r\n            .isInstanceOf(JsonProcessingException.class);\r\n    }\r\n\r\n    @Path(\"/something\")\r\n    @Consumes(MediaType.APPLICATION_JSON)\r\n    @Produces(MediaType.APPLICATION_JSON)\r\n    public interface MyClient {\r\n        @GET\r\n        Uni<Something> something();\r\n    }\r\n\r\n    @Value\r\n    @Builder(toBuilder = true, setterPrefix = \"with\")\r\n    @Jacksonized\r\n    public static class Something {\r\n        String value;\r\n    }\r\n\r\n    public static class ClientObjectMapperUnknown implements ContextResolver<ObjectMapper> {\r\n        @Override\r\n        public ObjectMapper getContext(Class<?> type) {\r\n            return new ObjectMapper()\r\n                .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\r\n                .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\r\n        }\r\n    }\r\n\r\n    public static class ClientObjectMapperNoUnknown implements ContextResolver<ObjectMapper> {\r\n        @Override\r\n        public ObjectMapper getContext(Class<?> type) {\r\n            return new ObjectMapper()\r\n                .enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)\r\n                .enable(SerializationFeature.FAIL_ON_EMPTY_BEANS);\r\n        }\r\n    }\r\n\r\n    public static WireMockServer getWireMockServer() {\r\n        var wireMockServer = new WireMockServer(options().port(getAvailableTcpPort(20000, 22000)));\r\n        wireMockServer.start();\r\n        return wireMockServer;\r\n    }\r\n\r\n    public static int getAvailableTcpPort(int min, int max) {\r\n        var ports = IntStream.range(min, max).boxed().collect(Collectors.toList());\r\n        Collections.shuffle(ports); // shuffle to get a random order and reduce the probability a port is already in use\r\n\r\n        for (var port : ports) {\r\n            try (ServerSocket serverSocket = new ServerSocket(port)) {\r\n                return serverSocket.getLocalPort();\r\n            } catch (IOException e) {\r\n                // try next\r\n            }\r\n        }\r\n\r\n        throw new IllegalStateException(MessageFormat.format(\"Could not find a free TCP port in range {0}:{1}.\", min, max));\r\n    }\r\n}\r\n```\r\n\r\nWith\r\n```xml\r\n        <dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-rest-client-reactive-jackson</artifactId>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.quarkus</groupId>\r\n            <artifactId>quarkus-resteasy-reactive</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.projectlombok</groupId>\r\n            <artifactId>lombok</artifactId>\r\n            <version>1.18.22</version>\r\n        </dependency>\r\n```\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nDarwin M042112251A.local 20.6.0 Darwin Kernel Version 20.6.0: Wed Nov 10 22:23:07 PST 2021; root:xnu-7195.141.14~1/RELEASE_X86_64 x86_64\r\n\r\n### Output of `java -version`\r\n\r\nopenjdk version \"11.0.14.1\" 2022-02-08 OpenJDK Runtime Environment Temurin-11.0.14.1+1 (build 11.0.14.1+1) OpenJDK 64-Bit Server VM Temurin-11.0.14.1+1 (build 11.0.14.1+1, mixed mode)\r\n\r\n### GraalVM version (if different from Java)\r\n\r\nnot used\r\n\r\n### Quarkus version or git rev\r\n\r\n2.8.0.Final, 2.9.2.Final, 2.10.0.CR1\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nApache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/26152/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/26152/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
