{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/41356",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41356/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41356/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41356/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/41356",
  "id": 2366449346,
  "node_id": "I_kwDOCFbutM6NDSbC",
  "number": 41356,
  "title": "Smallrye Reactive message nacks are not propageted to Multi onFailures",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1283619446,
      "node_id": "MDU6TGFiZWwxMjgzNjE5NDQ2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/smallrye",
      "name": "area/smallrye",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 1,
  "created_at": "2024-06-21T12:31:17Z",
  "updated_at": "2024-06-21T12:31:22Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Describe the bug\n\nGiving the following example code:\r\n```java\r\nimport io.quarkus.logging.Log;\r\nimport io.quarkus.runtime.Quarkus;\r\nimport io.smallrye.mutiny.Multi;\r\nimport jakarta.enterprise.context.ApplicationScoped;\r\nimport org.eclipse.microprofile.reactive.messaging.Incoming;\r\nimport org.eclipse.microprofile.reactive.messaging.Outgoing;\r\n\r\n@ApplicationScoped\r\npublic class Boom {\r\n    @Outgoing(\"event\")\r\n    public Multi<Integer> loop() {\r\n        return Multi\r\n            .createBy().repeating()\r\n            .supplier(() -> Multi.createFrom().range(1, 3))\r\n            .indefinitely()\r\n            .onFailure().invoke(() -> {\r\n                Log.error(\"fatal error caught\");\r\n                Quarkus.asyncExit(1);\r\n            })\r\n            .onItem().transformToMultiAndConcatenate(integerMulti -> integerMulti);\r\n    }\r\n\r\n    @Incoming(\"event\")\r\n    public void boom(Integer value) {\r\n        if (value == 1) {\r\n            Log.info(\"first event\");\r\n        } else {\r\n            Log.warn(\"second event\");\r\n            throw new RuntimeException(\"boom\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe onFailure code is never triggered\r\n\r\nWith a Message the withNack code is triggered\r\n\r\n```java\r\nimport io.quarkus.logging.Log;\r\nimport io.smallrye.mutiny.Multi;\r\nimport jakarta.enterprise.context.ApplicationScoped;\r\nimport org.eclipse.microprofile.reactive.messaging.Incoming;\r\nimport org.eclipse.microprofile.reactive.messaging.Message;\r\nimport org.eclipse.microprofile.reactive.messaging.Outgoing;\r\n\r\nimport java.util.Random;\r\nimport java.util.concurrent.CompletableFuture;\r\n\r\n@ApplicationScoped\r\npublic class Boom {\r\n    private Random r = new Random();\r\n\r\n    @Outgoing(\"event\")\r\n    public Multi<Integer> loop() {\r\n        return Multi\r\n            .createBy().repeating()\r\n            .supplier(() -> Multi.createFrom().range(1, 3))\r\n            .indefinitely()\r\n            .onItem().transformToMultiAndConcatenate(integerMulti -> integerMulti);\r\n    }\r\n\r\n    @Incoming(\"event\")\r\n    @Outgoing(\"event2\")\r\n    public Message<Integer> checkError(int in) {\r\n        return Message.of(in)\r\n            .withNack(throwable -> {\r\n                Log.error(\"fatal error caught\", throwable);\r\n                System.exit(1);\r\n                return CompletableFuture.completedFuture(null);\r\n            });\r\n    }\r\n\r\n    @Incoming(\"event2\")\r\n    public void boom(int value) {\r\n        if (value == 1) {\r\n            Log.info(\"first event\");\r\n        } else {\r\n            Log.warn(\"second event\");\r\n            throw new RuntimeException(\"boom\");\r\n        }\r\n    }\r\n}\r\n```\r\n\n\n### Expected behavior\n\nMulti::onFailure is triggered\n\n### Actual behavior\n\nMulti::onFailure is just ignored\n\n### How to Reproduce?\n\nExample code provided\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### Quarkus version or git rev\n\n3.11.2 (3.8.5)\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/41356/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/41356/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
