{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/23683",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/23683/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/23683/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/23683/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/23683",
  "id": 1137631912,
  "node_id": "I_kwDOCFbutM5DzuKo",
  "number": 23683,
  "title": "Support role mapping for Client certificates",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1282139374,
      "node_id": "MDU6TGFiZWwxMjgyMTM5Mzc0",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/security",
      "name": "area/security",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/288",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/288",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/288/labels",
    "id": 10189838,
    "node_id": "MI_kwDOCFbutM4Am3wO",
    "number": 288,
    "title": "3.7.0.CR1",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 432,
    "state": "closed",
    "created_at": "2023-11-15T08:06:53Z",
    "updated_at": "2024-05-17T12:27:49Z",
    "due_on": null,
    "closed_at": "2024-01-17T13:52:08Z"
  },
  "comments": 22,
  "created_at": "2022-02-14T17:40:09Z",
  "updated_at": "2024-03-25T16:58:51Z",
  "closed_at": "2023-12-05T18:25:56Z",
  "active_lock_reason": null,
  "body": "### Description\n\nWhen using Mutual TLS Authentication it is not possible to add roles to identities without a custom `SecurityIdentityAugmentor` it would be great to be able to extract the roles from a file or an external source like a database or LDAP.\r\n\r\nThat means that when configuring MTLS I cannot have RBAC without implementing it myself.\n\n### Implementation ideas\n\nWould it be enough to just provide a default SecurityIdentityAugmentor that is self-configured based on the `quarkus.security.users.file.roles` property or `quarkus.security.jdbc.roles.query` (to give some ideas) ?\r\n\r\nThis is an adapted working example taken from the [guides](https://quarkus.io/guides/security-customization#security-identity-customization).\r\n```\r\n@ApplicationScoped\r\npublic class RolesAugmentor implements SecurityIdentityAugmentor {\r\n\r\n    private static final Logger LOGGER = LoggerFactory.getLogger(RolesAugmentor.class);\r\n\r\n    @ConfigProperty(name = \"quarkus.security.users.file.roles\")\r\n    Optional<String> rolesPath;\r\n\r\n    Map<String, Set<String>> roles = new HashMap<>();\r\n\r\n    @PostConstruct\r\n    void loadRoles() {\r\n        if (!rolesPath.isEmpty()) {\r\n            Properties rolesProps = new Properties();\r\n            try {\r\n                rolesProps.load(this.getClass().getClassLoader().getResourceAsStream(rolesPath.get()));\r\n                rolesProps.entrySet().forEach(e -> {\r\n                    LOGGER.debug(\"Added role mapping for {}:{}\", e.getKey(), e.getValue());\r\n                    roles.put((String) e.getKey(), parseRoles((String) e.getValue()));\r\n                });\r\n            } catch (Exception e) {\r\n                LOGGER.warn(\"Unable to read roles mappings from {}\", rolesPath, e);\r\n            }\r\n        }\r\n    }\r\n\r\n    private Set<String> parseRoles(String value) {\r\n        Set<String> roles = new HashSet<>();\r\n        for (String s : value.split(\",\")) {\r\n            roles.add(s.trim());\r\n        }\r\n        return roles;\r\n    }\r\n\r\n    @Override\r\n    public Uni<SecurityIdentity> augment(SecurityIdentity securityIdentity, AuthenticationRequestContext authenticationRequestContext) {\r\n        return Uni.createFrom().item(build(securityIdentity));\r\n    }\r\n\r\n    private Supplier<SecurityIdentity> build(SecurityIdentity securityIdentity) {\r\n        if (securityIdentity.isAnonymous()) {\r\n            return () -> securityIdentity;\r\n        }\r\n        QuarkusSecurityIdentity.Builder builder = QuarkusSecurityIdentity.builder(securityIdentity);\r\n        CertificateCredential certificate = securityIdentity.getCredential(CertificateCredential.class);\r\n        if (certificate != null) {\r\n            builder.addRoles(extractRoles(certificate.getCertificate()));\r\n        }\r\n        return builder::build;\r\n    }\r\n\r\n    private Set<String> extractRoles(X509Certificate certificate) {\r\n        if(certificate == null\r\n                || certificate.getSubjectX500Principal() == null\r\n                || certificate.getSubjectX500Principal().getName() == null) {\r\n            return Collections.emptySet();\r\n        }\r\n        Set<String> matchedRoles = roles.get(certificate.getSubjectX500Principal().getName());\r\n        if(matchedRoles == null) {\r\n            return Collections.emptySet();\r\n        }\r\n        return matchedRoles;\r\n    }\r\n\r\n}\r\n```",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/23683/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/23683/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
