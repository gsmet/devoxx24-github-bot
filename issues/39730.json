{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/39730",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39730/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39730/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39730/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/39730",
  "id": 2210328613,
  "node_id": "I_kwDOCFbutM6DvvAl",
  "number": 39730,
  "title": "AssistedInject like in Guice DI",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1282102389,
      "node_id": "MDU6TGFiZWwxMjgyMTAyMzg5",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/arc",
      "name": "area/arc",
      "color": "0366d6",
      "default": false,
      "description": "Issue related to ARC (dependency injection)"
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 0,
  "created_at": "2024-03-27T09:48:30Z",
  "updated_at": "2024-03-27T15:03:29Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nGuice DI provides a Feature called \"Assisted Inject\". See: https://github.com/google/guice/wiki/AssistedInject\r\nWith this feature it is possible to Create Beans with a combination of Injection-Parameters and Constructor-Parameters.\r\n\r\nIn a SaaS-Application, we usually have REST-Endpoints in the Quarkus-App, which are executed and called with data:\r\n- Data from Authentication/Authorization (SecurityIdentity)\r\n- Parameters given by the caller.\r\n\r\nFor example:\r\n\r\n```\r\n    @Inject\r\n    ProductManager productManager;\r\n\r\n    @Inject\r\n    SecurityIdentity securityIdentity;\r\n\r\n    @GET\r\n    @Authenticated\r\n    @Operation(summary = \"returns the product with the specified id for the given language\")\r\n    @APIResponse(responseCode = \"200\", description = \"Getting the product with the specified id successful\")\r\n    @APIResponse(responseCode = \"500\", description = \"Server unavailable\")\r\n    @Path(\"/{productId}/{langId}\")\r\n    public ProductDTO getOne(Long productId, Integer langId) throws NotFoundException {\r\n        RequestContext request = new RequestContext(securityIdentity, langId);\r\n        return productManager.getOne(request, productId).orElseThrow(NotFoundException::new);\r\n    }\r\n```\r\n\r\nIf i would be able to use \"Assisted Inject\" in Quarkus, i would be able to create the `ProductManager` instance by passing it parameters from the REST-Request (SecurityIdentity, langId ...) as constructor arguments (@Assisted) to the ProductManager, while at the same time, being able to pass other objects (ProductDAO, ...) to the ProductManager via @Inject.\r\n\r\nThis would allow me to combine the benefits of both worlds. \r\n\r\nI could not find a similar concept in Quarkus ArC. \r\n\r\n### Implementation ideas\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/39730/reactions",
    "total_count": 1,
    "+1": 1,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/39730/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
