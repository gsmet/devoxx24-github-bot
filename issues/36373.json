{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/36373",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/36373/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/36373/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/36373/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/36373",
  "id": 1934781500,
  "node_id": "I_kwDOCFbutM5zUmw8",
  "number": 36373,
  "title": "Support for non-mock `@ConfigMapping` in `@QuarkusComponentTest`",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1375177076,
      "node_id": "MDU6TGFiZWwxMzc1MTc3MDc2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/testing",
      "name": "area/testing",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/280",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/280",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/280/labels",
    "id": 10034258,
    "node_id": "MI_kwDOCFbutM4AmRxS",
    "number": 280,
    "title": "3.6.0.CR1",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 185,
    "state": "closed",
    "created_at": "2023-10-11T07:34:36Z",
    "updated_at": "2024-01-14T09:44:21Z",
    "due_on": null,
    "closed_at": "2023-11-15T12:08:43Z"
  },
  "comments": 0,
  "created_at": "2023-10-10T08:43:23Z",
  "updated_at": "2023-10-11T08:41:27Z",
  "closed_at": "2023-10-11T08:41:22Z",
  "active_lock_reason": null,
  "body": "### Description\n\nIt would be nice if config mappings (`@ConfigMapping`-annotated interfaces) could be supported in `@QuarkusComponentTest`, either by default or as an opt-in feature.\r\n\r\nCurrently they seem to always be mocked, while I'd like them to be handled as they would in a normal application.\r\n\r\nFor example, if I have a component like this:\r\n\r\n```\r\n@ApplicationScoped \r\npublic class Foo {\r\n\r\n    @Inject\r\n    Charlie charlie; \r\n\r\n    @Inject\r\n    FooConfig config;\r\n\r\n    @ConfigMapping(prefix = \"foo\")\r\n    interface FooConfig {\r\n        boolean bar();\r\n    }\r\n\r\n    public String ping() {\r\n        return config.bar() ? charlie.ping() : \"nok\";\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\nAnd a test like this:\r\n\r\n```\r\n@QuarkusComponentTest \r\n@TestConfigProperty(key = \"foo.bar\", value = \"true\") \r\npublic class FooTest {\r\n\r\n    @Inject\r\n    Foo foo; \r\n\r\n    @InjectMock\r\n    Charlie charlieMock; \r\n\r\n    @Test\r\n    public void testPing() {\r\n        Mockito.when(charlieMock.ping()).thenReturn(\"OK\"); \r\n        assertEquals(\"OK\", foo.ping());\r\n    }\r\n}\r\n```\r\n\r\n... then the test won't pass because `FooConfig` is always injected as a mock, and as a result `config.bar()` returns `false` by default.\r\n\r\nUsing `new QuarkusComponentTestExtension(Foo.FooConfig.class)` doesn't seem to help.\n\n### Implementation ideas\n\nQuote from @mkouba (taken out of context, as all good quotes are):\r\n\r\n> it should be doable ;-)",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/36373/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/36373/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
