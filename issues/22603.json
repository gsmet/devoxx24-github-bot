{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/22603",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22603/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22603/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22603/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/22603",
  "id": 1093116593,
  "node_id": "I_kwDOCFbutM5BJ6Kx",
  "number": 22603,
  "title": "gRPC code generation for specific dependencies",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 2062531368,
      "node_id": "MDU6TGFiZWwyMDYyNTMxMzY4",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/grpc",
      "name": "area/grpc",
      "color": "0366d6",
      "default": false,
      "description": "gRPC"
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/173",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/173",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/173/labels",
    "id": 7625643,
    "node_id": "MI_kwDOCFbutM4AdFur",
    "number": 173,
    "title": "2.7.1.Final",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 107,
    "state": "closed",
    "created_at": "2022-01-31T10:26:53Z",
    "updated_at": "2022-02-11T09:05:12Z",
    "due_on": null,
    "closed_at": "2022-02-08T12:17:15Z"
  },
  "comments": 7,
  "created_at": "2022-01-04T08:23:32Z",
  "updated_at": "2022-02-06T21:08:39Z",
  "closed_at": "2022-02-03T20:19:40Z",
  "active_lock_reason": null,
  "body": "### Description\n\n`gRPC` users are encouraged to share `.proto` files instead of generated code, as the other way around defeats the purpose of schema first contract. Both client and server should use the same `.proto` file to be able to communicate.\r\n\r\nMy opinion is that the most common way of sharing `.proto` files is between modules in a multi-module project. In this case, Quarkus does not provide any config or way to register the `.proto` files for code generation or discovery. \r\n\r\nGiven the following project structure:\r\n```\r\nexample-parent\r\n|\r\n|- example-security-api\r\n|- example-audit-api\r\n|- example-common-api\r\n|- example-security-service\r\n|- example-audit-service\r\n|- example-service\r\n```\r\n\r\nThe `-api` modules contain only `.proto` files to be used between services, because you manage your `.proto` files at a single place and you don't need to copy the files from one service to another. The security service uses the same `.proto` files to implement the security API server part and the example service uses the same `.proto` files to generate the client. In this common scenario, even if you set `quarkus.generate-code.grpc.scan-for-imports` to `all`, nothing is generated. IntelliJ doesn't even let you run the project. Please note that the service modules have no `.proto` files whatsoever and adding jandex index doesn't help either. Users resort to using the generated code because copy-pasting the `.proto` files in the same project in multiple modules is error prone.\r\n\r\nQuarkus should provide a way for code generation for this scenario, without sharing the actual code, but using the `.proto` files and it should be documented in the guides.\r\n\r\n \n\n### Implementation ideas\n\nMy proposal is to add configuration similar to `quarkus.index-dependency` which will run code generation on a given dependency based on the `.proto` files found in the dependency. This way we will avoid scanning the whole classpath and it will work for both local and remote dependencies. The configuration can also ask input from the developer for the actual path where the `.proto` files reside in the dependency. When specifying a dependency, `version` shouldn't be provided. Maybe we can make `artifactId` optional too. Developer would require setting the correct configuration and making sure that the `.proto` files are actually packaged in the `jar` output for code generation to work.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/22603/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/22603/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
