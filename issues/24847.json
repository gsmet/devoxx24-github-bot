{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/24847",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24847/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24847/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24847/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/24847",
  "id": 1197774860,
  "node_id": "I_kwDOCFbutM5HZJgM",
  "number": 24847,
  "title": "Avoid logging certain exceptions thrown by AWS Lambda handlers",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1326073020,
      "node_id": "MDU6TGFiZWwxMzI2MDczMDIw",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/amazon-lambda",
      "name": "area/amazon-lambda",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/179",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/179",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/179/labels",
    "id": 7795235,
    "node_id": "MI_kwDOCFbutM4AdvIj",
    "number": 179,
    "title": "2.9.0.CR1",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 151,
    "state": "closed",
    "created_at": "2022-03-23T10:06:12Z",
    "updated_at": "2022-05-12T08:09:58Z",
    "due_on": null,
    "closed_at": "2022-04-27T11:52:54Z"
  },
  "comments": 1,
  "created_at": "2022-04-08T20:21:06Z",
  "updated_at": "2022-04-18T18:37:50Z",
  "closed_at": "2022-04-18T18:37:47Z",
  "active_lock_reason": null,
  "body": "### Description\n\nThe AWS Lambda extension currently handles exceptions thrown by `RequestHandler` implementations in a uniform manner by logging the execution failure along with the stacktrace. In some cases, however, raising an exception is the expected way to provide a negative response to the caller - e.g. https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-lambda-pre-authentication.html#aws-lambda-triggers-pre-authentication-example. In these cases, it's undesirable to have the exception logged. Suppressing the `AbstractLambdaPollLoop` logger via configuration is an option, of course, but then you have to be sure to catch and log any exceptions you actually want to report in your handler code.\r\n\r\nIt would be great if the logic in the poll loop could make a determination about whether or not to log the exception in a configurable/programmable way.\n\n### Implementation ideas\n\nMy first thought is to introduce a specialized `RuntimeException` type that developers can throw directly, or extend with their own exceptions. This makes the logic in `AbstractLambdaPollLoop` trivial, but would mean writing Quarkus-specific handlers.\r\n\r\nAn alternative would be to allow the configuration of arbitrary exceptions by class name that the extensions should ignore.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/24847/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24847/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
