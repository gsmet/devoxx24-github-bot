{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40852",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40852/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40852/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40852/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/40852",
  "id": 2318629350,
  "node_id": "I_kwDOCFbutM6KM3nm",
  "number": 40852,
  "title": " @CacheResult with method returning Uni makes cache exceed its maximum size",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1808747697,
      "node_id": "MDU6TGFiZWwxODA4NzQ3Njk3",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/cache",
      "name": "area/cache",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/334",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/334",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/334/labels",
    "id": 11163455,
    "node_id": "MI_kwDOCFbutM4Aqlc_",
    "number": 334,
    "title": "3.8.6",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 117,
    "state": "closed",
    "created_at": "2024-06-10T07:54:20Z",
    "updated_at": "2024-08-28T09:33:53Z",
    "due_on": null,
    "closed_at": "2024-08-28T09:33:53Z"
  },
  "comments": 30,
  "created_at": "2024-05-27T08:58:37Z",
  "updated_at": "2024-08-14T12:08:46Z",
  "closed_at": "2024-06-11T16:06:04Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nWhen a method retuning a `Uni` is annotated with `@CacheResult` the result of the `Uni` is cached as expected, but the cache grows infinitely even when a maximum size is set.\r\n\r\n### Expected behavior\r\n\r\nWhen the cache reaches the specified maximum size, the number of elements in the cache should stop growing, or at least not grow infinitely.\r\n\r\n### Actual behavior\r\n\r\nNo elements are evicted and the cache grows infinitely\r\n\r\n### How to Reproduce?\r\n\r\nIn [GreetingResource](https://github.com/jolsum/quarkus-cache-eviction/blob/master/src/main/java/org/acme/GreetingResource.java) there are two endpoints (\"/hello/fast\" and \"/hello/delayed\"). The \"delayed\" endpoint gets its data from a method returning a `Uni<String>` where the response is delayed, and the method is annotated with `@CacheResult`. The \"fast\" endpoint gets it data from method returning a `Uni` with an item without any delay.\r\n\r\n```java\r\n@Path(\"/hello\")\r\npublic class GreetingResource {\r\n\r\n  @GET\r\n  @Produces(MediaType.TEXT_PLAIN)\r\n  @Path(\"/delayed\")\r\n  public Uni<String> delayed() {\r\n    return getHelloDelayed(System.currentTimeMillis());\r\n  }\r\n\r\n  @GET\r\n  @Produces(MediaType.TEXT_PLAIN)\r\n  @Path(\"/fast\")\r\n  public Uni<String> fast() {\r\n    return getHelloFast(System.currentTimeMillis());\r\n  }\r\n\r\n  @CacheResult(cacheName = \"delayed\")\r\n  Uni<String> getHelloDelayed(long key) {\r\n    return Uni.createFrom().item(\"Hello with a delay\").onItem().delayIt().by(Duration.ofMillis(10));\r\n  }\r\n\r\n  @CacheResult(cacheName = \"fast\")\r\n  Uni<String> getHelloFast(long key) {\r\n    return Uni.createFrom().item(\"Hello\");\r\n  }\r\n}\r\n```\r\nThe cache maximum size is defined as `quarkus.cache.caffeine.maximum-size = 10`\r\n\r\nIn the [GreetingResourceTest](https://github.com/jolsum/quarkus-cache-eviction/blob/master/src/test/java/org/acme/GreetingResourceTest.java) the endpoints are invoked 20 times and then wait for the size of the cache to become 10.\r\n\r\n```java\r\n@QuarkusTest\r\nclass GreetingResourceTest {\r\n\r\n  @Inject\r\n  @CacheName(\"fast\")\r\n  Cache cacheFast;\r\n\r\n  @Inject\r\n  @CacheName(\"delayed\")\r\n  Cache cacheDelayed;\r\n\r\n  @Test\r\n  void testFastEndpoint() {\r\n    for (int i = 0; i < 20; i++) {\r\n      given().when().get(\"/hello/fast\").then().statusCode(200).body(is(\"Hello\"));\r\n    }\r\n    await()\r\n        .atMost(5, TimeUnit.SECONDS)\r\n        .until(() -> ((CaffeineCache) cacheFast).keySet().size() == 10);\r\n  }\r\n\r\n  @Test\r\n  void testDelayedEndpoint() {\r\n    for (int i = 0; i < 20; i++) {\r\n      given().when().get(\"/hello/delayed\").then().statusCode(200).body(is(\"Hello with a delay\"));\r\n    }\r\n    await()\r\n        .atMost(5, TimeUnit.SECONDS)\r\n        .until(() -> ((CaffeineCache) cacheDelayed).keySet().size() == 10);\r\n  }\r\n}\r\n```\r\nHowever, the size remains at 20 even after waiting for 5 seconds\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nMicrosoft Windows [Version 10.0.22631.3593]\r\n\r\n### Output of `java -version`\r\n\r\nopenjdk version \"21.0.1\" 2023-10-17\r\n\r\n### Quarkus version or git rev\r\n\r\n3.10.2\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nApache Maven 3.9.6\r\n\r\n### Additional information\r\n\r\nI have done some debugging and manage to narrow the issue down to being an issue with `CaffeineCache` and how it works with the `CompletableFuture` returned from `Uni.subscribeAsCompletionStage()`.\r\n\r\nIf I create a `Uni` with a delayed item like this\r\n```java\r\n    var future =\r\n        Uni.createFrom()\r\n            .item(\"item\")\r\n            .onItem()\r\n            .delayIt()\r\n            .by(Duration.ofMillis(100))\r\n            .subscribeAsCompletionStage();\r\n\r\n    future.whenComplete(\r\n        (result, error) -> {\r\n          System.out.println(future.isDone());\r\n        });\r\n```\r\nIn `whenComplete()` the `future.isDone()` returns `false`. So in Caffeine class `BoundedLocalCache.replace()` the item gets weight 0 and the cache considers it as a read rather than a write even if the item is stored, and the eviction is not run.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40852/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40852/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
