{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/28693",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/28693/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/28693/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/28693/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/28693",
  "id": 1415359965,
  "node_id": "I_kwDOCFbutM5UXK3d",
  "number": 28693,
  "title": "Deserialization fails in native mode with kotlin.serialization",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1287515315,
      "node_id": "MDU6TGFiZWwxMjg3NTE1MzE1",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/kotlin",
      "name": "area/kotlin",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/206",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/206",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/206/labels",
    "id": 8420367,
    "node_id": "MI_kwDOCFbutM4AgHwP",
    "number": 206,
    "title": "2.14.0.CR1",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 224,
    "state": "closed",
    "created_at": "2022-09-14T06:18:10Z",
    "updated_at": "2023-05-15T13:54:56Z",
    "due_on": null,
    "closed_at": "2022-10-26T12:52:36Z"
  },
  "comments": 6,
  "created_at": "2022-10-19T17:41:17Z",
  "updated_at": "2022-10-21T09:19:05Z",
  "closed_at": "2022-10-21T09:18:59Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nI wrote a lambda with the `quarkus-amazon-lambda` library. This lambda can be triggered by an aws api gateway call. It basically serves as webhook for mailgun. The lambda code so far is quite simple: \r\n\r\n```kotlin\r\n@Named(\"MailgunWebhookProcessor\")\r\nclass WebhookProcessor(val json: kotlinx.serialization.json.Json): RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent>\r\n{\r\n\r\n    override fun handleRequest(\r\n        input: APIGatewayProxyRequestEvent,\r\n        context: Context): APIGatewayProxyResponseEvent\r\n    {\r\n        try {\r\n            val callback = json.decodeFromString<EmailDeliveryUpdate>(input.body)\r\n\r\n            val signature = callback.signature\r\n            val candidate = \"$signature.timestamp$signature.token\"\r\n\r\n            val hexDigest = HMAC_UTILS.hmacHex(candidate)\r\n\r\n            if (hexDigest != signature.signature) {\r\n                Log.error(\"Signature not valid: $hexDigest vs ${signature.signature}\")\r\n            } else {\r\n                Log.info(\"Body $callback\")\r\n            }\r\n        } catch (e: Exception) {\r\n            Log.error(\"Webhook error\", e)\r\n        }\r\n        return APIGatewayProxyResponseEvent().withStatusCode(200)\r\n    }\r\n}\r\n```\r\nWhen this lambda is triggered by a callback from mailgun it fails with the following exception: \r\n\r\n```\r\nkotlinx.serialization.SerializationException: Serializer for class 'EmailDeliveryUpdate' is not found.\r\nMark the class as @Serializable or provide the serializer explicitly.\r\n\tat kotlinx.serialization.internal.Platform_commonKt.serializerNotRegistered(Platform.common.kt:91)\r\n\tat kotlinx.serialization.internal.PlatformKt.platformSpecificSerializerNotRegistered(Platform.kt:29)\r\n\tat kotlinx.serialization.SerializersKt__SerializersKt.serializer(Serializers.kt:60)\r\n\tat kotlinx.serialization.SerializersKt.serializer(Unknown Source)\r\n\tat mylambda.WebhookProcessor.handleRequest(WebhookProcessor.kt:46)\r\n\tat mylambda.WebhookProcessor.handleRequest(WebhookProcessor.kt:17)\r\n\tat io.quarkus.amazon.lambda.runtime.AmazonLambdaRecorder$1.processRequest(AmazonLambdaRecorder.java:170)\r\n\tat io.quarkus.amazon.lambda.runtime.AbstractLambdaPollLoop$1.run(AbstractLambdaPollLoop.java:137)\r\n\tat java.lang.Thread.run(Thread.java:833)\r\n\tat com.oracle.svm.core.thread.PlatformThreads.threadStartRoutine(PlatformThreads.java:705)\r\n\tat com.oracle.svm.core.posix.thread.PosixPlatformThreads.pthreadStartRoutine(PosixPlatformThreads.java:202)\r\n\r\n```\r\nThe data class I am using looks like the following: \r\n```kotlin\r\n@RegisterForReflection\r\n@Serializable\r\ndata class EmailDeliveryUpdate(\r\n    val signature: Signature,\r\n    @SerialName(\"event-data\")\r\n    val eventData: EventData\r\n)\r\n```\r\nHere is the build.gradle file: \r\n\r\n```groovy\r\nplugins {\r\n    id 'io.quarkus'\r\n    id 'org.jetbrains.kotlin.jvm' version \"1.7.20\"\r\n    id 'org.jetbrains.kotlin.plugin.allopen' version \"1.7.20\"\r\n    id 'org.jetbrains.kotlin.plugin.serialization' version '1.7.20'\r\n}\r\n\r\nrepositories {\r\n    mavenCentral()\r\n    mavenLocal()\r\n}\r\n\r\napply from: \"tasks/artifactory.gradle\"\r\napply from: \"tasks/test_coverage.gradle\"\r\n\r\ndependencies {\r\n    implementation enforcedPlatform(\"io.quarkus:quarkus-bom:${quarkusVersion}\")\r\n    implementation enforcedPlatform(\"io.quarkus.platform:quarkus-amazon-services-bom:${quarkusVersion}\")\r\n\r\n    implementation 'io.quarkus:quarkus-amazon-lambda'\r\n    implementation 'io.quarkus:quarkus-config-yaml'\r\n    implementation 'io.quarkus:quarkus-kotlin'\r\n    implementation 'io.quarkus:quarkus-arc'\r\n    implementation 'io.quarkus:quarkus-resteasy-reactive-kotlin-serialization-common'\r\n\r\n    implementation 'io.quarkiverse.loggingjson:quarkus-logging-json:2.0.0'\r\n\r\n    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'\r\n    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json'\r\n\r\n    implementation 'commons-codec:commons-codec'\r\n\r\n    testImplementation 'io.quarkus:quarkus-junit5'\r\n    testImplementation 'io.kotest:kotest-runner-junit5-jvm:5.5.1'\r\n    testImplementation 'io.kotest:kotest-assertions-json:5.5.1'\r\n}\r\n\r\ngroup 'mylambda'\r\nversion '1.0.0-SNAPSHOT'\r\n\r\njava {\r\n    sourceCompatibility = JavaVersion.VERSION_11\r\n    targetCompatibility = JavaVersion.VERSION_11\r\n}\r\n\r\nallOpen {\r\n    annotation(\"javax.ws.rs.Path\")\r\n    annotation(\"javax.enterprise.context.ApplicationScoped\")\r\n    annotation(\"io.quarkus.test.junit.QuarkusTest\")\r\n}\r\n\r\ncompileKotlin {\r\n    kotlinOptions.jvmTarget = JavaVersion.VERSION_11\r\n    kotlinOptions.javaParameters = true\r\n}\r\n\r\ncompileTestKotlin {\r\n    kotlinOptions.jvmTarget = JavaVersion.VERSION_11\r\n}\r\n\r\n```\r\n\r\nI already had issues like that with Jackson back in the days and we decided to give up on quarkus native for our regular k8s services. Half a year later, I wanted to give it another try; this time with kotlin.serialization as I thought it could fit better for a native approach because most of the heavy lifting is done during build time. \r\n\r\n\r\n### Expected behavior\r\n\r\nKotlin.serialization and/or jackson json serialization/deserialization should work reliably in native mode without having to compromise on core kotlin language features (e.g. enforcing nullable props and giving up on immutability in data classes)\r\n\r\n### Actual behavior\r\n\r\n_No response_\r\n\r\n### How to Reproduce?\r\n\r\n_No response_\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\n_No response_\r\n\r\n### Output of `java -version`\r\n\r\n_No response_\r\n\r\n### GraalVM version (if different from Java)\r\n\r\n22.2\r\n\r\n### Quarkus version or git rev\r\n\r\n2.13.2.Final\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\ngradle-7.5.1\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/28693/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/28693/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
