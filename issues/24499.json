{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/24499",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24499/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24499/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24499/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/24499",
  "id": 1177947264,
  "node_id": "I_kwDOCFbutM5GNgyA",
  "number": 24499,
  "title": "Hibernate Reactive with Panache : transaction rollback should trigger session re-creation",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1273026134,
      "node_id": "MDU6TGFiZWwxMjczMDI2MTM0",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/panache",
      "name": "area/panache",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 1273026509,
      "node_id": "MDU6TGFiZWwxMjczMDI2NTA5",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/persistence",
      "name": "area/persistence",
      "color": "FBCA04",
      "default": false,
      "description": "OBSOLETE, DO NOT USE"
    },
    {
      "id": 2122256208,
      "node_id": "MDU6TGFiZWwyMTIyMjU2MjA4",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/hibernate-reactive",
      "name": "area/hibernate-reactive",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 12,
  "created_at": "2022-03-23T10:52:10Z",
  "updated_at": "2023-06-07T09:55:14Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Describe the bug\n\nTurns out when a TX is rolled-back because of an error (or exception, I assume), we need to re-create the session, because otherwise it's polluted. Apparently HR does that, but the `Session` we get from ArC doesn't support it.\r\n\r\nTest case:\r\n\r\n```java\r\n    @Path(\"tx/rollback\")\r\n    public Uni<String> rollback() {\r\n        return rollback1()\r\n                .flatMap(v -> {\r\n                    // run a rolled back transaction\r\n                    return doTransaction();\r\n                })\r\n                .onItem().failWith(() -> new AssertionError(\"Should have failed transaction\"))\r\n                .onFailure().recoverWithItem(x -> {\r\n                    assertTrue(x instanceof RuntimeException);\r\n                    assertEquals(x.getMessage(), \"this should rollback\");\r\n                    return null;\r\n                })\r\n                .flatMap(v -> rollback2())\r\n                .map(v -> \"OK\");\r\n    }\r\n\r\n//    @ReactiveTransactional\r\n    Uni<Void> rollback1(){\r\n        return Panache.getSession().flatMap(session -> {\r\n            return session.withTransaction(tx -> {\r\n                return Person.deleteAll()\r\n                        .flatMap(v -> Person.count())\r\n                        .map(count -> {\r\n                            // sanity check\r\n                            assertEquals(0, count);\r\n                            return null;\r\n                        });\r\n            });\r\n        });\r\n    }\r\n\r\n//    @ReactiveTransactional\r\n    Uni<Void> rollback2(){\r\n        return Panache.getSession().flatMap(session -> {\r\n            return session.withTransaction(tx -> {\r\n                return Person.count()\r\n                        .map(count -> {\r\n                            // should have been rolled back\r\n                            assertEquals(0, count);\r\n                            return null;\r\n                        });\r\n            });\r\n        });\r\n    }\r\n    \r\n//    @ReactiveTransactional\r\n    public Uni<Void> doTransaction(){\r\n        return Panache.getSession().flatMap(session -> {\r\n            return session.withTransaction(tx -> {\r\n                Person p = new Person();\r\n                return p.persist()\r\n                        .flatMap(v -> Uni.createFrom().failure(new RuntimeException(\"this should rollback\")));\r\n            });\r\n        });     \r\n    }\r\n```\r\n\r\n@DavideD told me this, so I'll need to look into it.\n\n### Expected behavior\n\n_No response_\n\n### Actual behavior\n\n_No response_\n\n### How to Reproduce?\n\n_No response_\n\n### Output of `uname -a` or `ver`\n\n_No response_\n\n### Output of `java -version`\n\n_No response_\n\n### GraalVM version (if different from Java)\n\n_No response_\n\n### Quarkus version or git rev\n\n_No response_\n\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\n\n_No response_\n\n### Additional information\n\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/24499/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/24499/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
