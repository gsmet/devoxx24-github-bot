{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40349",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40349/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40349/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40349/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/40349",
  "id": 2269578135,
  "node_id": "I_kwDOCFbutM6HRwOX",
  "number": 40349,
  "title": "HandleRequestCollectionHelper for Quarkus Amazon Lambda",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1326073020,
      "node_id": "MDU6TGFiZWwxMzI2MDczMDIw",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/amazon-lambda",
      "name": "area/amazon-lambda",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/334",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/334",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/334/labels",
    "id": 11163455,
    "node_id": "MI_kwDOCFbutM4Aqlc_",
    "number": 334,
    "title": "3.8.6",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 117,
    "state": "closed",
    "created_at": "2024-06-10T07:54:20Z",
    "updated_at": "2024-08-28T09:33:53Z",
    "due_on": null,
    "closed_at": "2024-08-28T09:33:53Z"
  },
  "comments": 5,
  "created_at": "2024-04-29T17:30:37Z",
  "updated_at": "2024-08-14T12:32:26Z",
  "closed_at": "2024-07-04T10:39:50Z",
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nHello.\r\n\r\nWe run several quarkus application as AWS Lambdas. Some are triggered by an AWS Api gateway and some by sqs or sns. A queue can collect some messages and send them via batching to a lambda. In JSON this would look like this if the message has a name and description attribute.\r\n\r\n```\r\n[{\"name\":\"apple\",\"description\":\"an apple a day...\"},{\"name\":\"strawberry\",\"description\":\"red fruit\"}]\r\n```\r\n\r\nA RequestHandler would look like this:\r\n\r\n```\r\npublic class FruitsLambda implements RequestHandler<List<Fruit>, Void> {\r\n\r\n    @Override\r\n    public Void handleRequest(List<Fruit> fruit, Context context) {\r\n        fruit.forEach(this::printName);\r\n        return null;\r\n    }\r\n\r\n    private void printName(Fruit fruit) {\r\n        Log.info(fruit.name());\r\n        Log.info(fruit.description());\r\n    }\r\n}\r\n```\r\n\r\nWhen this runs sadly an exception occurs.\r\n\r\n```\r\nERROR [io.qua.ama.lam.run.AbstractLambdaPollLoop] (Lambda Thread (TEST)) Failed to run lambda (TEST): java.lang.ClassCastException: class java.util.LinkedHashMap cannot be cast to class de.hamburml.quarkus.aws.lambda.Fruit (java.util.LinkedHashMap is in module java.base of loader 'bootstrap'; de.hamburml.quarkus.aws.lambda.Fruit is in unnamed module of loader io.quarkus.bootstrap.classloading.QuarkusClassLoader @27b71f50)\r\n```\r\n\r\nThe ObjectMapper cannot infer the correct type and as fallback uses a LinkedHashMap.\r\n\r\nThis can be solved with a little trick and this is my enhancement idea...\r\n\r\n```\r\npublic abstract class HandleRequestCollectionHelper<INPUT_TYPE, OUTPUT_TYPE> implements RequestHandler<Object, OUTPUT_TYPE> {\r\n    @Inject\r\n    ObjectMapper objectMapper;\r\n\r\n    @Override\r\n    public OUTPUT_TYPE handleRequest(Object input, Context context) {\r\n        INPUT_TYPE convertedInput = objectMapper.convertValue(input, this.getCollectionReference());\r\n        this.handle(convertedInput, context);\r\n        return null;\r\n    }\r\n\r\n    public abstract TypeReference<INPUT_TYPE> getCollectionReference();\r\n\r\n    public abstract OUTPUT_TYPE handle(INPUT_TYPE input, Context context);\r\n\r\n}\r\n```\r\n\r\n```\r\npublic class FruitsLambda2 extends HandleRequestCollectionHelper<List<Fruit>, Void> {\r\n\r\n    @Override\r\n    public TypeReference<List<Fruit>> getCollectionReference() {\r\n        return new TypeReference<>() { };\r\n    }\r\n\r\n    @Override\r\n    public Void handle(List<Fruit> input, Context context) {\r\n        input.forEach(this::printName);\r\n        return null;\r\n    }\r\n\r\n    private void printName(Fruit fruit) {\r\n        Log.info(fruit.name());\r\n        Log.info(fruit.description());\r\n    }\r\n}\r\n```\r\n\r\nWith HandleRequestCollectionHelper the subclass is forced to implement getCollectionReference so that the ObjectMapper is able to convert the LinkedHashMap to the Collection-Type. If this is done inside a HandleRequestHelper this is hidden from the developer. Maybe getCollectionReference can also be saved with some reflection magic because the type should be already there in the INPUT_TYPE parameter.\r\n\r\nHandleRequestCollectionHelper could be added to the amazon-lambda lib. Or maybe automatically used if a Collection-Type is used in first parameter of implementation of RequestHandler-Interface.\r\n\r\nI have a simple example here https://github.com/hamburml/quarkus-lambda-handler-with-collection Under src/test are two packages, working and notworking.\r\n\r\nLet me know what you think of that.\r\n\r\nThanks\r\nMichael\r\n",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/40349/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/40349/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
