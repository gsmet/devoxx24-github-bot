{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/38336",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/38336/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/38336/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/38336/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/38336",
  "id": 2094427986,
  "node_id": "I_kwDOCFbutM581m9S",
  "number": 38336,
  "title": "Support @InjectMock on test constructor arguments",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1375177076,
      "node_id": "MDU6TGFiZWwxMzc1MTc3MDc2",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/testing",
      "name": "area/testing",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 7,
  "created_at": "2024-01-22T17:40:37Z",
  "updated_at": "2024-01-25T10:38:44Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Description\n\nFor background, typically when I setup a project, I setup a `lombok.config` file with `lombok.fieldDefaults.defaultPrivate` and `lombok.fieldDefaults.defaultFinal` options set to `true`, making all fields in every class `private final` by default, mostly to reduce boilerplate and keep things a bit cleaner.\r\n\r\nOne difficulty with this is using `@QuarkusComponentTest` with `@InjectMock`, which due to its reliance on field injection, wouldn't work with final fields. I can work around it by adding `@FieldDefaults(makeFinal = false)` on the class, but I'd prefer to keep everything consistently final across the board if possible.\r\n\r\nIt would help if `@QuarkusComponentTest` would identify that an injectable constructor exists (whether by the presence of an `@Inject` annotation, a non-empty constructor or usages of `@InjectMock` on the arguments), and use that for initializing the class instance, injecting mocks as necessary.\n\n### Implementation ideas\n\nThe `MockitoExtension` is a decent example of how something like this can be achieved: https://github.com/mockito/mockito/blob/main/subprojects/junit-jupiter/src/main/java/org/mockito/junit/jupiter/MockitoExtension.java#L208.\r\n\r\nIt supports constructor injection of mocks with `@Mock` on the arguments, though not the mockito version of `@InjectMocks`. When using this extension, I would typically setup Lombok with `lombok.copyableAnnotations += org.mockito.Mock`, which will copy the annotations from the fields the constructor generated by `@RequiredArgsConstructor`.\r\n\r\nSomething along those lines would be helpful with the Quarkus `@InjectMock`, which would need to be allowed to be declared on constructor arguments in addition to fields.",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/38336/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/38336/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
