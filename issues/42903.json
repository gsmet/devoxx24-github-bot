{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/42903",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/42903/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/42903/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/42903/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/42903",
  "id": 2496788463,
  "node_id": "I_kwDOCFbutM6U0ffv",
  "number": 42903,
  "title": "native compilation bring in unexpected Netty classes",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 2497075451,
      "node_id": "MDU6TGFiZWwyNDk3MDc1NDUx",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/native-image",
      "name": "area/native-image",
      "color": "0366d6",
      "default": false,
      "description": ""
    },
    {
      "id": 6795585542,
      "node_id": "LA_kwDOCFbutM8AAAABlQxoBg",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/netty",
      "name": "area/netty",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "open",
  "locked": false,
  "milestone": null,
  "comments": 14,
  "created_at": "2024-08-30T10:00:51Z",
  "updated_at": "2024-09-02T10:13:11Z",
  "closed_at": null,
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nCompiling natively https://github.com/franz1981/quarkus-profiling-workshop produces a list of different recheable classes for Netty, including these:\r\n```\r\nio.netty.buffer.AbstractByteBuf\r\nio.netty.buffer.AbstractByteBufAllocator\r\nio.netty.buffer.AbstractDerivedByteBuf\r\nio.netty.buffer.AbstractPooledDerivedByteBuf\r\nio.netty.buffer.AbstractPooledDerivedByteBuf$PooledNonRetainedDuplicateByteBuf\r\nio.netty.buffer.AbstractPooledDerivedByteBuf$PooledNonRetainedSlicedByteBuf\r\nio.netty.buffer.AbstractReferenceCountedByteBuf\r\nio.netty.buffer.AbstractReferenceCountedByteBuf$1\r\nio.netty.buffer.AbstractUnpooledSlicedByteBuf\r\nio.netty.buffer.AbstractUnsafeSwappedByteBuf\r\nio.netty.buffer.AdvancedLeakAwareByteBuf\r\nio.netty.buffer.AdvancedLeakAwareCompositeByteBuf\r\nio.netty.buffer.ByteBuf\r\nio.netty.buffer.ByteBufAllocator\r\nio.netty.buffer.ByteBufInputStream\r\nio.netty.buffer.ByteBufUtil\r\nio.netty.buffer.ByteBufUtil$1\r\nio.netty.buffer.ByteBufUtil$HexUtil\r\nio.netty.buffer.ByteBufUtil$SWARByteSearch\r\nio.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf\r\nio.netty.buffer.ByteBufUtil$ThreadLocalDirectByteBuf$1\r\nio.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf\r\nio.netty.buffer.ByteBufUtil$ThreadLocalUnsafeDirectByteBuf$1\r\nio.netty.buffer.CompositeByteBuf\r\nio.netty.buffer.CompositeByteBuf$Component\r\nio.netty.buffer.CompositeByteBuf$CompositeByteBufIterator\r\nio.netty.buffer.DefaultByteBufHolder\r\nio.netty.buffer.DuplicatedByteBuf\r\nio.netty.buffer.EmptyByteBuf\r\nio.netty.buffer.HeapByteBufUtil\r\nio.netty.buffer.IntPriorityQueue\r\nio.netty.buffer.LongLongHashMap\r\nio.netty.buffer.PoolArena\r\nio.netty.buffer.PoolArena$DirectArena\r\nio.netty.buffer.PoolArena$HeapArena\r\nio.netty.buffer.PoolChunk\r\nio.netty.buffer.PoolChunkList\r\nio.netty.buffer.PoolSubpage\r\nio.netty.buffer.PoolThreadCache\r\nio.netty.buffer.PoolThreadCache$FreeOnFinalize\r\nio.netty.buffer.PoolThreadCache$MemoryRegionCache\r\nio.netty.buffer.PoolThreadCache$MemoryRegionCache$1\r\nio.netty.buffer.PoolThreadCache$MemoryRegionCache$Entry\r\nio.netty.buffer.PoolThreadCache$NormalMemoryRegionCache\r\nio.netty.buffer.PoolThreadCache$SubPageMemoryRegionCache\r\nio.netty.buffer.PooledByteBuf\r\nio.netty.buffer.PooledByteBufAllocator\r\nio.netty.buffer.PooledByteBufAllocator$1\r\nio.netty.buffer.PooledByteBufAllocator$PoolThreadLocalCache\r\nio.netty.buffer.PooledByteBufAllocatorMetric\r\nio.netty.buffer.PooledDuplicatedByteBuf\r\nio.netty.buffer.PooledDuplicatedByteBuf$1\r\nio.netty.buffer.PooledHeapByteBuf\r\nio.netty.buffer.PooledHeapByteBuf$1\r\nio.netty.buffer.PooledSlicedByteBuf\r\nio.netty.buffer.PooledSlicedByteBuf$1\r\nio.netty.buffer.PooledUnsafeDirectByteBuf\r\nio.netty.buffer.PooledUnsafeDirectByteBuf$1\r\nio.netty.buffer.PooledUnsafeHeapByteBuf\r\nio.netty.buffer.PooledUnsafeHeapByteBuf$1\r\nio.netty.buffer.ReadOnlyByteBuf\r\nio.netty.buffer.SimpleLeakAwareByteBuf\r\nio.netty.buffer.SimpleLeakAwareCompositeByteBuf\r\nio.netty.buffer.SizeClasses\r\nio.netty.buffer.SwappedByteBuf\r\nio.netty.buffer.Unpooled\r\nio.netty.buffer.UnpooledByteBufAllocator\r\nio.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledDirectByteBuf\r\nio.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledHeapByteBuf\r\nio.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeDirectByteBuf\r\nio.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf\r\nio.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf\r\nio.netty.buffer.UnpooledByteBufAllocator$UnpooledByteBufAllocatorMetric\r\nio.netty.buffer.UnpooledDirectByteBuf\r\nio.netty.buffer.UnpooledDuplicatedByteBuf\r\nio.netty.buffer.UnpooledHeapByteBuf\r\nio.netty.buffer.UnpooledSlicedByteBuf\r\nio.netty.buffer.UnpooledUnsafeDirectByteBuf\r\nio.netty.buffer.UnpooledUnsafeHeapByteBuf\r\nio.netty.buffer.UnpooledUnsafeNoCleanerDirectByteBuf\r\nio.netty.buffer.UnreleasableByteBuf\r\nio.netty.buffer.UnsafeByteBufUtil\r\nio.netty.buffer.UnsafeDirectSwappedByteBuf\r\nio.netty.buffer.UnsafeHeapSwappedByteBuf\r\nio.netty.buffer.WrappedByteBuf\r\nio.netty.buffer.WrappedCompositeByteBuf\r\n```\r\nwhich include some \"unexpected\" (to me at least) mutual exclusive variant o the same e.g.:\r\n- `io.netty.buffer.PooledUnsafeDirectByteBuf` are mutually exclusive to `io.netty.buffer.UnpooledDirectByteBuf`: see https://github.com/netty/netty/blob/95d86bbcee4f8e5a7d273d7ee16f69982cf2fab1/buffer/src/main/java/io/netty/buffer/PoolArena.java#L720-L722\r\n- `io.netty.buffer.UnpooledUnsafeDirectByteBuf`/ `io.netty.buffer.UnpooledUnsafeNoCleanerDirectByteBuf` and `io.netty.buffer.UnpooledDirectByteBuf`: see https://github.com/netty/netty/blob/95d86bbcee4f8e5a7d273d7ee16f69982cf2fab1/buffer/src/main/java/io/netty/buffer/PooledByteBufAllocator.java#L406-L407 and https://github.com/netty/netty/blob/4.1/buffer/src/main/java/io/netty/buffer/UnsafeByteBufUtil.java#L682-L687\r\n\r\nThe same thing should applies to the `Heap` variants e.g. `io.netty.buffer.PooledUnsafeHeapByteBuf` vs `io.netty.buffer.PooledHeapByteBuf` - but I need to better understand if vetx is messing up with them.\r\nFYI these:\r\n```\r\nio.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledDirectByteBuf\r\nio.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledHeapByteBuf\r\nio.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeDirectByteBuf\r\nio.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeHeapByteBuf\r\nio.netty.buffer.UnpooledByteBufAllocator$InstrumentedUnpooledUnsafeNoCleanerDirectByteBuf\r\n```\r\nare still related the heap unpooled variant and should be cut in half depending if unsafe is available or not, see:\r\nhttps://github.com/netty/netty/blob/95d86bbcee4f8e5a7d273d7ee16f69982cf2fab1/buffer/src/main/java/io/netty/buffer/UnpooledByteBufAllocator.java#L92-L94\r\n\r\nThe most of these classes presence depends by `Cleaner`s and `Unsafe` presence, which should be something known upfront (and stored, in Netty, in `static final` fields), hence I would expect to work.\r\n\r\nIn addition and separately, I've opened long time ago https://github.com/netty/netty/pull/13459 which should take care (after changing vertx to benefit of this) to save these too:\r\n```\r\nio.netty.buffer.AdvancedLeakAwareByteBuf\r\nio.netty.buffer.AdvancedLeakAwareCompositeByteBuf\r\nio.netty.buffer.SimpleLeakAwareByteBuf\r\nio.netty.buffer.SimpleLeakAwareCompositeByteBuf\r\n```\r\n\r\nTo me, apart from improvement in memory footprint, is the arity of virtual calls on buffer operations which would improve A LOT, preventing likely inlining - and that's why native image PGO seems to shine with Netty: having a single byte/short/int/long buffer operation to not be inlined and preprended by some (although predicatable) branch (i.e. types checks) will kill it's performance for buffer maniputaion scenarios - which is the very core of the internal of Netty protocols.\r\n\r\n\r\n### Implementation ideas\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/42903/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/42903/timeline",
  "performed_via_github_app": null,
  "state_reason": null
}
