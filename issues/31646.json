{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/31646",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31646/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31646/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31646/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/31646",
  "id": 1613090074,
  "node_id": "I_kwDOCFbutM5gJc0a",
  "number": 31646,
  "title": "Allow third party extensions to avoid validating the default JAXB context",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1683744663,
      "node_id": "MDU6TGFiZWwxNjgzNzQ0NjYz",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/jaxb",
      "name": "area/jaxb",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/239",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/239",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/239/labels",
    "id": 9130453,
    "node_id": "MI_kwDOCFbutM4Ai1HV",
    "number": 239,
    "title": "3.0.0.Alpha6",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 112,
    "state": "closed",
    "created_at": "2023-03-07T18:05:13Z",
    "updated_at": "2023-05-11T07:01:41Z",
    "due_on": null,
    "closed_at": "2023-03-15T12:48:12Z"
  },
  "comments": 12,
  "created_at": "2023-03-07T09:55:40Z",
  "updated_at": "2023-03-08T12:15:52Z",
  "closed_at": "2023-03-08T12:15:46Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nThe change 46f348c85934b914f8d986f4f4535134e4ffba03 by @Sgitario has brought hard times to Quarkus CXF and Camel Quarkus. Basically all our CXF related tests fail, because duplicate JAXB classes seem to a normal situation in CXF. \r\n\r\nHere an example of the stack trace see when running [quarkus-cxf-integration-test-client](https://github.com/quarkiverse/quarkus-cxf/tree/main/integration-tests/ws-security-client): \r\n\r\n```\r\nCaused by: java.lang.IllegalStateException: Failed to configure JAXB context\r\n        at io.quarkus.jaxb.deployment.JaxbProcessor.validateContext(JaxbProcessor.java:395)\r\n        at io.quarkus.jaxb.deployment.JaxbProcessor.setupJaxbContextConfig(JaxbProcessor.java:318)\r\n        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)\r\n        at java.base/java.lang.reflect.Method.invoke(Method.java:578)\r\n        at io.quarkus.deployment.ExtensionLoader$3.execute(ExtensionLoader.java:909)\r\n        at io.quarkus.builder.BuildContext.run(BuildContext.java:282)\r\n        at org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\r\n        at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2449)\r\n        at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1478)\r\n        at java.base/java.lang.Thread.run(Thread.java:1589)\r\n        at org.jboss.threads.JBossThread.run(JBossThread.java:501)\r\nCaused by: org.glassfish.jaxb.runtime.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions\r\nTwo classes have the same XML type name \"{http://www.w3.org/2005/08/addressing}EndpointReferenceType\". Use @XmlType.name and @XmlType.namespace to assign different names to them.\r\n        this problem is related to the following location:\r\n                at org.apache.cxf.ws.addressing.EndpointReferenceType\r\n                at public org.apache.cxf.ws.addressing.EndpointReferenceType org.apache.cxf.ws.addressing.ObjectFactory.createEndpointReferenceType()\r\n                at org.apache.cxf.ws.addressing.ObjectFactory\r\n                at protected java.util.List org.apache.cxf.ws.addressing.ReferenceParametersType.any\r\n                at org.apache.cxf.ws.addressing.ReferenceParametersType\r\n        this problem is related to the following location:\r\n                at jakarta.xml.ws.wsaddressing.W3CEndpointReference\r\n\r\n        at org.glassfish.jaxb.runtime.v2.runtime.IllegalAnnotationsException$Builder.check(IllegalAnnotationsException.java:83)\r\n        at org.glassfish.jaxb.runtime.v2.runtime.JAXBContextImpl.getTypeInfoSet(JAXBContextImpl.java:421)\r\n        at org.glassfish.jaxb.runtime.v2.runtime.JAXBContextImpl.<init>(JAXBContextImpl.java:255)\r\n        at org.glassfish.jaxb.runtime.v2.runtime.JAXBContextImpl$JAXBContextBuilder.build(JAXBContextImpl.java:1115)\r\n        at org.glassfish.jaxb.runtime.v2.ContextFactory.createContext(ContextFactory.java:144)\r\n        at org.glassfish.jaxb.runtime.v2.JAXBContextFactory.createContext(JAXBContextFactory.java:44)\r\n        at jakarta.xml.bind.ContextFinder.find(ContextFinder.java:368)\r\n        at jakarta.xml.bind.JAXBContext.newInstance(JAXBContext.java:605)\r\n        at jakarta.xml.bind.JAXBContext.newInstance(JAXBContext.java:546)\r\n        at io.quarkus.jaxb.deployment.JaxbProcessor.validateContext(JaxbProcessor.java:393)\r\n        ... 10 more\r\n```\r\n\r\nIn this particular case, both conflicting classes come through transitive dependencies of CXF:\r\n\r\n* `jakarta.xml.ws.wsaddressing.W3CEndpointReference` comes via\r\n\r\n```\r\nio.quarkiverse.cxf:quarkus-cxf-integration-test-client:2.0.0-SNAPSHOT:jar:\r\n        -> io.quarkiverse.cxf:quarkus-cxf:2.0.0-SNAPSHOT:jar:\r\n        -> org.apache.cxf:cxf-rt-frontend-jaxws:4.0.0:jar:\r\n        -> org.apache.cxf:cxf-rt-bindings-soap:4.0.0:jar:\r\n        -> jakarta.jws:jakarta.jws-api:3.0.0:jar\r\n```\r\n\r\n* `org.apache.cxf.ws.addressing.EndpointReferenceType` comes via\r\n\r\n```\r\nio.quarkiverse.cxf:quarkus-cxf-integration-test-client:2.0.0-SNAPSHOT:jar:\r\n        -> io.quarkiverse.cxf:quarkus-cxf:2.0.0-SNAPSHOT:jar:\r\n        -> org.apache.cxf:cxf-rt-frontend-jaxws:4.0.0:jar:\r\n        -> org.apache.cxf:cxf-core:4.0.0:jar\r\n```\r\n\r\nI doubt we can exclude the artifacts and I doubt we can exclude the classes via `quarkus.jaxb.exclude-classes`.\r\n\r\nAdvising all users of `camel-quarkus-cxf` and `quarkus-cxf` to always have `quarkus.jaxb.validate-jaxb-context=false` in their `application.properties` does not seem to be a good UX.\r\n\r\nI think the best way forward would be to find a programmatic way of disabling the JAXB context validation. \r\n\r\nI see three options:\r\n\r\n### A. Validate the JAXB context only if some JAXBContext injection point is available in the user application. \r\n\r\n### B. Split quarkus-jaxb into quarkus-jaxb-core and quarkus-jaxb\r\n\r\nquarkus-jaxb would contain the config, the properties, the validation and the default context bean\r\n\r\nquarkus-jaxb-core would keep all the rest. \r\n\r\nquarkus-cxf would depend only on quarkus-jaxb-core. If quarkus-cxf users need to inject the default JAXB context, they are on their own to add quarkus-jaxb dependency and resolve the conflicts.\r\n\r\n### C. Have some sort of `ValidateDefaultJAXBContextBuildItem` that would allow third party extensions to signal to JAXB extension that they do not want the validation.\r\n\r\n## Assessment:\r\n\r\nI see C as rather problematic. I think it would be hard to find the right semantics (esp. how it would combine with `quarkus.jaxb.validate-jaxb-context=false/true`), keep it transparent enough for end users and even document comprehensibly.\r\n\r\nIf A is technically possible, we should go with A. What do others think?\r\n\r\n\r\nThis blocks \r\n* https://github.com/apache/camel-quarkus/issues/4603\r\n* https://github.com/quarkiverse/quarkus-cxf/issues/730\r\n\r\n",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/31646/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/31646/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
