{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/34292",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34292/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34292/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34292/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/34292",
  "id": 1773246908,
  "node_id": "I_kwDOCFbutM5psZm8",
  "number": 34292,
  "title": "null keys in YAML config break JSON compatibility",
  "labels": [
    {
      "id": 985346622,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjI=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/enhancement",
      "name": "kind/enhancement",
      "color": "a2eeef",
      "default": false,
      "description": "New feature or request"
    },
    {
      "id": 1273030910,
      "node_id": "MDU6TGFiZWwxMjczMDMwOTEw",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/config",
      "name": "area/config",
      "color": "0366d6",
      "default": false,
      "description": ""
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/265",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/265",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/265/labels",
    "id": 9762660,
    "node_id": "MI_kwDOCFbutM4AlPdk",
    "number": 265,
    "title": "3.4.0.CR1",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 152,
    "state": "closed",
    "created_at": "2023-08-09T06:34:41Z",
    "updated_at": "2023-10-31T11:58:00Z",
    "due_on": null,
    "closed_at": "2023-09-06T13:01:00Z"
  },
  "comments": 3,
  "created_at": "2023-06-25T12:13:09Z",
  "updated_at": "2023-08-11T12:38:17Z",
  "closed_at": "2023-08-11T12:38:12Z",
  "active_lock_reason": null,
  "body": "### Description\r\n\r\nI'm not sure how common this is in general, though I doubt I'm the only platform engineer on Earth who does this: when deploying applications which accept YAML configuration, I quite often feed in the configuration as JSON -- which is also always valid YAML (with yes, pedantically, a few minor exceptions that don't normally matter in real life as long as you use UTF-8).\r\n\r\n(Why? In short, generally it's less ambiguous and is compatible with more tools. More convenient to canonicalize ([RFC 8785](https://www.rfc-editor.org/rfc/rfc8785)), and therefore to validate. Particularly in a microservices environment, using a tool to manage and generate config files is fairly standard, and I just tend to find that JSON makes that easier.)\r\n\r\nThis normally works very well with most applications, but unfortunately in Quarkus there is a design element that makes this difficult. Let's take this example from the guide: https://quarkus.io/guides/config-yaml#configuration-key-conflicts\r\n\r\nIn the underlying properties representation we have `quarkus.http.cors=true` and `quarkus.http.cors.methods=\"GET,PUT,POST\"`.\r\n\r\nWhen we attempt to represent these as YAML this is of course impossible, as the config value at `['quarkus']['http']['cors']` can't simultaneously be `true` and `{\"methods\": \"GET,PUT,POST\"}`.\r\n\r\nThere is a hack in the YAML representation to work around this, where instead the `true` value is placed under `['quarkus']['http']['cors'][null]`. Unfortunately, while all JSON is valid YAML, the reverse is not true. This YAML is unrepresentable in JSON -- all keys must be strings, so `null` is impossible to express.\r\n\r\nEven with natively YAML-based tooling, if any kind of schema or type system is used, the use of `null` as a key always stands out as an awkward exception.\r\n\r\nIn an application which parsed YAML natively as its config format, this would likely never have become a problem in the first place -- the design would simply use non-overlapping keys and call the first property `quarkus.http.cors.enabled` instead of the unrepresentable `quarkus.http.cors`.\r\n\r\n(I'm not trying here to get into whether the `methods` property in the same example should really be an array. Clearly people find the Java properties representation valuable, and clearly some compromises have to be made to be compatible with both formats.)\r\n\r\n### Implementation ideas\r\n\r\nWhat I would like to suggest, though, is that a change could be considered to allow the more compatible key `quarkus.http.cors.enabled` either as a replacement or an alias for the unrepresentable `quarkus.http.cors` key (along with similar aliases for any other keys with the same \"overlapping\" problem), so that the YAML config representation remains compatible with JSON.\r\n\r\nAs this is not really a \"bug\", though I do think it's a surprising and counterintuitive design, I've raised this as an improvement.\r\n\r\nTo be fair I should say we do have a workaround in place already, which is to put the `quarkus.http.cors=true` in the built-in `application.yaml`, separately from the other runtime config which is injected by the config system. This does seem to work -- the two files do seem to merge correctly, at least in the current version -- so this is hardly a critical issue for us. It would definitely be much nicer not to have to do this, though.\r\n\r\nThanks for reading :bow: ",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/34292/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/34292/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
