{
  "url": "https://api.github.com/repos/quarkusio/quarkus/issues/37741",
  "repository_url": "https://api.github.com/repos/quarkusio/quarkus",
  "labels_url": "https://api.github.com/repos/quarkusio/quarkus/issues/37741/labels{/name}",
  "comments_url": "https://api.github.com/repos/quarkusio/quarkus/issues/37741/comments",
  "events_url": "https://api.github.com/repos/quarkusio/quarkus/issues/37741/events",
  "html_url": "https://github.com/quarkusio/quarkus/issues/37741",
  "id": 2041678975,
  "node_id": "I_kwDOCFbutM55sYx_",
  "number": 37741,
  "title": "CDI request scope deactivation does not work on duplicated context",
  "labels": [
    {
      "id": 985346620,
      "node_id": "MDU6TGFiZWw5ODUzNDY2MjA=",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/kind/bug",
      "name": "kind/bug",
      "color": "d73a4a",
      "default": false,
      "description": "Something isn't working"
    },
    {
      "id": 1282102389,
      "node_id": "MDU6TGFiZWwxMjgyMTAyMzg5",
      "url": "https://api.github.com/repos/quarkusio/quarkus/labels/area/arc",
      "name": "area/arc",
      "color": "0366d6",
      "default": false,
      "description": "Issue related to ARC (dependency injection)"
    }
  ],
  "state": "closed",
  "locked": false,
  "milestone": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/milestones/288",
    "html_url": "https://github.com/quarkusio/quarkus/milestone/288",
    "labels_url": "https://api.github.com/repos/quarkusio/quarkus/milestones/288/labels",
    "id": 10189838,
    "node_id": "MI_kwDOCFbutM4Am3wO",
    "number": 288,
    "title": "3.7.0.CR1",
    "description": "",
    "creator": {
      "login": "gsmet",
      "id": 1279749,
      "node_id": "MDQ6VXNlcjEyNzk3NDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1279749?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gsmet",
      "html_url": "https://github.com/gsmet",
      "followers_url": "https://api.github.com/users/gsmet/followers",
      "following_url": "https://api.github.com/users/gsmet/following{/other_user}",
      "gists_url": "https://api.github.com/users/gsmet/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gsmet/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gsmet/subscriptions",
      "organizations_url": "https://api.github.com/users/gsmet/orgs",
      "repos_url": "https://api.github.com/users/gsmet/repos",
      "events_url": "https://api.github.com/users/gsmet/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gsmet/received_events",
      "type": "User",
      "site_admin": false
    },
    "open_issues": 0,
    "closed_issues": 432,
    "state": "closed",
    "created_at": "2023-11-15T08:06:53Z",
    "updated_at": "2024-05-17T12:27:49Z",
    "due_on": null,
    "closed_at": "2024-01-17T13:52:08Z"
  },
  "comments": 9,
  "created_at": "2023-12-14T13:15:28Z",
  "updated_at": "2024-01-12T10:21:47Z",
  "closed_at": "2024-01-12T10:21:44Z",
  "active_lock_reason": null,
  "body": "### Describe the bug\r\n\r\nmy use case:\r\n\r\nCurrently when gRPC extension is present, security events must be disabled or requests never reach gRPC server endpoint.\r\n\r\nWhen I fire CDI event synchronously or asynchronously, I always get warning log message `Request context already active when gRPC request started` logged several times.\r\n\r\nWhen CDI event is fired asynchronously and the CDI request context is activated, it should not be detectable by `Arc.container.request().isActive()`, because if other code re-use the same CDI request context that is also asynchronously deactivated by `io.quarkus.arc.impl.EventImpl`, than other code (like the gRPC one) will try to use deactivated context.\r\n\r\n### Expected behavior\r\n\r\nCDI request scope deactivation actually deactivates request context.\r\n\r\n### Actual behavior\r\n\r\nRequest always goes here https://github.com/quarkusio/quarkus/blob/5290dc7d2968635563d01f13f65c60ac6fc8d9f4/extensions/grpc/runtime/src/main/java/io/quarkus/grpc/runtime/supports/context/GrpcRequestContextGrpcInterceptor.java#L46.\r\n\r\n\r\n\r\n### How to Reproduce?\r\n\r\nReproducer:\r\n\r\n```\r\nquarkus create app --extensions=vertx-http\r\ncd code-with-quarkus/\r\n\r\nadd\r\n\r\nimport io.quarkus.arc.Arc;\r\nimport io.quarkus.runtime.StartupEvent;\r\nimport io.vertx.ext.web.Router;\r\nimport jakarta.enterprise.event.Observes;\r\n\r\npublic class StartupObserver {\r\n\r\n    void addRouter(@Observes StartupEvent event, Router router) {\r\n        router.route().handler(routingContext -> {\r\n            boolean activeBeforeActivation = Arc.container().requestContext().isActive();\r\n            Arc.container().requestContext().activate();\r\n            boolean activeAfterActivation = Arc.container().requestContext().isActive();\r\n            Arc.container().requestContext().terminate();\r\n            boolean activeAfterTermination = Arc.container().requestContext().isActive();\r\n            routingContext.end(\"before activation: \" + activeBeforeActivation\r\n                    + \" after activation: \" + activeAfterActivation\r\n            + \" after termination: \" + activeAfterTermination);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nmvn quarkus:dev\r\ncurl -v http://localhost:8080/\r\nresponse: \r\n\r\nbefore activation: false\r\nafter activation: true\r\nafter termination: true\r\n```\r\n\r\nAnother Reproducer :\r\n\r\ncommand `mvn clean verify -DskipTests -f extensions/grpc/ && mvn clean test -f extensions/grpc/deployment/ -Dtest=GrpcAuthUsingSeparatePortTest`\r\n\r\n1. This reproducer only shows that _Request context already active when gRPC request started_ message is logged, which should show that the request context is re-used even though started synchronously and terminated in `finally` clause.\r\n\r\nhttps://github.com/quarkusio/quarkus/blob/08bff7a2a239b0e7746f3aeb7d8811b3480a8143/independent-projects/arc/runtime/src/main/java/io/quarkus/arc/impl/EventImpl.java#L330\r\n\r\n```\r\ndiff --git a/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/auth/CDIEventHandler.java b/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/auth/CDIEventHandler.java\r\nnew file mode 100644\r\nindex 00000000000..a8b52d2c13f\r\n--- /dev/null\r\n+++ b/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/auth/CDIEventHandler.java\r\n@@ -0,0 +1,33 @@\r\n+package io.quarkus.grpc.auth;\r\n+\r\n+import jakarta.enterprise.context.ApplicationScoped;\r\n+import jakarta.enterprise.event.Event;\r\n+import jakarta.enterprise.event.Observes;\r\n+import jakarta.inject.Inject;\r\n+\r\n+import io.vertx.core.Handler;\r\n+import io.vertx.ext.web.Router;\r\n+import io.vertx.ext.web.RoutingContext;\r\n+\r\n+@ApplicationScoped\r\n+public class CDIEventHandler {\r\n+\r\n+    @Inject\r\n+    Event<Integer> event;\r\n+\r\n+    void init(@Observes Router router) {\r\n+        router.route().order(-99).handler(new Handler<RoutingContext>() {\r\n+            @Override\r\n+            public void handle(RoutingContext routingContext) {\r\n+                // IMPORTANT: if you comment out next line, the 'Request context already active when gRPC request started'\r\n+                //            log message will never be logged\r\n+                event.fire(1);\r\n+                routingContext.next();\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+    void consume1(@Observes Integer integer) {\r\n+        System.out.println(\"Integer is \" + integer);\r\n+    }\r\n+}\r\ndiff --git a/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/auth/GrpcAuthTestBase.java b/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/auth/GrpcAuthTestBase.java\r\nindex 3ec48c1ca6b..f17edc8897d 100644\r\n--- a/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/auth/GrpcAuthTestBase.java\r\n+++ b/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/auth/GrpcAuthTestBase.java\r\n@@ -62,6 +62,7 @@ protected static QuarkusUnitTest createQuarkusUnitTest(String extraProperty) {\r\n \r\n                     return ShrinkWrap.create(JavaArchive.class)\r\n                             .addClasses(Service.class, BasicGrpcSecurityMechanism.class, BlockingHttpSecurityPolicy.class)\r\n+                            .addClass(CDIEventHandler.class)\r\n                             .addPackage(SecuredService.class.getPackage())\r\n                             .add(new StringAsset(props), \"application.properties\");\r\n                 });\r\ndiff --git a/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/auth/GrpcAuthUsingSeparatePortTest.java b/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/auth/GrpcAuthUsingSeparatePortTest.java\r\nindex f16d44b2da1..3b45ad0a62a 100644\r\n--- a/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/auth/GrpcAuthUsingSeparatePortTest.java\r\n+++ b/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/auth/GrpcAuthUsingSeparatePortTest.java\r\n@@ -10,5 +10,4 @@ public class GrpcAuthUsingSeparatePortTest extends GrpcAuthTestBase {\r\n     static final QuarkusUnitTest config = createQuarkusUnitTest(\"quarkus.grpc.server.use-separate-server=false\\n\" +\r\n             \"quarkus.grpc.clients.securityClient.host=localhost\\n\" +\r\n             \"quarkus.grpc.clients.securityClient.port=8081\\n\");\r\n-\r\n }\r\n```\r\n\r\n3. this reproducer fails the test and when I put breakpoint (or logging) into `io.quarkus.grpc.auth.GrpcAuthTestBase.Service#unaryCall` it is never reached (or logged):\r\n\r\n```\r\ndiff --git a/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcServerProcessor.java b/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcServerProcessor.java\r\nindex ccaf3d8231a..3ac910e56e5 100644\r\n--- a/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcServerProcessor.java\r\n+++ b/extensions/grpc/deployment/src/main/java/io/quarkus/grpc/deployment/GrpcServerProcessor.java\r\n@@ -45,7 +45,6 @@\r\n import io.quarkus.arc.deployment.BeanContainerBuildItem;\r\n import io.quarkus.arc.deployment.CustomScopeAnnotationsBuildItem;\r\n import io.quarkus.arc.deployment.RecorderBeanInitializedBuildItem;\r\n-import io.quarkus.arc.deployment.SynthesisFinishedBuildItem;\r\n import io.quarkus.arc.deployment.SyntheticBeanBuildItem;\r\n import io.quarkus.arc.deployment.SyntheticBeansRuntimeInitBuildItem;\r\n import io.quarkus.arc.deployment.UnremovableBeanBuildItem;\r\n@@ -53,7 +52,6 @@\r\n import io.quarkus.arc.processor.AnnotationsTransformer;\r\n import io.quarkus.arc.processor.BeanInfo;\r\n import io.quarkus.arc.processor.BuiltinScope;\r\n-import io.quarkus.arc.processor.ObserverInfo;\r\n import io.quarkus.deployment.ApplicationArchive;\r\n import io.quarkus.deployment.Capabilities;\r\n import io.quarkus.deployment.Capability;\r\n@@ -69,7 +67,6 @@\r\n import io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem;\r\n import io.quarkus.deployment.builditem.FeatureBuildItem;\r\n import io.quarkus.deployment.builditem.LaunchModeBuildItem;\r\n-import io.quarkus.deployment.builditem.RuntimeConfigSetupCompleteBuildItem;\r\n import io.quarkus.deployment.builditem.ServiceStartBuildItem;\r\n import io.quarkus.deployment.builditem.ShutdownContextBuildItem;\r\n import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\r\n@@ -93,7 +90,6 @@\r\n import io.quarkus.kubernetes.spi.KubernetesPortBuildItem;\r\n import io.quarkus.netty.deployment.MinNettyAllocatorMaxOrderBuildItem;\r\n import io.quarkus.runtime.LaunchMode;\r\n-import io.quarkus.security.spi.runtime.SecurityEvent;\r\n import io.quarkus.smallrye.health.deployment.spi.HealthBuildItem;\r\n import io.quarkus.vertx.deployment.VertxBuildItem;\r\n import io.quarkus.vertx.http.deployment.VertxWebRouterBuildItem;\r\n@@ -796,36 +792,4 @@ void initGrpcSecurityInterceptor(List<BindableServiceBuildItem> bindables, Capab\r\n         }\r\n     }\r\n \r\n-    @Record(RUNTIME_INIT)\r\n-    @Consume(RuntimeConfigSetupCompleteBuildItem.class)\r\n-    @BuildStep\r\n-    void validateSecurityEventsNotObserved(SynthesisFinishedBuildItem synthesisFinished,\r\n-            Capabilities capabilities,\r\n-            GrpcSecurityRecorder recorder,\r\n-            BeanArchiveIndexBuildItem indexBuildItem) {\r\n-        if (!capabilities.isPresent(Capability.SECURITY)) {\r\n-            return;\r\n-        }\r\n-\r\n-        // collect all SecurityEvent classes\r\n-        Set<DotName> knownSecurityEventClasses = new HashSet<>();\r\n-        knownSecurityEventClasses.add(DotName.createSimple(SecurityEvent.class));\r\n-        indexBuildItem\r\n-                .getIndex()\r\n-                .getAllKnownImplementors(SecurityEvent.class)\r\n-                .stream()\r\n-                .map(ClassInfo::name)\r\n-                .forEach(knownSecurityEventClasses::add);\r\n-\r\n-        // find at least one CDI observer and validate security events are disabled\r\n-        knownClasses: for (DotName knownSecurityEventClass : knownSecurityEventClasses) {\r\n-            for (ObserverInfo observer : synthesisFinished.getObservers()) {\r\n-                if (observer.getObservedType().name().equals(knownSecurityEventClass)) {\r\n-                    recorder.validateSecurityEventsDisabled(knownSecurityEventClass.toString());\r\n-                    break knownClasses;\r\n-                }\r\n-            }\r\n-        }\r\n-    }\r\n-\r\n }\r\ndiff --git a/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/auth/GrpcAuthTestBase.java b/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/auth/GrpcAuthTestBase.java\r\nindex 3ec48c1ca6b..faadc5b9fdc 100644\r\n--- a/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/auth/GrpcAuthTestBase.java\r\n+++ b/extensions/grpc/deployment/src/test/java/io/quarkus/grpc/auth/GrpcAuthTestBase.java\r\n@@ -61,6 +61,7 @@ protected static QuarkusUnitTest createQuarkusUnitTest(String extraProperty) {\r\n                     }\r\n \r\n                     return ShrinkWrap.create(JavaArchive.class)\r\n+                            .addClass(SecurityEventObserver.class)\r\n                             .addClasses(Service.class, BasicGrpcSecurityMechanism.class, BlockingHttpSecurityPolicy.class)\r\n                             .addPackage(SecuredService.class.getPackage())\r\n                             .add(new StringAsset(props), \"application.properties\");\r\n```\r\n\r\nAnd now, you need to ask yourself how do I know it is also related to synchronous events here - you can just comment out this line,\r\n\r\nhttps://github.com/quarkusio/quarkus/blob/08bff7a2a239b0e7746f3aeb7d8811b3480a8143/extensions/security/runtime-spi/src/main/java/io/quarkus/security/spi/runtime/SecurityEventHelper.java#L72\r\n\r\nbuild Security extension and re-run test with a same result.\r\n\r\n### Output of `uname -a` or `ver`\r\n\r\nFedora 38\r\n\r\n### Output of `java -version`\r\n\r\nOpenJDK Runtime Environment Temurin-17.0.7+7\r\n\r\n### Quarkus version or git rev\r\n\r\n999-SNAPSHOT\r\n\r\n### Build tool (ie. output of `mvnw --version` or `gradlew --version`)\r\n\r\nApache Maven 3.9.3\r\n\r\n### Additional information\r\n\r\n_No response_",
  "reactions": {
    "url": "https://api.github.com/repos/quarkusio/quarkus/issues/37741/reactions",
    "total_count": 0,
    "+1": 0,
    "-1": 0,
    "laugh": 0,
    "hooray": 0,
    "confused": 0,
    "heart": 0,
    "rocket": 0,
    "eyes": 0
  },
  "timeline_url": "https://api.github.com/repos/quarkusio/quarkus/issues/37741/timeline",
  "performed_via_github_app": null,
  "state_reason": "completed"
}
